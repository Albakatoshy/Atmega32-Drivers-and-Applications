
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  00004396  0000442a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008001c2  008001c2  0000458c  2**0
                  ALLOC
  3 .stab         00004e0c  00000000  00000000  0000458c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000203e  00000000  00000000  00009398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b576  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000db73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000eef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000100d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010586  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010ef4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__vector_1>
       8:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__vector_2>
       c:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <main>
      8a:	0c 94 c9 21 	jmp	0x4392	; 0x4392 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 21 	jmp	0x433c	; 0x433c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 21 	jmp	0x433c	; 0x433c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e9       	ldi	r22, 0x95	; 149
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9e 21 	jmp	0x433c	; 0x433c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9e 21 	jmp	0x433c	; 0x433c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9e 21 	jmp	0x433c	; 0x433c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 be 21 	jmp	0x437c	; 0x437c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 56       	subi	r30, 0x63	; 99
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MWDT_vEnable>:
 *      Author: anaal
 */

#include "WGT_int.h"

void MWDT_vEnable(u8 A_u8TimerOut){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01

	//Set timeOut
	WDTCR= (WDTCR &0xF8) | (A_u8TimerOut&0x07) ;
     e3a:	a1 e4       	ldi	r26, 0x41	; 65
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e1 e4       	ldi	r30, 0x41	; 65
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	98 2f       	mov	r25, r24
     e46:	98 7f       	andi	r25, 0xF8	; 248
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	87 70       	andi	r24, 0x07	; 7
     e4c:	89 2b       	or	r24, r25
     e4e:	8c 93       	st	X, r24

	//Enable
	SET_BIT(WDTCR , WDTCR_WDE);
     e50:	a1 e4       	ldi	r26, 0x41	; 65
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e1 e4       	ldi	r30, 0x41	; 65
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	8c 93       	st	X, r24


}
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <MWDT_vDisable>:


void MWDT_vDisable(void){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62

	WDTCR = 0b00011000;
     e6e:	e1 e4       	ldi	r30, 0x41	; 65
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	88 e1       	ldi	r24, 0x18	; 24
     e74:	80 83       	st	Z, r24
	WDTCR = 0;
     e76:	e1 e4       	ldi	r30, 0x41	; 65
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	10 82       	st	Z, r1

}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <MUSART_vInit>:
 */

#include "USART_int.h"


void MUSART_vInit(void){
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	// enable receiver & transmitter
	UCSRB = 0b00011000;
     e8a:	ea e2       	ldi	r30, 0x2A	; 42
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	88 e1       	ldi	r24, 0x18	; 24
     e90:	80 83       	st	Z, r24
	// enable UCSRC reg | asynch | no parity | 1 stop bit | 8 bit data | no clk polarity
	UCSRC = 0b10000110;
     e92:	e0 e4       	ldi	r30, 0x40	; 64
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	86 e8       	ldi	r24, 0x86	; 134
     e98:	80 83       	st	Z, r24
	UBRRL = 51;
     e9a:	e9 e2       	ldi	r30, 0x29	; 41
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	83 e3       	ldi	r24, 0x33	; 51
     ea0:	80 83       	st	Z, r24
	UBRRH = 0;
     ea2:	e0 e4       	ldi	r30, 0x40	; 64
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	10 82       	st	Z, r1

}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <MUSART_vTransmit>:

void MUSART_vTransmit(u8 A_u8Byte){
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while(!GET_BIT(UCSRA, UCSRA_UDRE));
     eba:	eb e2       	ldi	r30, 0x2B	; 43
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 95       	swap	r24
     ec2:	86 95       	lsr	r24
     ec4:	87 70       	andi	r24, 0x07	; 7
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	81 70       	andi	r24, 0x01	; 1
     ecc:	90 70       	andi	r25, 0x00	; 0
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	a1 f3       	breq	.-24     	; 0xeba <MUSART_vTransmit+0xc>
//	while ( !( UCSRA & (1<<UDRE)) )
//	;
	/* Put data into buffer, sends the data */
	UDR = A_u8Byte;
     ed2:	ec e2       	ldi	r30, 0x2C	; 44
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	80 83       	st	Z, r24

}
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <MUSART_vReceive>:

u8  MUSART_vReceive(void){
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while(!GET_BIT(UCSRA, UCSRA_RXC));
     eea:	eb e2       	ldi	r30, 0x2B	; 43
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 23       	and	r24, r24
     ef2:	dc f7       	brge	.-10     	; 0xeea <MUSART_vReceive+0x8>
//	while ( !(UCSRA & (1<<RXC)) )
//	;
	/* Get and return received data from buffer */
	return UDR;
     ef4:	ec e2       	ldi	r30, 0x2C	; 44
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <MUSART_vWriteString>:

void MUSART_vWriteString(u8 *_data ,u8 str_len){
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <MUSART_vWriteString+0x6>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <MUSART_vWriteString+0x8>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	9b 83       	std	Y+3, r25	; 0x03
     f0e:	8a 83       	std	Y+2, r24	; 0x02
     f10:	6c 83       	std	Y+4, r22	; 0x04
    u8 l_counter = 0 ;
     f12:	19 82       	std	Y+1, r1	; 0x01
     for(l_counter=0 ; l_counter < str_len ; l_counter++){
     f14:	19 82       	std	Y+1, r1	; 0x01
     f16:	0e c0       	rjmp	.+28     	; 0xf34 <MUSART_vWriteString+0x34>
    	 MUSART_vTransmit(_data[l_counter]);
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	9b 81       	ldd	r25, Y+3	; 0x03
     f22:	fc 01       	movw	r30, r24
     f24:	e2 0f       	add	r30, r18
     f26:	f3 1f       	adc	r31, r19
     f28:	80 81       	ld	r24, Z
     f2a:	0e 94 57 07 	call	0xeae	; 0xeae <MUSART_vTransmit>
	return UDR;
}

void MUSART_vWriteString(u8 *_data ,u8 str_len){
    u8 l_counter = 0 ;
     for(l_counter=0 ; l_counter < str_len ; l_counter++){
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	8f 5f       	subi	r24, 0xFF	; 255
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	99 81       	ldd	r25, Y+1	; 0x01
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	98 17       	cp	r25, r24
     f3a:	70 f3       	brcs	.-36     	; 0xf18 <MUSART_vWriteString+0x18>
    	 MUSART_vTransmit(_data[l_counter]);
     }
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <MTIMER1_vInit>:
void (*G_Timer1_OCR_Interrupt_Handler)(void) = NULL;
void (*G_Timer1_ICU_Interrupt_Handler)(void) = NULL;


void MTIMER1_vInit()
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
    // --- Waveform Generation Mode: Fast PWM (Mode 14: WGM13:0 = 1110) ---
    CLEAR_BIT(TCCR1A, 0); // WGM10 = 0
     f52:	af e4       	ldi	r26, 0x4F	; 79
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ef e4       	ldi	r30, 0x4F	; 79
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	8c 93       	st	X, r24
    SET_BIT(TCCR1A, 1);   // WGM11 = 1
     f60:	af e4       	ldi	r26, 0x4F	; 79
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ef e4       	ldi	r30, 0x4F	; 79
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, 3);   // WGM12 = 1
     f6e:	ae e4       	ldi	r26, 0x4E	; 78
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ee e4       	ldi	r30, 0x4E	; 78
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 60       	ori	r24, 0x08	; 8
     f7a:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, 4);   // WGM13 = 1
     f7c:	ae e4       	ldi	r26, 0x4E	; 78
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ee e4       	ldi	r30, 0x4E	; 78
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 61       	ori	r24, 0x10	; 16
     f88:	8c 93       	st	X, r24

    // --- Compare Output Mode: Non-Inverted PWM on OC1A and OC1B ---
    CLEAR_BIT(TCCR1A, 6); // COM1A1 = 1 (non-inverting OC1A)
     f8a:	af e4       	ldi	r26, 0x4F	; 79
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ef e4       	ldi	r30, 0x4F	; 79
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8f 7b       	andi	r24, 0xBF	; 191
     f96:	8c 93       	st	X, r24
    SET_BIT(TCCR1A, 7);   // COM1A0 = 0
     f98:	af e4       	ldi	r26, 0x4F	; 79
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ef e4       	ldi	r30, 0x4F	; 79
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 68       	ori	r24, 0x80	; 128
     fa4:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR1A, 4); // COM1B0 = 0
     fa6:	af e4       	ldi	r26, 0x4F	; 79
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ef e4       	ldi	r30, 0x4F	; 79
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 7e       	andi	r24, 0xEF	; 239
     fb2:	8c 93       	st	X, r24
    SET_BIT(TCCR1A, 5);   // COM1B1 = 1 (non-inverting OC1B)
     fb4:	af e4       	ldi	r26, 0x4F	; 79
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ef e4       	ldi	r30, 0x4F	; 79
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 62       	ori	r24, 0x20	; 32
     fc0:	8c 93       	st	X, r24

    // --- Set TOP value for 20ms period (50Hz) ---
    ICR1 = 20000;
     fc2:	e6 e4       	ldi	r30, 0x46	; 70
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	9e e4       	ldi	r25, 0x4E	; 78
     fca:	91 83       	std	Z+1, r25	; 0x01
     fcc:	80 83       	st	Z, r24

    // --- Prescaler = 8 (CS11 = 1) ---
    CLEAR_BIT(TCCR1B, 0); // CS10 = 0
     fce:	ae e4       	ldi	r26, 0x4E	; 78
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ee e4       	ldi	r30, 0x4E	; 78
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, 1);   // CS11 = 1
     fdc:	ae e4       	ldi	r26, 0x4E	; 78
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ee e4       	ldi	r30, 0x4E	; 78
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	82 60       	ori	r24, 0x02	; 2
     fe8:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B, 2); // CS12 = 0
     fea:	ae e4       	ldi	r26, 0x4E	; 78
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ee e4       	ldi	r30, 0x4E	; 78
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8b 7f       	andi	r24, 0xFB	; 251
     ff6:	8c 93       	st	X, r24

    // --- Set output pins as output ---
    MDIO_vSetPinDirection(DIO_PORTD_INDEX, DIO_PIN5, DIO_PIN_DIRECTION_OUTPUT); // OC1A (PD5)
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	65 e0       	ldi	r22, 0x05	; 5
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(DIO_PORTD_INDEX, DIO_PIN4, DIO_PIN_DIRECTION_OUTPUT); // OC1B (PD4)
    1002:	83 e0       	ldi	r24, 0x03	; 3
    1004:	64 e0       	ldi	r22, 0x04	; 4
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <MTIMER1_vSetCompareMatch>:
void MTIMER1_vSetCompareMatch(u16 A_OCRR_VAL)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <MTIMER1_vSetCompareMatch+0x6>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=A_OCRR_VAL;
    1020:	ea e4       	ldi	r30, 0x4A	; 74
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	80 83       	st	Z, r24
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <MTIMER1_vStartTimer>:
//	MTIMER0_vStartTimer();
//}
//
//

void MTIMER1_vStartTimer(void) {
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
#if TIMER_1 == ENABLE
	// Clear the lower 3 bits of TCCR1B (CS12:0), then set the prescaler
	TCCR1B = (TCCR1B & 0xF8) | (0x07 & PRE_SCALER);
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 7f       	andi	r24, 0xF8	; 248
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	8c 93       	st	X, r24
#endif
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <MTIMER1_u16GetCaptureValue>:



u16  MTIMER1_u16GetCaptureValue(void){
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    105c:	e6 e4       	ldi	r30, 0x46	; 70
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	91 81       	ldd	r25, Z+1	; 0x01
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <MTIMER1_vSetTrigger>:


void MTIMER1_vSetTrigger(u8 TriggerType){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <MTIMER1_vSetTrigger+0x6>
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	89 83       	std	Y+1, r24	; 0x01
	switch(TriggerType){
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3b 83       	std	Y+3, r19	; 0x03
    1080:	2a 83       	std	Y+2, r18	; 0x02
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	31 f0       	breq	.+12     	; 0x1096 <MTIMER1_vSetTrigger+0x2c>
    108a:	2a 81       	ldd	r18, Y+2	; 0x02
    108c:	3b 81       	ldd	r19, Y+3	; 0x03
    108e:	21 30       	cpi	r18, 0x01	; 1
    1090:	31 05       	cpc	r19, r1
    1092:	49 f0       	breq	.+18     	; 0x10a6 <MTIMER1_vSetTrigger+0x3c>
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <MTIMER1_vSetTrigger+0x4a>
		case TRIG_TYPE_RISING:
			// ICES1 bit is written to one, a rising (positive)
			SET_BIT(TCCR1B , 6);
    1096:	ae e4       	ldi	r26, 0x4E	; 78
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ee e4       	ldi	r30, 0x4E	; 78
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	80 64       	ori	r24, 0x40	; 64
    10a2:	8c 93       	st	X, r24
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <MTIMER1_vSetTrigger+0x4a>
			break;

		case TRIG_TYPE_FALLING:
			//e ICES1 bit is written to zero, a falling (negative) edge
			CLEAR_BIT(TCCR1B , 6);
    10a6:	ae e4       	ldi	r26, 0x4E	; 78
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ee e4       	ldi	r30, 0x4E	; 78
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7b       	andi	r24, 0xBF	; 191
    10b2:	8c 93       	st	X, r24
			break;


	}
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <MTIMER1_vEnableInterrupt>:

void MTIMER1_vEnableInterrupt(){
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_TICIE1);
    10c8:	a9 e5       	ldi	r26, 0x59	; 89
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e9 e5       	ldi	r30, 0x59	; 89
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 62       	ori	r24, 0x20	; 32
    10d4:	8c 93       	st	X, r24

}
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <MTIMER1_vDisableInterrupt>:

void MTIMER1_vDisableInterrupt(){
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TIMSK_TICIE1);
    10e4:	a9 e5       	ldi	r26, 0x59	; 89
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e9 e5       	ldi	r30, 0x59	; 89
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8f 7d       	andi	r24, 0xDF	; 223
    10f0:	8c 93       	st	X, r24

}
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <MTIMER1_vSetICU_CB>:


void MTIMER1_vSetICU_CB(void (*Fptr)(void)){
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <MTIMER1_vSetICU_CB+0x6>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
	G_Timer1_ICU_Interrupt_Handler =Fptr;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	90 93 c7 01 	sts	0x01C7, r25
    110e:	80 93 c6 01 	sts	0x01C6, r24
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <__vector_6>:


void __vector_6(void)  __attribute__((signal));
void __vector_6(void)
{
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	5f 93       	push	r21
    112e:	6f 93       	push	r22
    1130:	7f 93       	push	r23
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	if(G_Timer1_ICU_Interrupt_Handler){
    1146:	80 91 c6 01 	lds	r24, 0x01C6
    114a:	90 91 c7 01 	lds	r25, 0x01C7
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	29 f0       	breq	.+10     	; 0x115c <__vector_6+0x40>
		G_Timer1_ICU_Interrupt_Handler();
    1152:	e0 91 c6 01 	lds	r30, 0x01C6
    1156:	f0 91 c7 01 	lds	r31, 0x01C7
    115a:	09 95       	icall
	}
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <MTIMER0_vInit>:

void (*G_Timer0_OVF_Interrupt_Handler)(void) = NULL;
void (*G_Timer0_OCR_Interrupt_Handler)(void) = NULL;
static u32 G_u32_Treq = 0;

void MTIMER0_vInit(void){
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    SERVO_DDR |= (1 << SERVO_PIN);
    118a:	a7 e3       	ldi	r26, 0x37	; 55
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e7 e3       	ldi	r30, 0x37	; 55
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	88 60       	ori	r24, 0x08	; 8
    1196:	8c 93       	st	X, r24

    // Timer0 normal mode, prescaler = 8 → 1 tick = 1µs
    TCCR0 = (1 << CS01);
    1198:	e3 e5       	ldi	r30, 0x53	; 83
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	80 83       	st	Z, r24

    // Initial timer value for 10µs overflow
    TCNT0 = 256 - 10;
    11a0:	e2 e5       	ldi	r30, 0x52	; 82
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	86 ef       	ldi	r24, 0xF6	; 246
    11a6:	80 83       	st	Z, r24

    // Enable overflow interrupt
    TIMSK |= (1 << TOIE0);
    11a8:	a9 e5       	ldi	r26, 0x59	; 89
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e9 e5       	ldi	r30, 0x59	; 89
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	81 60       	ori	r24, 0x01	; 1
    11b4:	8c 93       	st	X, r24

    MINT_vGlobalIntEnableDisable(INT_GLOBAL_INTERRUPT_ENABLE);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <MINT_vGlobalIntEnableDisable>
}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <SetServoAngle_Timer0>:

void SetServoAngle_Timer0(u8 angle) {
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	0f 92       	push	r0
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
    if (angle > 180) angle = 180;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	85 3b       	cpi	r24, 0xB5	; 181
    11d2:	10 f0       	brcs	.+4      	; 0x11d8 <SetServoAngle_Timer0+0x16>
    11d4:	84 eb       	ldi	r24, 0xB4	; 180
    11d6:	89 83       	std	Y+1, r24	; 0x01
    // Map 0–180° to 1000–2000 µs
    pulse_width_us = ((angle * 1000UL) / 180) + 1000;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	a0 e0       	ldi	r26, 0x00	; 0
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	28 ee       	ldi	r18, 0xE8	; 232
    11e4:	33 e0       	ldi	r19, 0x03	; 3
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	bc 01       	movw	r22, r24
    11ec:	cd 01       	movw	r24, r26
    11ee:	0e 94 3d 21 	call	0x427a	; 0x427a <__mulsi3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	24 eb       	ldi	r18, 0xB4	; 180
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__udivmodsi4>
    1206:	da 01       	movw	r26, r20
    1208:	c9 01       	movw	r24, r18
    120a:	88 51       	subi	r24, 0x18	; 24
    120c:	9c 4f       	sbci	r25, 0xFC	; 252
    120e:	90 93 9e 01 	sts	0x019E, r25
    1212:	80 93 9d 01 	sts	0x019D, r24
}
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <ISR>:

ISR(TIMER0_OVF_vect) {
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <ISR+0x6>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <ISR+0x8>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
    // Reload timer to overflow after 10µs
    TCNT0 = 256 - 10;
    122e:	e2 e5       	ldi	r30, 0x52	; 82
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	86 ef       	ldi	r24, 0xF6	; 246
    1234:	80 83       	st	Z, r24
    tick_counter++;
    1236:	80 91 c8 01 	lds	r24, 0x01C8
    123a:	90 91 c9 01 	lds	r25, 0x01C9
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	90 93 c9 01 	sts	0x01C9, r25
    1244:	80 93 c8 01 	sts	0x01C8, r24

    if (tick_counter == 1) {
    1248:	80 91 c8 01 	lds	r24, 0x01C8
    124c:	90 91 c9 01 	lds	r25, 0x01C9
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	91 05       	cpc	r25, r1
    1254:	41 f4       	brne	.+16     	; 0x1266 <ISR+0x48>
        // Start pulse
        SERVO_PORT |= (1 << SERVO_PIN);
    1256:	a8 e3       	ldi	r26, 0x38	; 56
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e8 e3       	ldi	r30, 0x38	; 56
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	88 60       	ori	r24, 0x08	; 8
    1262:	8c 93       	st	X, r24
    1264:	26 c0       	rjmp	.+76     	; 0x12b2 <ISR+0x94>
    } else if (tick_counter == (pulse_width_us / 10)) {
    1266:	80 91 9d 01 	lds	r24, 0x019D
    126a:	90 91 9e 01 	lds	r25, 0x019E
    126e:	2a e0       	ldi	r18, 0x0A	; 10
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	b9 01       	movw	r22, r18
    1274:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__udivmodhi4>
    1278:	cb 01       	movw	r24, r22
    127a:	9c 01       	movw	r18, r24
    127c:	80 91 c8 01 	lds	r24, 0x01C8
    1280:	90 91 c9 01 	lds	r25, 0x01C9
    1284:	28 17       	cp	r18, r24
    1286:	39 07       	cpc	r19, r25
    1288:	41 f4       	brne	.+16     	; 0x129a <ISR+0x7c>
        // End pulse
        SERVO_PORT &= ~(1 << SERVO_PIN);
    128a:	a8 e3       	ldi	r26, 0x38	; 56
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e8 e3       	ldi	r30, 0x38	; 56
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	87 7f       	andi	r24, 0xF7	; 247
    1296:	8c 93       	st	X, r24
    1298:	0c c0       	rjmp	.+24     	; 0x12b2 <ISR+0x94>
    } else if (tick_counter >= 2000) {
    129a:	80 91 c8 01 	lds	r24, 0x01C8
    129e:	90 91 c9 01 	lds	r25, 0x01C9
    12a2:	27 e0       	ldi	r18, 0x07	; 7
    12a4:	80 3d       	cpi	r24, 0xD0	; 208
    12a6:	92 07       	cpc	r25, r18
    12a8:	20 f0       	brcs	.+8      	; 0x12b2 <ISR+0x94>
        // 20 ms complete
        tick_counter = 0;
    12aa:	10 92 c9 01 	sts	0x01C9, r1
    12ae:	10 92 c8 01 	sts	0x01C8, r1
    }
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <MSPI_voidInit>:
 */


#include "SPI_int.h"

void MSPI_voidInit(void){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,6);

#endif

#if SPI_MODE == SPI_SLAVE_MODE
	MDIO_vSetPinDirection(DIO_PORTB_INDEX,DIO_PIN5,DIO_PIN_DIRECTION_INPUT);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	65 e0       	ldi	r22, 0x05	; 5
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(DIO_PORTB_INDEX,DIO_PIN7,DIO_PIN_DIRECTION_INPUT);
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	67 e0       	ldi	r22, 0x07	; 7
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(DIO_PORTB_INDEX,DIO_PIN6,DIO_PIN_DIRECTION_OUTPUT);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	66 e0       	ldi	r22, 0x06	; 6
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	//slave mode
	CLEAR_BIT(SPCR,4);
    12e6:	ad e2       	ldi	r26, 0x2D	; 45
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	ed e2       	ldi	r30, 0x2D	; 45
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7e       	andi	r24, 0xEF	; 239
    12f2:	8c 93       	st	X, r24
	//enable
	SET_BIT(SPCR,6);
    12f4:	ad e2       	ldi	r26, 0x2D	; 45
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ed e2       	ldi	r30, 0x2D	; 45
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 64       	ori	r24, 0x40	; 64
    1300:	8c 93       	st	X, r24

#endif



}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <MSPI_u8Tranceive>:

u8 MSPI_u8Tranceive(u8 A_u8Byte){
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	0f 92       	push	r0
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
	SPDR=A_u8Byte;
    1314:	ef e2       	ldi	r30, 0x2F	; 47
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    131c:	ee e2       	ldi	r30, 0x2E	; 46
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	88 23       	and	r24, r24
    1324:	dc f7       	brge	.-10     	; 0x131c <MSPI_u8Tranceive+0x14>
	return SPDR;
    1326:	ef e2       	ldi	r30, 0x2F	; 47
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
}
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <MSPI_vTransmit>:

void MSPI_vTransmit(u8 A_u8Byte){
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	0f 92       	push	r0
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	 SPDR = A_u8Byte;
    1340:	ef e2       	ldi	r30, 0x2F	; 47
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	80 83       	st	Z, r24
	 /* Wait for transmission complete */
	 while(!(SPSR & (1<<7)));
    1348:	ee e2       	ldi	r30, 0x2E	; 46
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	88 23       	and	r24, r24
    1350:	dc f7       	brge	.-10     	; 0x1348 <MSPI_vTransmit+0x14>
}
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <MSPI_u8Receive>:

u8   MSPI_u8Receive(void){
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62

	 /* Wait for reception complete */
	 while(!(SPSR & (1<<7)))
    1362:	ee e2       	ldi	r30, 0x2E	; 46
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	88 23       	and	r24, r24
    136a:	dc f7       	brge	.-10     	; 0x1362 <MSPI_u8Receive+0x8>
	 ;
	 /* Return data register */
	 return SPDR;
    136c:	ef e2       	ldi	r30, 0x2F	; 47
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <MI2C_vMasterInit>:


#include "I2C_int.h"


void MI2C_vMasterInit(void){
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWSR,TWSR_TWPS0);
    1380:	a1 e2       	ldi	r26, 0x21	; 33
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e1 e2       	ldi	r30, 0x21	; 33
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8e 7f       	andi	r24, 0xFE	; 254
    138c:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR,TWSR_TWPS1);
    138e:	a1 e2       	ldi	r26, 0x21	; 33
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e1 e2       	ldi	r30, 0x21	; 33
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8d 7f       	andi	r24, 0xFD	; 253
    139a:	8c 93       	st	X, r24
	TWDR=2;
    139c:	e3 e2       	ldi	r30, 0x23	; 35
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWCR_TWEN);
    13a4:	a6 e5       	ldi	r26, 0x56	; 86
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e6 e5       	ldi	r30, 0x56	; 86
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	84 60       	ori	r24, 0x04	; 4
    13b0:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWCR_TWIE);
    13b2:	a6 e5       	ldi	r26, 0x56	; 86
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e6 e5       	ldi	r30, 0x56	; 86
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	8c 93       	st	X, r24
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <MI2C_vSlaveInit>:


void MI2C_vSlaveInit(u8 slave_add){
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	0f 92       	push	r0
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	89 83       	std	Y+1, r24	; 0x01
	TWAR=slave_add<<1;
    13d2:	e2 e2       	ldi	r30, 0x22	; 34
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	88 0f       	add	r24, r24
    13da:	80 83       	st	Z, r24
	//enable ACK
    SET_BIT(TWCR, TWCR_TWEA);
    13dc:	a6 e5       	ldi	r26, 0x56	; 86
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e6 e5       	ldi	r30, 0x56	; 86
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 64       	ori	r24, 0x40	; 64
    13e8:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEN);
    13ea:	a6 e5       	ldi	r26, 0x56	; 86
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e6 e5       	ldi	r30, 0x56	; 86
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	84 60       	ori	r24, 0x04	; 4
    13f6:	8c 93       	st	X, r24
}
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <MI2C_SendStartCondition>:

I2C_error_t MI2C_SendStartCondition(void){
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	u8 L_Error = no_error;
    140a:	19 82       	std	Y+1, r1	; 0x01
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    140c:	e6 e5       	ldi	r30, 0x56	; 86
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	84 ea       	ldi	r24, 0xA4	; 164
    1412:	80 83       	st	Z, r24
	while(!(GET_BIT(TWCR , TWCR_TWINT)));
    1414:	e6 e5       	ldi	r30, 0x56	; 86
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 23       	and	r24, r24
    141c:	dc f7       	brge	.-10     	; 0x1414 <MI2C_SendStartCondition+0x14>
	if((TWSR & 0xF8) == 0x08){
    141e:	e1 e2       	ldi	r30, 0x21	; 33
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	88 7f       	andi	r24, 0xF8	; 248
    142a:	90 70       	andi	r25, 0x00	; 0
    142c:	88 30       	cpi	r24, 0x08	; 8
    142e:	91 05       	cpc	r25, r1
    1430:	11 f0       	breq	.+4      	; 0x1436 <MI2C_SendStartCondition+0x36>

	}
	else{
		L_Error = start_condtion_error ;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_Error;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
}
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <MI2C_SendRepeatedStartCondition>:

I2C_error_t MI2C_SendRepeatedStartCondition(void){
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	u8 L_Error = no_error;
    144a:	19 82       	std	Y+1, r1	; 0x01
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    144c:	e6 e5       	ldi	r30, 0x56	; 86
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	84 ea       	ldi	r24, 0xA4	; 164
    1452:	80 83       	st	Z, r24
	while(!(GET_BIT(TWCR , TWCR_TWINT)));
    1454:	e6 e5       	ldi	r30, 0x56	; 86
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 23       	and	r24, r24
    145c:	dc f7       	brge	.-10     	; 0x1454 <MI2C_SendRepeatedStartCondition+0x14>
	if((TWSR & 0xF8) == 0x10){
    145e:	e1 e2       	ldi	r30, 0x21	; 33
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	88 7f       	andi	r24, 0xF8	; 248
    146a:	90 70       	andi	r25, 0x00	; 0
    146c:	80 31       	cpi	r24, 0x10	; 16
    146e:	91 05       	cpc	r25, r1
    1470:	11 f0       	breq	.+4      	; 0x1476 <MI2C_SendRepeatedStartCondition+0x36>

	}
	else{
		L_Error = repeated_start_condtion_error ;
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_Error;
    1476:	89 81       	ldd	r24, Y+1	; 0x01
}
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <MI2C_SendSlaveAddress_Write>:

I2C_error_t MI2C_SendSlaveAddress_Write(u8 data){
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <MI2C_SendSlaveAddress_Write+0x6>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_Error = no_error;
    148c:	19 82       	std	Y+1, r1	; 0x01
	TWDR = (data << 1); // 7-bit address with R/W = 0
    148e:	e3 e2       	ldi	r30, 0x23	; 35
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	88 0f       	add	r24, r24
    1496:	80 83       	st	Z, r24
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1498:	e6 e5       	ldi	r30, 0x56	; 86
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	84 e8       	ldi	r24, 0x84	; 132
    149e:	80 83       	st	Z, r24

	while(!(GET_BIT(TWCR , TWCR_TWINT)));
    14a0:	e6 e5       	ldi	r30, 0x56	; 86
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	88 23       	and	r24, r24
    14a8:	dc f7       	brge	.-10     	; 0x14a0 <MI2C_SendSlaveAddress_Write+0x20>
	if((TWSR & 0xF8) == 0x18){
    14aa:	e1 e2       	ldi	r30, 0x21	; 33
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	88 7f       	andi	r24, 0xF8	; 248
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	88 31       	cpi	r24, 0x18	; 24
    14ba:	91 05       	cpc	r25, r1
    14bc:	11 f0       	breq	.+4      	; 0x14c2 <MI2C_SendSlaveAddress_Write+0x42>

	}
	else{
		L_Error = slave_data_write_ack_error;
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_Error;
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <MI2C_SendSlaveAddress_Read>:

I2C_error_t MI2C_SendSlaveAddress_Read(u8 data){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <MI2C_SendSlaveAddress_Read+0x6>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_Error = no_error;
    14da:	19 82       	std	Y+1, r1	; 0x01
	TWDR = (data << 1) | 1; // R/W = 1 for read mode
    14dc:	e3 e2       	ldi	r30, 0x23	; 35
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	81 60       	ori	r24, 0x01	; 1
    14ec:	80 83       	st	Z, r24
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    14ee:	e6 e5       	ldi	r30, 0x56	; 86
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	84 e8       	ldi	r24, 0x84	; 132
    14f4:	80 83       	st	Z, r24

	while(!(GET_BIT(TWCR , TWCR_TWINT)));
    14f6:	e6 e5       	ldi	r30, 0x56	; 86
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	88 23       	and	r24, r24
    14fe:	dc f7       	brge	.-10     	; 0x14f6 <MI2C_SendSlaveAddress_Read+0x28>
	if((TWSR & 0xF8) == 0x40){
    1500:	e1 e2       	ldi	r30, 0x21	; 33
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	88 7f       	andi	r24, 0xF8	; 248
    150c:	90 70       	andi	r25, 0x00	; 0
    150e:	80 34       	cpi	r24, 0x40	; 64
    1510:	91 05       	cpc	r25, r1
    1512:	11 f0       	breq	.+4      	; 0x1518 <MI2C_SendSlaveAddress_Read+0x4a>

	}
	else{
		L_Error = slave_data_read_ack_error;
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_Error;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <MI2C_MasterReadData>:


I2C_error_t MI2C_MasterReadData(u8 *data_read){
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <MI2C_MasterReadData+0x6>
    152a:	0f 92       	push	r0
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9b 83       	std	Y+3, r25	; 0x03
    1532:	8a 83       	std	Y+2, r24	; 0x02

	u8 L_Error = no_error;
    1534:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TWCR , TWCR_TWINT);
    1536:	a6 e5       	ldi	r26, 0x56	; 86
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e6 e5       	ldi	r30, 0x56	; 86
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR , TWCR_TWINT)));
    1544:	e6 e5       	ldi	r30, 0x56	; 86
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	88 23       	and	r24, r24
    154c:	dc f7       	brge	.-10     	; 0x1544 <MI2C_MasterReadData+0x20>
	if((TWSR & 0xF8) == 0x50){
    154e:	e1 e2       	ldi	r30, 0x21	; 33
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	88 7f       	andi	r24, 0xF8	; 248
    155a:	90 70       	andi	r25, 0x00	; 0
    155c:	80 35       	cpi	r24, 0x50	; 80
    155e:	91 05       	cpc	r25, r1
    1560:	39 f4       	brne	.+14     	; 0x1570 <MI2C_MasterReadData+0x4c>
		*data_read = TWDR;
    1562:	e3 e2       	ldi	r30, 0x23	; 35
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	ea 81       	ldd	r30, Y+2	; 0x02
    156a:	fb 81       	ldd	r31, Y+3	; 0x03
    156c:	80 83       	st	Z, r24
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <MI2C_MasterReadData+0x50>
	}
	else{
		L_Error = master_read_data_error;
    1570:	86 e0       	ldi	r24, 0x06	; 6
    1572:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_Error;
    1574:	89 81       	ldd	r24, Y+1	; 0x01
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <MI2C_MasterWriteData>:


I2C_error_t MI2C_MasterWriteData(u8 data){
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <MI2C_MasterWriteData+0x6>
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_Error =no_error;
    158e:	19 82       	std	Y+1, r1	; 0x01
	TWDR =data;
    1590:	e3 e2       	ldi	r30, 0x23	; 35
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	80 83       	st	Z, r24
	SET_BIT(TWCR , TWCR_TWINT);
    1598:	a6 e5       	ldi	r26, 0x56	; 86
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e6 e5       	ldi	r30, 0x56	; 86
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR , TWCR_TWINT)));
    15a6:	e6 e5       	ldi	r30, 0x56	; 86
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 23       	and	r24, r24
    15ae:	dc f7       	brge	.-10     	; 0x15a6 <MI2C_MasterWriteData+0x24>

	if((TWSR & 0xF8) == 0x28){
    15b0:	e1 e2       	ldi	r30, 0x21	; 33
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	88 7f       	andi	r24, 0xF8	; 248
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	88 32       	cpi	r24, 0x28	; 40
    15c0:	91 05       	cpc	r25, r1
    15c2:	11 f0       	breq	.+4      	; 0x15c8 <MI2C_MasterWriteData+0x46>

	}
	else{
		L_Error = master_write_data_error;
    15c4:	85 e0       	ldi	r24, 0x05	; 5
    15c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_Error;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <MI2C_SendStopCondition>:


void MI2C_SendStopCondition(void){
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN) | (1 << TWCR_TWSTO);
    15dc:	e6 e5       	ldi	r30, 0x56	; 86
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	84 e9       	ldi	r24, 0x94	; 148
    15e2:	80 83       	st	Z, r24
}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <MINT_vGlobalIntEnableDisable>:
 *      Author: anaal
 */

#include "GLOBAL_INT_int.h"

void MINT_vGlobalIntEnableDisable(u8 A_u8Mode){
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <MINT_vGlobalIntEnableDisable+0x6>
    15f0:	0f 92       	push	r0
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8Mode){
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3b 83       	std	Y+3, r19	; 0x03
    1600:	2a 83       	std	Y+2, r18	; 0x02
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	9b 81       	ldd	r25, Y+3	; 0x03
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	69 f0       	breq	.+26     	; 0x1624 <MINT_vGlobalIntEnableDisable+0x3a>
    160a:	2a 81       	ldd	r18, Y+2	; 0x02
    160c:	3b 81       	ldd	r19, Y+3	; 0x03
    160e:	21 30       	cpi	r18, 0x01	; 1
    1610:	31 05       	cpc	r19, r1
    1612:	79 f4       	brne	.+30     	; 0x1632 <MINT_vGlobalIntEnableDisable+0x48>
		case INT_GLOBAL_INTERRUPT_ENABLE:
			SET_BIT(SREG , GLOBAL_INTERRUPT_BIT);
    1614:	af e5       	ldi	r26, 0x5F	; 95
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	ef e5       	ldi	r30, 0x5F	; 95
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 68       	ori	r24, 0x80	; 128
    1620:	8c 93       	st	X, r24
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <MINT_vGlobalIntEnableDisable+0x48>
			break;

		case INT_GLOBAL_INTERRUPT_DISABLE:
			CLEAR_BIT(SREG , GLOBAL_INTERRUPT_BIT);
    1624:	af e5       	ldi	r26, 0x5F	; 95
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ef e5       	ldi	r30, 0x5F	; 95
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 77       	andi	r24, 0x7F	; 127
    1630:	8c 93       	st	X, r24
			break;
	}
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <MEXT_INT_vEnableDisablePrepheral>:
#include "EXT_INT_int.h"

static void (*GlobalPtrInterruptHandler[3])(void)={0};

void MEXT_INT_vEnableDisablePrepheral(u8 A_u8ExtIntx , u8 A_u8Mode )
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <MEXT_INT_vEnableDisablePrepheral+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <MEXT_INT_vEnableDisablePrepheral+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8ExtIntx)
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3c 83       	std	Y+4, r19	; 0x04
    1656:	2b 83       	std	Y+3, r18	; 0x03
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	91 05       	cpc	r25, r1
    1660:	01 f1       	breq	.+64     	; 0x16a2 <MEXT_INT_vEnableDisablePrepheral+0x64>
    1662:	2b 81       	ldd	r18, Y+3	; 0x03
    1664:	3c 81       	ldd	r19, Y+4	; 0x04
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	89 f1       	breq	.+98     	; 0x16ce <MEXT_INT_vEnableDisablePrepheral+0x90>
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	09 f0       	breq	.+2      	; 0x1676 <MEXT_INT_vEnableDisablePrepheral+0x38>
    1674:	41 c0       	rjmp	.+130    	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
    {
        case EXT_INT0:
            if (A_u8Mode == EXT_INT_ENABLE)
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	41 f4       	brne	.+16     	; 0x168c <MEXT_INT_vEnableDisablePrepheral+0x4e>
            {
                SET_BIT(GICR, GICR_INT0);
    167c:	ab e5       	ldi	r26, 0x5B	; 91
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	eb e5       	ldi	r30, 0x5B	; 91
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 64       	ori	r24, 0x40	; 64
    1688:	8c 93       	st	X, r24
    168a:	36 c0       	rjmp	.+108    	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
            }
            else if (A_u8Mode == EXT_INT_DISABLE)
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	88 23       	and	r24, r24
    1690:	99 f5       	brne	.+102    	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
            {
                CLEAR_BIT(GICR, GICR_INT0);
    1692:	ab e5       	ldi	r26, 0x5B	; 91
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	eb e5       	ldi	r30, 0x5B	; 91
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8f 7b       	andi	r24, 0xBF	; 191
    169e:	8c 93       	st	X, r24
    16a0:	2b c0       	rjmp	.+86     	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
            }
            break;

        case EXT_INT1:
            if (A_u8Mode == EXT_INT_ENABLE)
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	41 f4       	brne	.+16     	; 0x16b8 <MEXT_INT_vEnableDisablePrepheral+0x7a>
            {
                SET_BIT(GICR, GICR_INT1);
    16a8:	ab e5       	ldi	r26, 0x5B	; 91
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e5       	ldi	r30, 0x5B	; 91
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	8c 93       	st	X, r24
    16b6:	20 c0       	rjmp	.+64     	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
            }
            else if (A_u8Mode == EXT_INT_DISABLE)
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	88 23       	and	r24, r24
    16bc:	e9 f4       	brne	.+58     	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
            {
                CLEAR_BIT(GICR, GICR_INT1);
    16be:	ab e5       	ldi	r26, 0x5B	; 91
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e5       	ldi	r30, 0x5B	; 91
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 77       	andi	r24, 0x7F	; 127
    16ca:	8c 93       	st	X, r24
    16cc:	15 c0       	rjmp	.+42     	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
            }
            break;

        case EXT_INT2:
            if (A_u8Mode == EXT_INT_ENABLE)
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	41 f4       	brne	.+16     	; 0x16e4 <MEXT_INT_vEnableDisablePrepheral+0xa6>
            {
                SET_BIT(GICR, GICR_INT2);
    16d4:	ab e5       	ldi	r26, 0x5B	; 91
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e5       	ldi	r30, 0x5B	; 91
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 62       	ori	r24, 0x20	; 32
    16e0:	8c 93       	st	X, r24
    16e2:	0a c0       	rjmp	.+20     	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
            }
            else if (A_u8Mode == EXT_INT_DISABLE)
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	88 23       	and	r24, r24
    16e8:	39 f4       	brne	.+14     	; 0x16f8 <MEXT_INT_vEnableDisablePrepheral+0xba>
            {
                CLEAR_BIT(GICR, GICR_INT2);
    16ea:	ab e5       	ldi	r26, 0x5B	; 91
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e5       	ldi	r30, 0x5B	; 91
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8f 7d       	andi	r24, 0xDF	; 223
    16f6:	8c 93       	st	X, r24
            }
            break;

        default:break;
    }
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <MEXT_INT_vIntSenstivity>:


void MEXT_INT_vIntSenstivity(u8 A_u8ExtIntx, u8 A_u8Senstivity)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	2a 97       	sbiw	r28, 0x0a	; 10
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8ExtIntx)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	3a 87       	std	Y+10, r19	; 0x0a
    1726:	29 87       	std	Y+9, r18	; 0x09
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <MEXT_INT_vIntSenstivity+0x2e>
    1732:	66 c0       	rjmp	.+204    	; 0x1800 <MEXT_INT_vIntSenstivity+0xfa>
    1734:	29 85       	ldd	r18, Y+9	; 0x09
    1736:	3a 85       	ldd	r19, Y+10	; 0x0a
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <MEXT_INT_vIntSenstivity+0x3a>
    173e:	bb c0       	rjmp	.+374    	; 0x18b6 <MEXT_INT_vIntSenstivity+0x1b0>
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	09 f0       	breq	.+2      	; 0x174a <MEXT_INT_vIntSenstivity+0x44>
    1748:	d5 c0       	rjmp	.+426    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
    {
        case EXT_INT0:
            switch (A_u8Senstivity)
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	38 87       	std	Y+8, r19	; 0x08
    1752:	2f 83       	std	Y+7, r18	; 0x07
    1754:	8f 81       	ldd	r24, Y+7	; 0x07
    1756:	98 85       	ldd	r25, Y+8	; 0x08
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	91 05       	cpc	r25, r1
    175c:	21 f1       	breq	.+72     	; 0x17a6 <MEXT_INT_vIntSenstivity+0xa0>
    175e:	2f 81       	ldd	r18, Y+7	; 0x07
    1760:	38 85       	ldd	r19, Y+8	; 0x08
    1762:	22 30       	cpi	r18, 0x02	; 2
    1764:	31 05       	cpc	r19, r1
    1766:	2c f4       	brge	.+10     	; 0x1772 <MEXT_INT_vIntSenstivity+0x6c>
    1768:	8f 81       	ldd	r24, Y+7	; 0x07
    176a:	98 85       	ldd	r25, Y+8	; 0x08
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	61 f0       	breq	.+24     	; 0x1788 <MEXT_INT_vIntSenstivity+0x82>
    1770:	c1 c0       	rjmp	.+386    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
    1772:	2f 81       	ldd	r18, Y+7	; 0x07
    1774:	38 85       	ldd	r19, Y+8	; 0x08
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	21 f1       	breq	.+72     	; 0x17c4 <MEXT_INT_vIntSenstivity+0xbe>
    177c:	8f 81       	ldd	r24, Y+7	; 0x07
    177e:	98 85       	ldd	r25, Y+8	; 0x08
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	91 05       	cpc	r25, r1
    1784:	71 f1       	breq	.+92     	; 0x17e2 <MEXT_INT_vIntSenstivity+0xdc>
    1786:	b6 c0       	rjmp	.+364    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
            {
                case EXT_INT_LOW_LEVEL_SENSTIVITY:
                    CLEAR_BIT(MCUCR, MCUCR_ISC00);
    1788:	a5 e5       	ldi	r26, 0x55	; 85
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e5 e5       	ldi	r30, 0x55	; 85
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8e 7f       	andi	r24, 0xFE	; 254
    1794:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, MCUCR_ISC01);
    1796:	a5 e5       	ldi	r26, 0x55	; 85
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e5       	ldi	r30, 0x55	; 85
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	8d 7f       	andi	r24, 0xFD	; 253
    17a2:	8c 93       	st	X, r24
    17a4:	a7 c0       	rjmp	.+334    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
                    break;

                case EXT_INT_ANY_LOGIC_CHANGE_SENSTIVITY:
                    SET_BIT(MCUCR, MCUCR_ISC00);
    17a6:	a5 e5       	ldi	r26, 0x55	; 85
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e5 e5       	ldi	r30, 0x55	; 85
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	81 60       	ori	r24, 0x01	; 1
    17b2:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, MCUCR_ISC01);
    17b4:	a5 e5       	ldi	r26, 0x55	; 85
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e5       	ldi	r30, 0x55	; 85
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8d 7f       	andi	r24, 0xFD	; 253
    17c0:	8c 93       	st	X, r24
    17c2:	98 c0       	rjmp	.+304    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
                    break;

                case EXT_INT_FALLING_EDGE_SENSTIVITY:
                    CLEAR_BIT(MCUCR, MCUCR_ISC00);
    17c4:	a5 e5       	ldi	r26, 0x55	; 85
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e5       	ldi	r30, 0x55	; 85
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	8e 7f       	andi	r24, 0xFE	; 254
    17d0:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, MCUCR_ISC01);
    17d2:	a5 e5       	ldi	r26, 0x55	; 85
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e5 e5       	ldi	r30, 0x55	; 85
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	82 60       	ori	r24, 0x02	; 2
    17de:	8c 93       	st	X, r24
    17e0:	89 c0       	rjmp	.+274    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
                    break;

                case EXT_INT_RISING_EDGE_SENSTIVITY:
                    SET_BIT(MCUCR, MCUCR_ISC00);
    17e2:	a5 e5       	ldi	r26, 0x55	; 85
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e5       	ldi	r30, 0x55	; 85
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	81 60       	ori	r24, 0x01	; 1
    17ee:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, MCUCR_ISC01);
    17f0:	a5 e5       	ldi	r26, 0x55	; 85
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e5 e5       	ldi	r30, 0x55	; 85
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	82 60       	ori	r24, 0x02	; 2
    17fc:	8c 93       	st	X, r24
    17fe:	7a c0       	rjmp	.+244    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
                    break;
            }
            break;

        case EXT_INT1:
            switch (A_u8Senstivity)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	3e 83       	std	Y+6, r19	; 0x06
    1808:	2d 83       	std	Y+5, r18	; 0x05
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	91 05       	cpc	r25, r1
    1812:	21 f1       	breq	.+72     	; 0x185c <MEXT_INT_vIntSenstivity+0x156>
    1814:	2d 81       	ldd	r18, Y+5	; 0x05
    1816:	3e 81       	ldd	r19, Y+6	; 0x06
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	2c f4       	brge	.+10     	; 0x1828 <MEXT_INT_vIntSenstivity+0x122>
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	61 f0       	breq	.+24     	; 0x183e <MEXT_INT_vIntSenstivity+0x138>
    1826:	66 c0       	rjmp	.+204    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
    1828:	2d 81       	ldd	r18, Y+5	; 0x05
    182a:	3e 81       	ldd	r19, Y+6	; 0x06
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	21 f1       	breq	.+72     	; 0x187a <MEXT_INT_vIntSenstivity+0x174>
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	83 30       	cpi	r24, 0x03	; 3
    1838:	91 05       	cpc	r25, r1
    183a:	71 f1       	breq	.+92     	; 0x1898 <MEXT_INT_vIntSenstivity+0x192>
    183c:	5b c0       	rjmp	.+182    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
            {
                case EXT_INT_LOW_LEVEL_SENSTIVITY:
                    CLEAR_BIT(MCUCR, MCUCR_ISC10);
    183e:	a5 e5       	ldi	r26, 0x55	; 85
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e5       	ldi	r30, 0x55	; 85
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8b 7f       	andi	r24, 0xFB	; 251
    184a:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, MCUCR_ISC11);
    184c:	a5 e5       	ldi	r26, 0x55	; 85
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e5       	ldi	r30, 0x55	; 85
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	87 7f       	andi	r24, 0xF7	; 247
    1858:	8c 93       	st	X, r24
    185a:	4c c0       	rjmp	.+152    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
                    break;

                case EXT_INT_ANY_LOGIC_CHANGE_SENSTIVITY:
                    SET_BIT(MCUCR, MCUCR_ISC10);
    185c:	a5 e5       	ldi	r26, 0x55	; 85
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e5       	ldi	r30, 0x55	; 85
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	84 60       	ori	r24, 0x04	; 4
    1868:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, MCUCR_ISC11);
    186a:	a5 e5       	ldi	r26, 0x55	; 85
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e5 e5       	ldi	r30, 0x55	; 85
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	87 7f       	andi	r24, 0xF7	; 247
    1876:	8c 93       	st	X, r24
    1878:	3d c0       	rjmp	.+122    	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
                    break;

                case EXT_INT_FALLING_EDGE_SENSTIVITY:
                    CLEAR_BIT(MCUCR, MCUCR_ISC10);
    187a:	a5 e5       	ldi	r26, 0x55	; 85
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e5       	ldi	r30, 0x55	; 85
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8b 7f       	andi	r24, 0xFB	; 251
    1886:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, MCUCR_ISC11);
    1888:	a5 e5       	ldi	r26, 0x55	; 85
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e5 e5       	ldi	r30, 0x55	; 85
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 60       	ori	r24, 0x08	; 8
    1894:	8c 93       	st	X, r24
    1896:	2e c0       	rjmp	.+92     	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
                    break;

                case EXT_INT_RISING_EDGE_SENSTIVITY:
                    SET_BIT(MCUCR, MCUCR_ISC10);
    1898:	a5 e5       	ldi	r26, 0x55	; 85
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e5       	ldi	r30, 0x55	; 85
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	84 60       	ori	r24, 0x04	; 4
    18a4:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, MCUCR_ISC11);
    18a6:	a5 e5       	ldi	r26, 0x55	; 85
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e5       	ldi	r30, 0x55	; 85
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	88 60       	ori	r24, 0x08	; 8
    18b2:	8c 93       	st	X, r24
    18b4:	1f c0       	rjmp	.+62     	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
            }
            break;

        case EXT_INT2:

            switch (A_u8Senstivity)
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3c 83       	std	Y+4, r19	; 0x04
    18be:	2b 83       	std	Y+3, r18	; 0x03
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	31 f0       	breq	.+12     	; 0x18d6 <MEXT_INT_vIntSenstivity+0x1d0>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	23 30       	cpi	r18, 0x03	; 3
    18d0:	31 05       	cpc	r19, r1
    18d2:	49 f0       	breq	.+18     	; 0x18e6 <MEXT_INT_vIntSenstivity+0x1e0>
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
            {
                case EXT_INT_FALLING_EDGE_SENSTIVITY:
                    CLEAR_BIT(MCUCSR, MCUCSR_ISC2);
    18d6:	a4 e5       	ldi	r26, 0x54	; 84
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e4 e5       	ldi	r30, 0x54	; 84
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8f 7b       	andi	r24, 0xBF	; 191
    18e2:	8c 93       	st	X, r24
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <MEXT_INT_vIntSenstivity+0x1ee>
                    break;

                case EXT_INT_RISING_EDGE_SENSTIVITY:
                    SET_BIT(MCUCSR, MCUCSR_ISC2);
    18e6:	a4 e5       	ldi	r26, 0x54	; 84
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e4 e5       	ldi	r30, 0x54	; 84
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 64       	ori	r24, 0x40	; 64
    18f2:	8c 93       	st	X, r24
            }
            break;

        default:break;
    }
}
    18f4:	2a 96       	adiw	r28, 0x0a	; 10
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <MEXT_INT_InterruptHandler>:

EXT_INT_STD_ERR MEXT_INT_InterruptHandler(u8 A_u8ExtTIntx , void (*LocalPtrInterruptHandler)(void)){
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <MEXT_INT_InterruptHandler+0x6>
    190c:	00 d0       	rcall	.+0      	; 0x190e <MEXT_INT_InterruptHandler+0x8>
    190e:	00 d0       	rcall	.+0      	; 0x1910 <MEXT_INT_InterruptHandler+0xa>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	7b 83       	std	Y+3, r23	; 0x03
    1918:	6a 83       	std	Y+2, r22	; 0x02
	 if (LocalPtrInterruptHandler == NULL)
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	19 f4       	brne	.+6      	; 0x1928 <MEXT_INT_InterruptHandler+0x22>
	{
		return NULL_POINTER_ERROR;
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	2e 83       	std	Y+6, r18	; 0x06
    1926:	2e c0       	rjmp	.+92     	; 0x1984 <MEXT_INT_InterruptHandler+0x7e>
	}
	else
	{
		switch(A_u8ExtTIntx){
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	3d 83       	std	Y+5, r19	; 0x05
    1930:	2c 83       	std	Y+4, r18	; 0x04
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	91 05       	cpc	r25, r1
    193a:	81 f0       	breq	.+32     	; 0x195c <MEXT_INT_InterruptHandler+0x56>
    193c:	2c 81       	ldd	r18, Y+4	; 0x04
    193e:	3d 81       	ldd	r19, Y+5	; 0x05
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	91 f0       	breq	.+36     	; 0x196a <MEXT_INT_InterruptHandler+0x64>
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	9d 81       	ldd	r25, Y+5	; 0x05
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	a1 f4       	brne	.+40     	; 0x1976 <MEXT_INT_InterruptHandler+0x70>
			case EXT_INT0:
				GlobalPtrInterruptHandler[0]=LocalPtrInterruptHandler;
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	9b 81       	ldd	r25, Y+3	; 0x03
    1952:	90 93 d3 01 	sts	0x01D3, r25
    1956:	80 93 d2 01 	sts	0x01D2, r24
    195a:	0d c0       	rjmp	.+26     	; 0x1976 <MEXT_INT_InterruptHandler+0x70>
				break;
			case EXT_INT1:
				GlobalPtrInterruptHandler[1]=LocalPtrInterruptHandler;
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	90 93 d5 01 	sts	0x01D5, r25
    1964:	80 93 d4 01 	sts	0x01D4, r24
    1968:	06 c0       	rjmp	.+12     	; 0x1976 <MEXT_INT_InterruptHandler+0x70>
				break;
			case EXT_INT2:
				GlobalPtrInterruptHandler[2]=LocalPtrInterruptHandler;
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	9b 81       	ldd	r25, Y+3	; 0x03
    196e:	90 93 d7 01 	sts	0x01D7, r25
    1972:	80 93 d6 01 	sts	0x01D6, r24
				break;
		}
	}

	if (A_u8ExtTIntx >= 3)
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	18 f0       	brcs	.+6      	; 0x1982 <MEXT_INT_InterruptHandler+0x7c>
	{
		return INVALID_EXT_INT;
    197c:	92 e0       	ldi	r25, 0x02	; 2
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <MEXT_INT_InterruptHandler+0x7e>
	}

	return EXT_INT_OK;
    1982:	1e 82       	std	Y+6, r1	; 0x06
    1984:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1986:	26 96       	adiw	r28, 0x06	; 6
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <MEXTI_vInit>:


void MEXTI_vInit(void){
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62

#endif

#if 	EXT_INT1_CFG == EXT_INT_ENABLE
	#if     EXT_INT_SENSTIVITY_ENABLE_CFG == EXT_INT_LOW_LEVEL_SENSTIVITY_CFG
		CLEAR_BIT(MCUCR, MCUCR_ISC10);
    19a0:	a5 e5       	ldi	r26, 0x55	; 85
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e5 e5       	ldi	r30, 0x55	; 85
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8b 7f       	andi	r24, 0xFB	; 251
    19ac:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, MCUCR_ISC11);
    19ae:	a5 e5       	ldi	r26, 0x55	; 85
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e5 e5       	ldi	r30, 0x55	; 85
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	87 7f       	andi	r24, 0xF7	; 247
    19ba:	8c 93       	st	X, r24
	#elif     EXT_INT_RISING_EDGE_SENSTIVITY_CFG == EXT_INT_LOW_LEVEL_SENSTIVITY_CFG
		SET_BIT(MCUCR, MCUCR_ISC10);
		SET_BIT(MCUCR, MCUCR_ISC11);
	#endif

		MINT_vGlobalIntEnableDisable(INT_GLOBAL_INTERRUPT_ENABLE);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <MINT_vGlobalIntEnableDisable>
		SET_BIT(GICR, GICR_INT1);
    19c2:	ab e5       	ldi	r26, 0x5B	; 91
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	eb e5       	ldi	r30, 0x5B	; 91
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	80 68       	ori	r24, 0x80	; 128
    19ce:	8c 93       	st	X, r24
	#endif

		MINT_vGlobalIntEnableDisable(INT_GLOBAL_INTERRUPT_ENABLE);
		SET_BIT(GICR, GICR_INT2);
#endif
}
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <__vector_1>:


void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
    19d6:	1f 92       	push	r1
    19d8:	0f 92       	push	r0
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	0f 92       	push	r0
    19de:	11 24       	eor	r1, r1
    19e0:	2f 93       	push	r18
    19e2:	3f 93       	push	r19
    19e4:	4f 93       	push	r20
    19e6:	5f 93       	push	r21
    19e8:	6f 93       	push	r22
    19ea:	7f 93       	push	r23
    19ec:	8f 93       	push	r24
    19ee:	9f 93       	push	r25
    19f0:	af 93       	push	r26
    19f2:	bf 93       	push	r27
    19f4:	ef 93       	push	r30
    19f6:	ff 93       	push	r31
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
	if(GlobalPtrInterruptHandler[0]){
    1a00:	80 91 d2 01 	lds	r24, 0x01D2
    1a04:	90 91 d3 01 	lds	r25, 0x01D3
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	29 f0       	breq	.+10     	; 0x1a16 <__vector_1+0x40>
		GlobalPtrInterruptHandler[0]();
    1a0c:	e0 91 d2 01 	lds	r30, 0x01D2
    1a10:	f0 91 d3 01 	lds	r31, 0x01D3
    1a14:	09 95       	icall
	}
}
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	ff 91       	pop	r31
    1a1c:	ef 91       	pop	r30
    1a1e:	bf 91       	pop	r27
    1a20:	af 91       	pop	r26
    1a22:	9f 91       	pop	r25
    1a24:	8f 91       	pop	r24
    1a26:	7f 91       	pop	r23
    1a28:	6f 91       	pop	r22
    1a2a:	5f 91       	pop	r21
    1a2c:	4f 91       	pop	r20
    1a2e:	3f 91       	pop	r19
    1a30:	2f 91       	pop	r18
    1a32:	0f 90       	pop	r0
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	0f 90       	pop	r0
    1a38:	1f 90       	pop	r1
    1a3a:	18 95       	reti

00001a3c <__vector_2>:


void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
    1a3c:	1f 92       	push	r1
    1a3e:	0f 92       	push	r0
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	0f 92       	push	r0
    1a44:	11 24       	eor	r1, r1
    1a46:	2f 93       	push	r18
    1a48:	3f 93       	push	r19
    1a4a:	4f 93       	push	r20
    1a4c:	5f 93       	push	r21
    1a4e:	6f 93       	push	r22
    1a50:	7f 93       	push	r23
    1a52:	8f 93       	push	r24
    1a54:	9f 93       	push	r25
    1a56:	af 93       	push	r26
    1a58:	bf 93       	push	r27
    1a5a:	ef 93       	push	r30
    1a5c:	ff 93       	push	r31
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
	if(GlobalPtrInterruptHandler[1]){
    1a66:	80 91 d4 01 	lds	r24, 0x01D4
    1a6a:	90 91 d5 01 	lds	r25, 0x01D5
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	29 f0       	breq	.+10     	; 0x1a7c <__vector_2+0x40>
		GlobalPtrInterruptHandler[1]();
    1a72:	e0 91 d4 01 	lds	r30, 0x01D4
    1a76:	f0 91 d5 01 	lds	r31, 0x01D5
    1a7a:	09 95       	icall
	}
}
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	ff 91       	pop	r31
    1a82:	ef 91       	pop	r30
    1a84:	bf 91       	pop	r27
    1a86:	af 91       	pop	r26
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	7f 91       	pop	r23
    1a8e:	6f 91       	pop	r22
    1a90:	5f 91       	pop	r21
    1a92:	4f 91       	pop	r20
    1a94:	3f 91       	pop	r19
    1a96:	2f 91       	pop	r18
    1a98:	0f 90       	pop	r0
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	0f 90       	pop	r0
    1a9e:	1f 90       	pop	r1
    1aa0:	18 95       	reti

00001aa2 <__vector_3>:


void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
    1aa2:	1f 92       	push	r1
    1aa4:	0f 92       	push	r0
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	0f 92       	push	r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	2f 93       	push	r18
    1aae:	3f 93       	push	r19
    1ab0:	4f 93       	push	r20
    1ab2:	5f 93       	push	r21
    1ab4:	6f 93       	push	r22
    1ab6:	7f 93       	push	r23
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	af 93       	push	r26
    1abe:	bf 93       	push	r27
    1ac0:	ef 93       	push	r30
    1ac2:	ff 93       	push	r31
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	if(GlobalPtrInterruptHandler[2]){
    1acc:	80 91 d6 01 	lds	r24, 0x01D6
    1ad0:	90 91 d7 01 	lds	r25, 0x01D7
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	29 f0       	breq	.+10     	; 0x1ae2 <__vector_3+0x40>
		GlobalPtrInterruptHandler[2]();
    1ad8:	e0 91 d6 01 	lds	r30, 0x01D6
    1adc:	f0 91 d7 01 	lds	r31, 0x01D7
    1ae0:	09 95       	icall
	}
}
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	ff 91       	pop	r31
    1ae8:	ef 91       	pop	r30
    1aea:	bf 91       	pop	r27
    1aec:	af 91       	pop	r26
    1aee:	9f 91       	pop	r25
    1af0:	8f 91       	pop	r24
    1af2:	7f 91       	pop	r23
    1af4:	6f 91       	pop	r22
    1af6:	5f 91       	pop	r21
    1af8:	4f 91       	pop	r20
    1afa:	3f 91       	pop	r19
    1afc:	2f 91       	pop	r18
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	0f 90       	pop	r0
    1b04:	1f 90       	pop	r1
    1b06:	18 95       	reti

00001b08 <MDIO_vInit>:
#include "../../LIB/BIT_MATH.h"

#include "DIO_int.h"


void MDIO_vInit(void){
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62

	DDRA 	= 0;
    1b10:	ea e3       	ldi	r30, 0x3A	; 58
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	10 82       	st	Z, r1
	DDRB 	= 0;
    1b16:	e7 e3       	ldi	r30, 0x37	; 55
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	10 82       	st	Z, r1
	DDRC 	= 0;
    1b1c:	e4 e3       	ldi	r30, 0x34	; 52
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	10 82       	st	Z, r1
	DDRD 	= 0;
    1b22:	e1 e3       	ldi	r30, 0x31	; 49
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	10 82       	st	Z, r1

	PORTA 	= 0;
    1b28:	eb e3       	ldi	r30, 0x3B	; 59
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	10 82       	st	Z, r1
	PORTB  	= 0;
    1b2e:	e8 e3       	ldi	r30, 0x38	; 56
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	10 82       	st	Z, r1
	PORTC  	= 0;
    1b34:	e5 e3       	ldi	r30, 0x35	; 53
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	10 82       	st	Z, r1
	PORTD  	= 0;
    1b3a:	e2 e3       	ldi	r30, 0x32	; 50
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	10 82       	st	Z, r1

	PINA 	= 0;
    1b40:	e9 e3       	ldi	r30, 0x39	; 57
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	10 82       	st	Z, r1
	PINB	= 0;
    1b46:	e6 e3       	ldi	r30, 0x36	; 54
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	10 82       	st	Z, r1
	PINC	= 0;
    1b4c:	e3 e3       	ldi	r30, 0x33	; 51
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	10 82       	st	Z, r1
	PIND	= 0;
    1b52:	e0 e3       	ldi	r30, 0x30	; 48
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	10 82       	st	Z, r1
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <MDIO_vSetPinDirection>:

void MDIO_vSetPinDirection(u8 A_u8PortNum , u8 A_u8PinNum , u8 A_u8PinDirection){
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	27 97       	sbiw	r28, 0x07	; 7
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	6a 83       	std	Y+2, r22	; 0x02
    1b76:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinDirection == DIO_PIN_DIRECTION_OUTPUT){
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <MDIO_vSetPinDirection+0x22>
    1b7e:	6f c0       	rjmp	.+222    	; 0x1c5e <MDIO_vSetPinDirection+0x100>
		switch(A_u8PortNum){
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	3f 83       	std	Y+7, r19	; 0x07
    1b88:	2e 83       	std	Y+6, r18	; 0x06
    1b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	91 05       	cpc	r25, r1
    1b92:	49 f1       	breq	.+82     	; 0x1be6 <MDIO_vSetPinDirection+0x88>
    1b94:	2e 81       	ldd	r18, Y+6	; 0x06
    1b96:	3f 81       	ldd	r19, Y+7	; 0x07
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <MDIO_vSetPinDirection+0x4a>
    1b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	61 f0       	breq	.+24     	; 0x1bbe <MDIO_vSetPinDirection+0x60>
    1ba6:	d2 c0       	rjmp	.+420    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
    1ba8:	2e 81       	ldd	r18, Y+6	; 0x06
    1baa:	3f 81       	ldd	r19, Y+7	; 0x07
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	71 f1       	breq	.+92     	; 0x1c0e <MDIO_vSetPinDirection+0xb0>
    1bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	91 05       	cpc	r25, r1
    1bba:	e9 f1       	breq	.+122    	; 0x1c36 <MDIO_vSetPinDirection+0xd8>
    1bbc:	c7 c0       	rjmp	.+398    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
			case DIO_PORTA_INDEX:
				SET_BIT(DDRA , A_u8PinNum );
    1bbe:	aa e3       	ldi	r26, 0x3A	; 58
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ea e3       	ldi	r30, 0x3A	; 58
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <MDIO_vSetPinDirection+0x7e>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <MDIO_vSetPinDirection+0x7a>
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	b3 c0       	rjmp	.+358    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
				break;
			case DIO_PORTB_INDEX:
				SET_BIT(DDRB , A_u8PinNum );
    1be6:	a7 e3       	ldi	r26, 0x37	; 55
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e7 e3       	ldi	r30, 0x37	; 55
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <MDIO_vSetPinDirection+0xa6>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <MDIO_vSetPinDirection+0xa2>
    1c08:	84 2b       	or	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	9f c0       	rjmp	.+318    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
				break;
			case DIO_PORTC_INDEX:
				SET_BIT(DDRC , A_u8PinNum );
    1c0e:	a4 e3       	ldi	r26, 0x34	; 52
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e4 e3       	ldi	r30, 0x34	; 52
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <MDIO_vSetPinDirection+0xce>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <MDIO_vSetPinDirection+0xca>
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	8b c0       	rjmp	.+278    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
				break;
			case DIO_PORTD_INDEX:
				SET_BIT(DDRD , A_u8PinNum );
    1c36:	a1 e3       	ldi	r26, 0x31	; 49
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e1 e3       	ldi	r30, 0x31	; 49
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <MDIO_vSetPinDirection+0xf6>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <MDIO_vSetPinDirection+0xf2>
    1c58:	84 2b       	or	r24, r20
    1c5a:	8c 93       	st	X, r24
    1c5c:	77 c0       	rjmp	.+238    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
				return;

			default:break;
		}
	}
	else if(A_u8PinDirection == DIO_PIN_DIRECTION_INPUT){
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	88 23       	and	r24, r24
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <MDIO_vSetPinDirection+0x108>
    1c64:	73 c0       	rjmp	.+230    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
		switch(A_u8PortNum){
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3d 83       	std	Y+5, r19	; 0x05
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	59 f1       	breq	.+86     	; 0x1cd0 <MDIO_vSetPinDirection+0x172>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <MDIO_vSetPinDirection+0x130>
    1c84:	8c 81       	ldd	r24, Y+4	; 0x04
    1c86:	9d 81       	ldd	r25, Y+5	; 0x05
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f0       	breq	.+26     	; 0x1ca6 <MDIO_vSetPinDirection+0x148>
    1c8c:	5f c0       	rjmp	.+190    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
    1c8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c90:	3d 81       	ldd	r19, Y+5	; 0x05
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	89 f1       	breq	.+98     	; 0x1cfa <MDIO_vSetPinDirection+0x19c>
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <MDIO_vSetPinDirection+0x146>
    1ca2:	40 c0       	rjmp	.+128    	; 0x1d24 <MDIO_vSetPinDirection+0x1c6>
    1ca4:	53 c0       	rjmp	.+166    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
			case DIO_PORTA_INDEX:
				CLEAR_BIT(DDRA , A_u8PinNum );
    1ca6:	aa e3       	ldi	r26, 0x3A	; 58
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	ea e3       	ldi	r30, 0x3A	; 58
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <MDIO_vSetPinDirection+0x166>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <MDIO_vSetPinDirection+0x162>
    1cc8:	80 95       	com	r24
    1cca:	84 23       	and	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	3e c0       	rjmp	.+124    	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
				break;
			case DIO_PORTB_INDEX:
				CLEAR_BIT(DDRB , A_u8PinNum );
    1cd0:	a7 e3       	ldi	r26, 0x37	; 55
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e7 e3       	ldi	r30, 0x37	; 55
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <MDIO_vSetPinDirection+0x190>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <MDIO_vSetPinDirection+0x18c>
    1cf2:	80 95       	com	r24
    1cf4:	84 23       	and	r24, r20
    1cf6:	8c 93       	st	X, r24
    1cf8:	29 c0       	rjmp	.+82     	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
				break;
			case DIO_PORTC_INDEX:
				CLEAR_BIT(DDRC , A_u8PinNum );
    1cfa:	a4 e3       	ldi	r26, 0x34	; 52
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e4 e3       	ldi	r30, 0x34	; 52
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	48 2f       	mov	r20, r24
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	02 2e       	mov	r0, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <MDIO_vSetPinDirection+0x1ba>
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	0a 94       	dec	r0
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <MDIO_vSetPinDirection+0x1b6>
    1d1c:	80 95       	com	r24
    1d1e:	84 23       	and	r24, r20
    1d20:	8c 93       	st	X, r24
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <MDIO_vSetPinDirection+0x1ee>
				break;
			case DIO_PORTD_INDEX:
				CLEAR_BIT(DDRD , A_u8PinNum );
    1d24:	a1 e3       	ldi	r26, 0x31	; 49
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e1 e3       	ldi	r30, 0x31	; 49
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <MDIO_vSetPinDirection+0x1e4>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <MDIO_vSetPinDirection+0x1e0>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
		}
	}
	else{

	}
}
    1d4c:	27 96       	adiw	r28, 0x07	; 7
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <MDIO_vSetPinValue>:



void MDIO_vSetPinValue(u8 A_u8PortNum , u8 A_u8PinNum , u8 A_u8PinVal) {
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	27 97       	sbiw	r28, 0x07	; 7
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	6a 83       	std	Y+2, r22	; 0x02
    1d76:	4b 83       	std	Y+3, r20	; 0x03

	if(A_u8PinVal == DIO_PIN_HIGH){
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <MDIO_vSetPinValue+0x22>
    1d7e:	6f c0       	rjmp	.+222    	; 0x1e5e <MDIO_vSetPinValue+0x100>
		switch(A_u8PortNum){
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	3f 83       	std	Y+7, r19	; 0x07
    1d88:	2e 83       	std	Y+6, r18	; 0x06
    1d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	91 05       	cpc	r25, r1
    1d92:	49 f1       	breq	.+82     	; 0x1de6 <MDIO_vSetPinValue+0x88>
    1d94:	2e 81       	ldd	r18, Y+6	; 0x06
    1d96:	3f 81       	ldd	r19, Y+7	; 0x07
    1d98:	22 30       	cpi	r18, 0x02	; 2
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <MDIO_vSetPinValue+0x4a>
    1d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1da0:	9f 81       	ldd	r25, Y+7	; 0x07
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <MDIO_vSetPinValue+0x60>
    1da6:	d2 c0       	rjmp	.+420    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
    1da8:	2e 81       	ldd	r18, Y+6	; 0x06
    1daa:	3f 81       	ldd	r19, Y+7	; 0x07
    1dac:	22 30       	cpi	r18, 0x02	; 2
    1dae:	31 05       	cpc	r19, r1
    1db0:	71 f1       	breq	.+92     	; 0x1e0e <MDIO_vSetPinValue+0xb0>
    1db2:	8e 81       	ldd	r24, Y+6	; 0x06
    1db4:	9f 81       	ldd	r25, Y+7	; 0x07
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	e9 f1       	breq	.+122    	; 0x1e36 <MDIO_vSetPinValue+0xd8>
    1dbc:	c7 c0       	rjmp	.+398    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
			case DIO_PORTA_INDEX:
				SET_BIT(PORTA , A_u8PinNum );
    1dbe:	ab e3       	ldi	r26, 0x3B	; 59
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	eb e3       	ldi	r30, 0x3B	; 59
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	48 2f       	mov	r20, r24
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <MDIO_vSetPinValue+0x7e>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <MDIO_vSetPinValue+0x7a>
    1de0:	84 2b       	or	r24, r20
    1de2:	8c 93       	st	X, r24
    1de4:	b3 c0       	rjmp	.+358    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
				break;
			case DIO_PORTB_INDEX:
				SET_BIT(PORTB , A_u8PinNum );
    1de6:	a8 e3       	ldi	r26, 0x38	; 56
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e8 e3       	ldi	r30, 0x38	; 56
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	48 2f       	mov	r20, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 2e       	mov	r0, r18
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <MDIO_vSetPinValue+0xa6>
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	0a 94       	dec	r0
    1e06:	e2 f7       	brpl	.-8      	; 0x1e00 <MDIO_vSetPinValue+0xa2>
    1e08:	84 2b       	or	r24, r20
    1e0a:	8c 93       	st	X, r24
    1e0c:	9f c0       	rjmp	.+318    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
				break;
			case DIO_PORTC_INDEX:
				SET_BIT(PORTC , A_u8PinNum );
    1e0e:	a5 e3       	ldi	r26, 0x35	; 53
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e5 e3       	ldi	r30, 0x35	; 53
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	48 2f       	mov	r20, r24
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	02 2e       	mov	r0, r18
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <MDIO_vSetPinValue+0xce>
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	0a 94       	dec	r0
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <MDIO_vSetPinValue+0xca>
    1e30:	84 2b       	or	r24, r20
    1e32:	8c 93       	st	X, r24
    1e34:	8b c0       	rjmp	.+278    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
				break;
			case DIO_PORTD_INDEX:
				SET_BIT(PORTD , A_u8PinNum );
    1e36:	a2 e3       	ldi	r26, 0x32	; 50
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e2 e3       	ldi	r30, 0x32	; 50
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	48 2f       	mov	r20, r24
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	02 2e       	mov	r0, r18
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <MDIO_vSetPinValue+0xf6>
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	0a 94       	dec	r0
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <MDIO_vSetPinValue+0xf2>
    1e58:	84 2b       	or	r24, r20
    1e5a:	8c 93       	st	X, r24
    1e5c:	77 c0       	rjmp	.+238    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
				break;

			default:break;
			}
		}
	else if(A_u8PinVal == DIO_PIN_LOW){
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	88 23       	and	r24, r24
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <MDIO_vSetPinValue+0x108>
    1e64:	73 c0       	rjmp	.+230    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
		switch(A_u8PortNum){
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	3d 83       	std	Y+5, r19	; 0x05
    1e6e:	2c 83       	std	Y+4, r18	; 0x04
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	9d 81       	ldd	r25, Y+5	; 0x05
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	91 05       	cpc	r25, r1
    1e78:	59 f1       	breq	.+86     	; 0x1ed0 <MDIO_vSetPinValue+0x172>
    1e7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e7e:	22 30       	cpi	r18, 0x02	; 2
    1e80:	31 05       	cpc	r19, r1
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <MDIO_vSetPinValue+0x130>
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	9d 81       	ldd	r25, Y+5	; 0x05
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f0       	breq	.+26     	; 0x1ea6 <MDIO_vSetPinValue+0x148>
    1e8c:	5f c0       	rjmp	.+190    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
    1e8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e90:	3d 81       	ldd	r19, Y+5	; 0x05
    1e92:	22 30       	cpi	r18, 0x02	; 2
    1e94:	31 05       	cpc	r19, r1
    1e96:	89 f1       	breq	.+98     	; 0x1efa <MDIO_vSetPinValue+0x19c>
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <MDIO_vSetPinValue+0x146>
    1ea2:	40 c0       	rjmp	.+128    	; 0x1f24 <MDIO_vSetPinValue+0x1c6>
    1ea4:	53 c0       	rjmp	.+166    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
			case DIO_PORTA_INDEX:
				CLEAR_BIT(PORTA , A_u8PinNum );
    1ea6:	ab e3       	ldi	r26, 0x3B	; 59
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	eb e3       	ldi	r30, 0x3B	; 59
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	48 2f       	mov	r20, r24
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	02 2e       	mov	r0, r18
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <MDIO_vSetPinValue+0x166>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	0a 94       	dec	r0
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <MDIO_vSetPinValue+0x162>
    1ec8:	80 95       	com	r24
    1eca:	84 23       	and	r24, r20
    1ecc:	8c 93       	st	X, r24
    1ece:	3e c0       	rjmp	.+124    	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
				break;
			case DIO_PORTB_INDEX:
				CLEAR_BIT(PORTB , A_u8PinNum );
    1ed0:	a8 e3       	ldi	r26, 0x38	; 56
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e8 e3       	ldi	r30, 0x38	; 56
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	48 2f       	mov	r20, r24
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	02 2e       	mov	r0, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <MDIO_vSetPinValue+0x190>
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	0a 94       	dec	r0
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <MDIO_vSetPinValue+0x18c>
    1ef2:	80 95       	com	r24
    1ef4:	84 23       	and	r24, r20
    1ef6:	8c 93       	st	X, r24
    1ef8:	29 c0       	rjmp	.+82     	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
				break;
			case DIO_PORTC_INDEX:
				CLEAR_BIT(PORTC , A_u8PinNum );
    1efa:	a5 e3       	ldi	r26, 0x35	; 53
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e5 e3       	ldi	r30, 0x35	; 53
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	48 2f       	mov	r20, r24
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 2e       	mov	r0, r18
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <MDIO_vSetPinValue+0x1ba>
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	0a 94       	dec	r0
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <MDIO_vSetPinValue+0x1b6>
    1f1c:	80 95       	com	r24
    1f1e:	84 23       	and	r24, r20
    1f20:	8c 93       	st	X, r24
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <MDIO_vSetPinValue+0x1ee>
				break;
			case DIO_PORTD_INDEX:
				CLEAR_BIT(PORTD , A_u8PinNum );
    1f24:	a2 e3       	ldi	r26, 0x32	; 50
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e2 e3       	ldi	r30, 0x32	; 50
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <MDIO_vSetPinValue+0x1e4>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <MDIO_vSetPinValue+0x1e0>
    1f46:	80 95       	com	r24
    1f48:	84 23       	and	r24, r20
    1f4a:	8c 93       	st	X, r24
			}
		}
	else{

	}
}
    1f4c:	27 96       	adiw	r28, 0x07	; 7
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <MDIO_u8GetPinValue>:


u8 MDIO_u8GetPinValue(u8 A_u8PortNum , u8 A_u8PinNum){
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <MDIO_u8GetPinValue+0x6>
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <MDIO_u8GetPinValue+0x8>
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <MDIO_u8GetPinValue+0xa>
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
    1f6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal = 0;
    1f70:	19 82       	std	Y+1, r1	; 0x01

	switch (A_u8PortNum) {
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3e 83       	std	Y+6, r19	; 0x06
    1f7a:	2d 83       	std	Y+5, r18	; 0x05
    1f7c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f7e:	5e 81       	ldd	r21, Y+6	; 0x06
    1f80:	41 30       	cpi	r20, 0x01	; 1
    1f82:	51 05       	cpc	r21, r1
    1f84:	41 f1       	breq	.+80     	; 0x1fd6 <MDIO_u8GetPinValue+0x78>
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	34 f4       	brge	.+12     	; 0x1f9c <MDIO_u8GetPinValue+0x3e>
    1f90:	2d 81       	ldd	r18, Y+5	; 0x05
    1f92:	3e 81       	ldd	r19, Y+6	; 0x06
    1f94:	21 15       	cp	r18, r1
    1f96:	31 05       	cpc	r19, r1
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <MDIO_u8GetPinValue+0x54>
    1f9a:	53 c0       	rjmp	.+166    	; 0x2042 <MDIO_u8GetPinValue+0xe4>
    1f9c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f9e:	5e 81       	ldd	r21, Y+6	; 0x06
    1fa0:	42 30       	cpi	r20, 0x02	; 2
    1fa2:	51 05       	cpc	r21, r1
    1fa4:	51 f1       	breq	.+84     	; 0x1ffa <MDIO_u8GetPinValue+0x9c>
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	91 05       	cpc	r25, r1
    1fae:	b9 f1       	breq	.+110    	; 0x201e <MDIO_u8GetPinValue+0xc0>
    1fb0:	48 c0       	rjmp	.+144    	; 0x2042 <MDIO_u8GetPinValue+0xe4>
		case DIO_PORTA_INDEX:
			L_u8PinVal = GET_BIT(PINA , A_u8PinNum );
    1fb2:	e9 e3       	ldi	r30, 0x39	; 57
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a9 01       	movw	r20, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <MDIO_u8GetPinValue+0x6c>
    1fc6:	55 95       	asr	r21
    1fc8:	47 95       	ror	r20
    1fca:	8a 95       	dec	r24
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <MDIO_u8GetPinValue+0x68>
    1fce:	ca 01       	movw	r24, r20
    1fd0:	81 70       	andi	r24, 0x01	; 1
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    1fd4:	39 c0       	rjmp	.+114    	; 0x2048 <MDIO_u8GetPinValue+0xea>
			break;
		case DIO_PORTB_INDEX:
			L_u8PinVal = GET_BIT(PINB , A_u8PinNum );
    1fd6:	e6 e3       	ldi	r30, 0x36	; 54
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <MDIO_u8GetPinValue+0x90>
    1fea:	55 95       	asr	r21
    1fec:	47 95       	ror	r20
    1fee:	8a 95       	dec	r24
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <MDIO_u8GetPinValue+0x8c>
    1ff2:	ca 01       	movw	r24, r20
    1ff4:	81 70       	andi	r24, 0x01	; 1
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	27 c0       	rjmp	.+78     	; 0x2048 <MDIO_u8GetPinValue+0xea>
			break;
		case DIO_PORTC_INDEX:
			L_u8PinVal = GET_BIT(PINC , A_u8PinNum );
    1ffa:	e3 e3       	ldi	r30, 0x33	; 51
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a9 01       	movw	r20, r18
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <MDIO_u8GetPinValue+0xb4>
    200e:	55 95       	asr	r21
    2010:	47 95       	ror	r20
    2012:	8a 95       	dec	r24
    2014:	e2 f7       	brpl	.-8      	; 0x200e <MDIO_u8GetPinValue+0xb0>
    2016:	ca 01       	movw	r24, r20
    2018:	81 70       	andi	r24, 0x01	; 1
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	15 c0       	rjmp	.+42     	; 0x2048 <MDIO_u8GetPinValue+0xea>
			break;
		case DIO_PORTD_INDEX:
			L_u8PinVal = GET_BIT(PIND , A_u8PinNum );
    201e:	e0 e3       	ldi	r30, 0x30	; 48
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	88 2f       	mov	r24, r24
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a9 01       	movw	r20, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <MDIO_u8GetPinValue+0xd8>
    2032:	55 95       	asr	r21
    2034:	47 95       	ror	r20
    2036:	8a 95       	dec	r24
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <MDIO_u8GetPinValue+0xd4>
    203a:	ca 01       	movw	r24, r20
    203c:	81 70       	andi	r24, 0x01	; 1
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	03 c0       	rjmp	.+6      	; 0x2048 <MDIO_u8GetPinValue+0xea>
			break;
		default:
			return 0xFF;
    2042:	5f ef       	ldi	r21, 0xFF	; 255
    2044:	5c 83       	std	Y+4, r21	; 0x04
    2046:	02 c0       	rjmp	.+4      	; 0x204c <MDIO_u8GetPinValue+0xee>
	}

	return L_u8PinVal;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	8c 83       	std	Y+4, r24	; 0x04
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    204e:	26 96       	adiw	r28, 0x06	; 6
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <DIO_vTogglePin>:

void DIO_vTogglePin(u8 A_u8PortNum , u8 A_u8PinNum){
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <DIO_vTogglePin+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <DIO_vTogglePin+0x8>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum){
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3c 83       	std	Y+4, r19	; 0x04
    2078:	2b 83       	std	Y+3, r18	; 0x03
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	91 05       	cpc	r25, r1
    2082:	49 f1       	breq	.+82     	; 0x20d6 <DIO_vTogglePin+0x76>
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	2c f4       	brge	.+10     	; 0x2098 <DIO_vTogglePin+0x38>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	61 f0       	breq	.+24     	; 0x20ae <DIO_vTogglePin+0x4e>
    2096:	5a c0       	rjmp	.+180    	; 0x214c <DIO_vTogglePin+0xec>
    2098:	2b 81       	ldd	r18, Y+3	; 0x03
    209a:	3c 81       	ldd	r19, Y+4	; 0x04
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	71 f1       	breq	.+92     	; 0x20fe <DIO_vTogglePin+0x9e>
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	91 05       	cpc	r25, r1
    20aa:	e9 f1       	breq	.+122    	; 0x2126 <DIO_vTogglePin+0xc6>
    20ac:	4f c0       	rjmp	.+158    	; 0x214c <DIO_vTogglePin+0xec>
		case DIO_PORTA_INDEX:
			TOGGLE_BIT(PORTA , A_u8PinNum );
    20ae:	ab e3       	ldi	r26, 0x3B	; 59
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	eb e3       	ldi	r30, 0x3B	; 59
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	48 2f       	mov	r20, r24
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 2e       	mov	r0, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <DIO_vTogglePin+0x6c>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	0a 94       	dec	r0
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <DIO_vTogglePin+0x68>
    20d0:	84 27       	eor	r24, r20
    20d2:	8c 93       	st	X, r24
    20d4:	3b c0       	rjmp	.+118    	; 0x214c <DIO_vTogglePin+0xec>
			break;
		case DIO_PORTB_INDEX:
			TOGGLE_BIT(PORTB , A_u8PinNum );
    20d6:	a8 e3       	ldi	r26, 0x38	; 56
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e8 e3       	ldi	r30, 0x38	; 56
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 2e       	mov	r0, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <DIO_vTogglePin+0x94>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <DIO_vTogglePin+0x90>
    20f8:	84 27       	eor	r24, r20
    20fa:	8c 93       	st	X, r24
    20fc:	27 c0       	rjmp	.+78     	; 0x214c <DIO_vTogglePin+0xec>
			break;
		case DIO_PORTC_INDEX:
			TOGGLE_BIT(PORTC , A_u8PinNum );
    20fe:	a5 e3       	ldi	r26, 0x35	; 53
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e5 e3       	ldi	r30, 0x35	; 53
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	48 2f       	mov	r20, r24
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <DIO_vTogglePin+0xbc>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <DIO_vTogglePin+0xb8>
    2120:	84 27       	eor	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	13 c0       	rjmp	.+38     	; 0x214c <DIO_vTogglePin+0xec>
			break;
		case DIO_PORTD_INDEX:
			TOGGLE_BIT(PORTD , A_u8PinNum );
    2126:	a2 e3       	ldi	r26, 0x32	; 50
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e2 e3       	ldi	r30, 0x32	; 50
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 2e       	mov	r0, r18
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <DIO_vTogglePin+0xe4>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	0a 94       	dec	r0
    2146:	e2 f7       	brpl	.-8      	; 0x2140 <DIO_vTogglePin+0xe0>
    2148:	84 27       	eor	r24, r20
    214a:	8c 93       	st	X, r24
			break;

		default:break;
		}
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <MDIO_vSetPortDirection>:

/*PORT Functions*/
void MDIO_vSetPortDirection(u8 A_u8PortNum ,u8 A_u8PinDirection){
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	60 97       	sbiw	r28, 0x10	; 16
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum){
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	38 8b       	std	Y+16, r19	; 0x10
    217a:	2f 87       	std	Y+15, r18	; 0x0f
    217c:	8f 85       	ldd	r24, Y+15	; 0x0f
    217e:	98 89       	ldd	r25, Y+16	; 0x10
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	31 f1       	breq	.+76     	; 0x21d2 <MDIO_vSetPortDirection+0x78>
    2186:	ef 85       	ldd	r30, Y+15	; 0x0f
    2188:	f8 89       	ldd	r31, Y+16	; 0x10
    218a:	e2 30       	cpi	r30, 0x02	; 2
    218c:	f1 05       	cpc	r31, r1
    218e:	34 f4       	brge	.+12     	; 0x219c <MDIO_vSetPortDirection+0x42>
    2190:	2f 85       	ldd	r18, Y+15	; 0x0f
    2192:	38 89       	ldd	r19, Y+16	; 0x10
    2194:	21 15       	cp	r18, r1
    2196:	31 05       	cpc	r19, r1
    2198:	61 f0       	breq	.+24     	; 0x21b2 <MDIO_vSetPortDirection+0x58>
    219a:	4a c0       	rjmp	.+148    	; 0x2230 <MDIO_vSetPortDirection+0xd6>
    219c:	8f 85       	ldd	r24, Y+15	; 0x0f
    219e:	98 89       	ldd	r25, Y+16	; 0x10
    21a0:	82 30       	cpi	r24, 0x02	; 2
    21a2:	91 05       	cpc	r25, r1
    21a4:	31 f1       	breq	.+76     	; 0x21f2 <MDIO_vSetPortDirection+0x98>
    21a6:	ef 85       	ldd	r30, Y+15	; 0x0f
    21a8:	f8 89       	ldd	r31, Y+16	; 0x10
    21aa:	e3 30       	cpi	r30, 0x03	; 3
    21ac:	f1 05       	cpc	r31, r1
    21ae:	89 f1       	breq	.+98     	; 0x2212 <MDIO_vSetPortDirection+0xb8>
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <MDIO_vSetPortDirection+0xd6>
		case DIO_PORTA_INDEX:
			DDRA = A_u8PinDirection?0xff:0;
    21b2:	2a e3       	ldi	r18, 0x3A	; 58
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	3e 87       	std	Y+14, r19	; 0x0e
    21b8:	2d 87       	std	Y+13, r18	; 0x0d
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	88 23       	and	r24, r24
    21be:	19 f0       	breq	.+6      	; 0x21c6 <MDIO_vSetPortDirection+0x6c>
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	3c 87       	std	Y+12, r19	; 0x0c
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <MDIO_vSetPortDirection+0x6e>
    21c6:	1c 86       	std	Y+12, r1	; 0x0c
    21c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    21ca:	ed 85       	ldd	r30, Y+13	; 0x0d
    21cc:	fe 85       	ldd	r31, Y+14	; 0x0e
    21ce:	20 83       	st	Z, r18
    21d0:	2f c0       	rjmp	.+94     	; 0x2230 <MDIO_vSetPortDirection+0xd6>
			break;
		case DIO_PORTB_INDEX:
			DDRB = A_u8PinDirection?0xff:0;
    21d2:	87 e3       	ldi	r24, 0x37	; 55
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9b 87       	std	Y+11, r25	; 0x0b
    21d8:	8a 87       	std	Y+10, r24	; 0x0a
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	88 23       	and	r24, r24
    21de:	19 f0       	breq	.+6      	; 0x21e6 <MDIO_vSetPortDirection+0x8c>
    21e0:	9f ef       	ldi	r25, 0xFF	; 255
    21e2:	99 87       	std	Y+9, r25	; 0x09
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <MDIO_vSetPortDirection+0x8e>
    21e6:	19 86       	std	Y+9, r1	; 0x09
    21e8:	29 85       	ldd	r18, Y+9	; 0x09
    21ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    21ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    21ee:	20 83       	st	Z, r18
    21f0:	1f c0       	rjmp	.+62     	; 0x2230 <MDIO_vSetPortDirection+0xd6>
			break;
		case DIO_PORTC_INDEX:
			DDRC = A_u8PinDirection?0xff:0;
    21f2:	84 e3       	ldi	r24, 0x34	; 52
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	98 87       	std	Y+8, r25	; 0x08
    21f8:	8f 83       	std	Y+7, r24	; 0x07
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	88 23       	and	r24, r24
    21fe:	19 f0       	breq	.+6      	; 0x2206 <MDIO_vSetPortDirection+0xac>
    2200:	9f ef       	ldi	r25, 0xFF	; 255
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	01 c0       	rjmp	.+2      	; 0x2208 <MDIO_vSetPortDirection+0xae>
    2206:	1e 82       	std	Y+6, r1	; 0x06
    2208:	2e 81       	ldd	r18, Y+6	; 0x06
    220a:	ef 81       	ldd	r30, Y+7	; 0x07
    220c:	f8 85       	ldd	r31, Y+8	; 0x08
    220e:	20 83       	st	Z, r18
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <MDIO_vSetPortDirection+0xd6>
			break;
		case DIO_PORTD_INDEX:
			DDRD = A_u8PinDirection?0xff:0;
    2212:	81 e3       	ldi	r24, 0x31	; 49
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9d 83       	std	Y+5, r25	; 0x05
    2218:	8c 83       	std	Y+4, r24	; 0x04
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	88 23       	and	r24, r24
    221e:	19 f0       	breq	.+6      	; 0x2226 <MDIO_vSetPortDirection+0xcc>
    2220:	9f ef       	ldi	r25, 0xFF	; 255
    2222:	9b 83       	std	Y+3, r25	; 0x03
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <MDIO_vSetPortDirection+0xce>
    2226:	1b 82       	std	Y+3, r1	; 0x03
    2228:	2b 81       	ldd	r18, Y+3	; 0x03
    222a:	ec 81       	ldd	r30, Y+4	; 0x04
    222c:	fd 81       	ldd	r31, Y+5	; 0x05
    222e:	20 83       	st	Z, r18
			break;
		default:break;
	}
}
    2230:	60 96       	adiw	r28, 0x10	; 16
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <MDIO_vSetPortValue>:


void MDIO_vSetPortValue(u8 A_u8PortNum , u8 A_u8PinVal){
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <MDIO_vSetPortValue+0x6>
    2248:	00 d0       	rcall	.+0      	; 0x224a <MDIO_vSetPortValue+0x8>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum){
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3c 83       	std	Y+4, r19	; 0x04
    225a:	2b 83       	std	Y+3, r18	; 0x03
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	d1 f0       	breq	.+52     	; 0x229a <MDIO_vSetPortValue+0x58>
    2266:	2b 81       	ldd	r18, Y+3	; 0x03
    2268:	3c 81       	ldd	r19, Y+4	; 0x04
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	2c f4       	brge	.+10     	; 0x227a <MDIO_vSetPortValue+0x38>
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	61 f0       	breq	.+24     	; 0x2290 <MDIO_vSetPortValue+0x4e>
    2278:	1e c0       	rjmp	.+60     	; 0x22b6 <MDIO_vSetPortValue+0x74>
    227a:	2b 81       	ldd	r18, Y+3	; 0x03
    227c:	3c 81       	ldd	r19, Y+4	; 0x04
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	31 05       	cpc	r19, r1
    2282:	81 f0       	breq	.+32     	; 0x22a4 <MDIO_vSetPortValue+0x62>
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	83 30       	cpi	r24, 0x03	; 3
    228a:	91 05       	cpc	r25, r1
    228c:	81 f0       	breq	.+32     	; 0x22ae <MDIO_vSetPortValue+0x6c>
    228e:	13 c0       	rjmp	.+38     	; 0x22b6 <MDIO_vSetPortValue+0x74>
		case DIO_PORTA_INDEX:
			PORTA = A_u8PinVal;
    2290:	eb e3       	ldi	r30, 0x3B	; 59
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	80 83       	st	Z, r24
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <MDIO_vSetPortValue+0x74>
			break;
		case DIO_PORTB_INDEX:
			PORTB = A_u8PinVal;
    229a:	e8 e3       	ldi	r30, 0x38	; 56
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	80 83       	st	Z, r24
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <MDIO_vSetPortValue+0x74>
			break;
		case DIO_PORTC_INDEX:
			PORTC = A_u8PinVal;
    22a4:	e5 e3       	ldi	r30, 0x35	; 53
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	80 83       	st	Z, r24
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <MDIO_vSetPortValue+0x74>
			break;
		case DIO_PORTD_INDEX:
			PORTD = A_u8PinVal;
    22ae:	e2 e3       	ldi	r30, 0x32	; 50
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	80 83       	st	Z, r24
			break;

		default:break;
	}
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <MDIO_u8GetPortValue>:


u8  MDIO_u8GetPortValue(u8 A_u8PortNum ){
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <MDIO_u8GetPortValue+0x6>
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <MDIO_u8GetPortValue+0x8>
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortValue = 0;
    22d2:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortNum){
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	3c 83       	std	Y+4, r19	; 0x04
    22dc:	2b 83       	std	Y+3, r18	; 0x03
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	81 30       	cpi	r24, 0x01	; 1
    22e4:	91 05       	cpc	r25, r1
    22e6:	d1 f0       	breq	.+52     	; 0x231c <MDIO_u8GetPortValue+0x58>
    22e8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ea:	3c 81       	ldd	r19, Y+4	; 0x04
    22ec:	22 30       	cpi	r18, 0x02	; 2
    22ee:	31 05       	cpc	r19, r1
    22f0:	2c f4       	brge	.+10     	; 0x22fc <MDIO_u8GetPortValue+0x38>
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	61 f0       	breq	.+24     	; 0x2312 <MDIO_u8GetPortValue+0x4e>
    22fa:	1e c0       	rjmp	.+60     	; 0x2338 <MDIO_u8GetPortValue+0x74>
    22fc:	2b 81       	ldd	r18, Y+3	; 0x03
    22fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2300:	22 30       	cpi	r18, 0x02	; 2
    2302:	31 05       	cpc	r19, r1
    2304:	81 f0       	breq	.+32     	; 0x2326 <MDIO_u8GetPortValue+0x62>
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	83 30       	cpi	r24, 0x03	; 3
    230c:	91 05       	cpc	r25, r1
    230e:	81 f0       	breq	.+32     	; 0x2330 <MDIO_u8GetPortValue+0x6c>
    2310:	13 c0       	rjmp	.+38     	; 0x2338 <MDIO_u8GetPortValue+0x74>
		case DIO_PORTA_INDEX:
			L_u8PortValue =  PINA;
    2312:	e9 e3       	ldi	r30, 0x39	; 57
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	0e c0       	rjmp	.+28     	; 0x2338 <MDIO_u8GetPortValue+0x74>
			break;
		case DIO_PORTB_INDEX:
			L_u8PortValue =  PINB;
    231c:	e6 e3       	ldi	r30, 0x36	; 54
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <MDIO_u8GetPortValue+0x74>
			break;
		case DIO_PORTC_INDEX:
			L_u8PortValue =  PINC;
    2326:	e3 e3       	ldi	r30, 0x33	; 51
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <MDIO_u8GetPortValue+0x74>
			break;
		case DIO_PORTD_INDEX:
			L_u8PortValue =  PIND;
    2330:	e0 e3       	ldi	r30, 0x30	; 48
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:break;
	}

	return L_u8PortValue;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <MADC_vInit>:
 */

#include "ADC_int.h"


void MADC_vInit(void){
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= (1 << ADMUX_REFS0);
    2350:	a7 e2       	ldi	r26, 0x27	; 39
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e7 e2       	ldi	r30, 0x27	; 39
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	80 64       	ori	r24, 0x40	; 64
    235c:	8c 93       	st	X, r24
	ADMUX &= ~(1 << ADMUX_REFS1);
    235e:	a7 e2       	ldi	r26, 0x27	; 39
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e7 e2       	ldi	r30, 0x27	; 39
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	8f 77       	andi	r24, 0x7F	; 127
    236a:	8c 93       	st	X, r24


	CLEAR_BIT(ADMUX , ADMUX_ADLAR);
    236c:	a7 e2       	ldi	r26, 0x27	; 39
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e7 e2       	ldi	r30, 0x27	; 39
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	8f 7d       	andi	r24, 0xDF	; 223
    2378:	8c 93       	st	X, r24

//	ADCSRA =(ADCSRA &(0xF8))  | ((0x07)&(0x06)) ;
	CLEAR_BIT(ADCSRA , ADCSRA_ADPS0);
    237a:	a6 e2       	ldi	r26, 0x26	; 38
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e6 e2       	ldi	r30, 0x26	; 38
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	8e 7f       	andi	r24, 0xFE	; 254
    2386:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1 );
    2388:	a6 e2       	ldi	r26, 0x26	; 38
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e6 e2       	ldi	r30, 0x26	; 38
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	82 60       	ori	r24, 0x02	; 2
    2394:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS2 );
    2396:	a6 e2       	ldi	r26, 0x26	; 38
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e6 e2       	ldi	r30, 0x26	; 38
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	84 60       	ori	r24, 0x04	; 4
    23a2:	8c 93       	st	X, r24

	CLEAR_BIT(ADCSRA , ADCSRA_ADATE);
    23a4:	a6 e2       	ldi	r26, 0x26	; 38
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e6 e2       	ldi	r30, 0x26	; 38
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	8f 7d       	andi	r24, 0xDF	; 223
    23b0:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA , ADCSRA_ADIE);
    23b2:	a6 e2       	ldi	r26, 0x26	; 38
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e6 e2       	ldi	r30, 0x26	; 38
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	87 7f       	andi	r24, 0xF7	; 247
    23be:	8c 93       	st	X, r24

	SET_BIT(ADCSRA , ADCSRA_ADEN);
    23c0:	a6 e2       	ldi	r26, 0x26	; 38
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e6 e2       	ldi	r30, 0x26	; 38
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	80 68       	ori	r24, 0x80	; 128
    23cc:	8c 93       	st	X, r24
}
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <MADC_u16AdcRead>:


u16 MADC_u16AdcRead(u8 A_u8Channel)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	0f 92       	push	r0
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	89 83       	std	Y+1, r24	; 0x01

    ADMUX = (ADMUX & 0xE0) | (A_u8Channel & 0x0F);
    23e0:	a7 e2       	ldi	r26, 0x27	; 39
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e7 e2       	ldi	r30, 0x27	; 39
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	98 2f       	mov	r25, r24
    23ec:	90 7e       	andi	r25, 0xE0	; 224
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	8f 70       	andi	r24, 0x0F	; 15
    23f2:	89 2b       	or	r24, r25
    23f4:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    23f6:	a6 e2       	ldi	r26, 0x26	; 38
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e6 e2       	ldi	r30, 0x26	; 38
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	80 64       	ori	r24, 0x40	; 64
    2402:	8c 93       	st	X, r24

    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    2404:	e6 e2       	ldi	r30, 0x26	; 38
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	82 95       	swap	r24
    240c:	8f 70       	andi	r24, 0x0F	; 15
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	81 70       	andi	r24, 0x01	; 1
    2414:	90 70       	andi	r25, 0x00	; 0
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	a9 f3       	breq	.-22     	; 0x2404 <MADC_u16AdcRead+0x30>


    SET_BIT(ADCSRA, ADCSRA_ADIF);
    241a:	a6 e2       	ldi	r26, 0x26	; 38
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e6 e2       	ldi	r30, 0x26	; 38
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	80 61       	ori	r24, 0x10	; 16
    2426:	8c 93       	st	X, r24


    return ADC;
    2428:	e4 e2       	ldi	r30, 0x24	; 36
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <HSTEPPER_vInit>:




#if !proteus_test
void HSTEPPER_vInit(){
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDirection(STEPPER_CONTROL_PORT, B, DIO_PIN_DIRECTION_OUTPUT);
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	41 e0       	ldi	r20, 0x01	; 1
    2446:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(STEPPER_CONTROL_PORT, P, DIO_PIN_DIRECTION_OUTPUT);
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(STEPPER_CONTROL_PORT, Y, DIO_PIN_DIRECTION_OUTPUT);
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	62 e0       	ldi	r22, 0x02	; 2
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(STEPPER_CONTROL_PORT, O, DIO_PIN_DIRECTION_OUTPUT);
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	63 e0       	ldi	r22, 0x03	; 3
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
}
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <HSTEPPER_vMove>:

void HSTEPPER_vMove(){
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	e8 97       	sbiw	r28, 0x38	; 56
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_HIGH);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_LOW);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	61 e0       	ldi	r22, 0x01	; 1
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_LOW);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	62 e0       	ldi	r22, 0x02	; 2
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_LOW);
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	63 e0       	ldi	r22, 0x03	; 3
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b1 e4       	ldi	r27, 0x41	; 65
    24b2:	8d ab       	std	Y+53, r24	; 0x35
    24b4:	9e ab       	std	Y+54, r25	; 0x36
    24b6:	af ab       	std	Y+55, r26	; 0x37
    24b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	6d a9       	ldd	r22, Y+53	; 0x35
    24bc:	7e a9       	ldd	r23, Y+54	; 0x36
    24be:	8f a9       	ldd	r24, Y+55	; 0x37
    24c0:	98 ad       	ldd	r25, Y+56	; 0x38
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a ef       	ldi	r20, 0xFA	; 250
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	89 ab       	std	Y+49, r24	; 0x31
    24d4:	9a ab       	std	Y+50, r25	; 0x32
    24d6:	ab ab       	std	Y+51, r26	; 0x33
    24d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24da:	69 a9       	ldd	r22, Y+49	; 0x31
    24dc:	7a a9       	ldd	r23, Y+50	; 0x32
    24de:	8b a9       	ldd	r24, Y+51	; 0x33
    24e0:	9c a9       	ldd	r25, Y+52	; 0x34
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <HSTEPPER_vMove+0x8e>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	98 ab       	std	Y+48, r25	; 0x30
    24f8:	8f a7       	std	Y+47, r24	; 0x2f
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <HSTEPPER_vMove+0x10c>
	else if (__tmp > 65535)
    24fc:	69 a9       	ldd	r22, Y+49	; 0x31
    24fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2500:	8b a9       	ldd	r24, Y+51	; 0x33
    2502:	9c a9       	ldd	r25, Y+52	; 0x34
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <HSTEPPER_vMove+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	6d a9       	ldd	r22, Y+53	; 0x35
    2516:	7e a9       	ldd	r23, Y+54	; 0x36
    2518:	8f a9       	ldd	r24, Y+55	; 0x37
    251a:	98 ad       	ldd	r25, Y+56	; 0x38
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	98 ab       	std	Y+48, r25	; 0x30
    253a:	8f a7       	std	Y+47, r24	; 0x2f
    253c:	0f c0       	rjmp	.+30     	; 0x255c <HSTEPPER_vMove+0xee>
    253e:	88 ec       	ldi	r24, 0xC8	; 200
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9e a7       	std	Y+46, r25	; 0x2e
    2544:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2546:	8d a5       	ldd	r24, Y+45	; 0x2d
    2548:	9e a5       	ldd	r25, Y+46	; 0x2e
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <HSTEPPER_vMove+0xdc>
    254e:	9e a7       	std	Y+46, r25	; 0x2e
    2550:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8f a5       	ldd	r24, Y+47	; 0x2f
    2554:	98 a9       	ldd	r25, Y+48	; 0x30
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	98 ab       	std	Y+48, r25	; 0x30
    255a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8f a5       	ldd	r24, Y+47	; 0x2f
    255e:	98 a9       	ldd	r25, Y+48	; 0x30
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <HSTEPPER_vMove+0xd0>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <HSTEPPER_vMove+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	69 a9       	ldd	r22, Y+49	; 0x31
    2568:	7a a9       	ldd	r23, Y+50	; 0x32
    256a:	8b a9       	ldd	r24, Y+51	; 0x33
    256c:	9c a9       	ldd	r25, Y+52	; 0x34
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	98 ab       	std	Y+48, r25	; 0x30
    2578:	8f a7       	std	Y+47, r24	; 0x2f
    257a:	8f a5       	ldd	r24, Y+47	; 0x2f
    257c:	98 a9       	ldd	r25, Y+48	; 0x30
    257e:	9c a7       	std	Y+44, r25	; 0x2c
    2580:	8b a7       	std	Y+43, r24	; 0x2b
    2582:	8b a5       	ldd	r24, Y+43	; 0x2b
    2584:	9c a5       	ldd	r25, Y+44	; 0x2c
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <HSTEPPER_vMove+0x118>
    258a:	9c a7       	std	Y+44, r25	; 0x2c
    258c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_LOW);
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_HIGH);
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	61 e0       	ldi	r22, 0x01	; 1
    259c:	41 e0       	ldi	r20, 0x01	; 1
    259e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_LOW);
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	62 e0       	ldi	r22, 0x02	; 2
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_LOW);
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	63 e0       	ldi	r22, 0x03	; 3
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a0 e2       	ldi	r26, 0x20	; 32
    25bc:	b1 e4       	ldi	r27, 0x41	; 65
    25be:	8f a3       	std	Y+39, r24	; 0x27
    25c0:	98 a7       	std	Y+40, r25	; 0x28
    25c2:	a9 a7       	std	Y+41, r26	; 0x29
    25c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	6f a1       	ldd	r22, Y+39	; 0x27
    25c8:	78 a5       	ldd	r23, Y+40	; 0x28
    25ca:	89 a5       	ldd	r24, Y+41	; 0x29
    25cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a ef       	ldi	r20, 0xFA	; 250
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	8b a3       	std	Y+35, r24	; 0x23
    25e0:	9c a3       	std	Y+36, r25	; 0x24
    25e2:	ad a3       	std	Y+37, r26	; 0x25
    25e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e6:	6b a1       	ldd	r22, Y+35	; 0x23
    25e8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ea:	8d a1       	ldd	r24, Y+37	; 0x25
    25ec:	9e a1       	ldd	r25, Y+38	; 0x26
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <HSTEPPER_vMove+0x19a>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9a a3       	std	Y+34, r25	; 0x22
    2604:	89 a3       	std	Y+33, r24	; 0x21
    2606:	3f c0       	rjmp	.+126    	; 0x2686 <HSTEPPER_vMove+0x218>
	else if (__tmp > 65535)
    2608:	6b a1       	ldd	r22, Y+35	; 0x23
    260a:	7c a1       	ldd	r23, Y+36	; 0x24
    260c:	8d a1       	ldd	r24, Y+37	; 0x25
    260e:	9e a1       	ldd	r25, Y+38	; 0x26
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	4c f5       	brge	.+82     	; 0x2672 <HSTEPPER_vMove+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	6f a1       	ldd	r22, Y+39	; 0x27
    2622:	78 a5       	ldd	r23, Y+40	; 0x28
    2624:	89 a5       	ldd	r24, Y+41	; 0x29
    2626:	9a a5       	ldd	r25, Y+42	; 0x2a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9a a3       	std	Y+34, r25	; 0x22
    2646:	89 a3       	std	Y+33, r24	; 0x21
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <HSTEPPER_vMove+0x1fa>
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	98 a3       	std	Y+32, r25	; 0x20
    2650:	8f 8f       	std	Y+31, r24	; 0x1f
    2652:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2654:	98 a1       	ldd	r25, Y+32	; 0x20
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <HSTEPPER_vMove+0x1e8>
    265a:	98 a3       	std	Y+32, r25	; 0x20
    265c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	89 a1       	ldd	r24, Y+33	; 0x21
    2660:	9a a1       	ldd	r25, Y+34	; 0x22
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9a a3       	std	Y+34, r25	; 0x22
    2666:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	89 a1       	ldd	r24, Y+33	; 0x21
    266a:	9a a1       	ldd	r25, Y+34	; 0x22
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <HSTEPPER_vMove+0x1dc>
    2670:	14 c0       	rjmp	.+40     	; 0x269a <HSTEPPER_vMove+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	6b a1       	ldd	r22, Y+35	; 0x23
    2674:	7c a1       	ldd	r23, Y+36	; 0x24
    2676:	8d a1       	ldd	r24, Y+37	; 0x25
    2678:	9e a1       	ldd	r25, Y+38	; 0x26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9a a3       	std	Y+34, r25	; 0x22
    2684:	89 a3       	std	Y+33, r24	; 0x21
    2686:	89 a1       	ldd	r24, Y+33	; 0x21
    2688:	9a a1       	ldd	r25, Y+34	; 0x22
    268a:	9e 8f       	std	Y+30, r25	; 0x1e
    268c:	8d 8f       	std	Y+29, r24	; 0x1d
    268e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2690:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <HSTEPPER_vMove+0x224>
    2696:	9e 8f       	std	Y+30, r25	; 0x1e
    2698:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_LOW);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_LOW);
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	61 e0       	ldi	r22, 0x01	; 1
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_HIGH);
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	62 e0       	ldi	r22, 0x02	; 2
    26b2:	41 e0       	ldi	r20, 0x01	; 1
    26b4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_LOW);
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	63 e0       	ldi	r22, 0x03	; 3
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e2       	ldi	r26, 0x20	; 32
    26c8:	b1 e4       	ldi	r27, 0x41	; 65
    26ca:	89 8f       	std	Y+25, r24	; 0x19
    26cc:	9a 8f       	std	Y+26, r25	; 0x1a
    26ce:	ab 8f       	std	Y+27, r26	; 0x1b
    26d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d2:	69 8d       	ldd	r22, Y+25	; 0x19
    26d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4a ef       	ldi	r20, 0xFA	; 250
    26e0:	54 e4       	ldi	r21, 0x44	; 68
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8d 8b       	std	Y+21, r24	; 0x15
    26ec:	9e 8b       	std	Y+22, r25	; 0x16
    26ee:	af 8b       	std	Y+23, r26	; 0x17
    26f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f2:	6d 89       	ldd	r22, Y+21	; 0x15
    26f4:	7e 89       	ldd	r23, Y+22	; 0x16
    26f6:	8f 89       	ldd	r24, Y+23	; 0x17
    26f8:	98 8d       	ldd	r25, Y+24	; 0x18
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <HSTEPPER_vMove+0x2a6>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9c 8b       	std	Y+20, r25	; 0x14
    2710:	8b 8b       	std	Y+19, r24	; 0x13
    2712:	3f c0       	rjmp	.+126    	; 0x2792 <HSTEPPER_vMove+0x324>
	else if (__tmp > 65535)
    2714:	6d 89       	ldd	r22, Y+21	; 0x15
    2716:	7e 89       	ldd	r23, Y+22	; 0x16
    2718:	8f 89       	ldd	r24, Y+23	; 0x17
    271a:	98 8d       	ldd	r25, Y+24	; 0x18
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	3f ef       	ldi	r19, 0xFF	; 255
    2720:	4f e7       	ldi	r20, 0x7F	; 127
    2722:	57 e4       	ldi	r21, 0x47	; 71
    2724:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2728:	18 16       	cp	r1, r24
    272a:	4c f5       	brge	.+82     	; 0x277e <HSTEPPER_vMove+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	69 8d       	ldd	r22, Y+25	; 0x19
    272e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2730:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2732:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	51 e4       	ldi	r21, 0x41	; 65
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9c 8b       	std	Y+20, r25	; 0x14
    2752:	8b 8b       	std	Y+19, r24	; 0x13
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <HSTEPPER_vMove+0x306>
    2756:	88 ec       	ldi	r24, 0xC8	; 200
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9a 8b       	std	Y+18, r25	; 0x12
    275c:	89 8b       	std	Y+17, r24	; 0x11
    275e:	89 89       	ldd	r24, Y+17	; 0x11
    2760:	9a 89       	ldd	r25, Y+18	; 0x12
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <HSTEPPER_vMove+0x2f4>
    2766:	9a 8b       	std	Y+18, r25	; 0x12
    2768:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	8b 89       	ldd	r24, Y+19	; 0x13
    276c:	9c 89       	ldd	r25, Y+20	; 0x14
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	9c 89       	ldd	r25, Y+20	; 0x14
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	69 f7       	brne	.-38     	; 0x2756 <HSTEPPER_vMove+0x2e8>
    277c:	14 c0       	rjmp	.+40     	; 0x27a6 <HSTEPPER_vMove+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277e:	6d 89       	ldd	r22, Y+21	; 0x15
    2780:	7e 89       	ldd	r23, Y+22	; 0x16
    2782:	8f 89       	ldd	r24, Y+23	; 0x17
    2784:	98 8d       	ldd	r25, Y+24	; 0x18
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9c 8b       	std	Y+20, r25	; 0x14
    2790:	8b 8b       	std	Y+19, r24	; 0x13
    2792:	8b 89       	ldd	r24, Y+19	; 0x13
    2794:	9c 89       	ldd	r25, Y+20	; 0x14
    2796:	98 8b       	std	Y+16, r25	; 0x10
    2798:	8f 87       	std	Y+15, r24	; 0x0f
    279a:	8f 85       	ldd	r24, Y+15	; 0x0f
    279c:	98 89       	ldd	r25, Y+16	; 0x10
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <HSTEPPER_vMove+0x330>
    27a2:	98 8b       	std	Y+16, r25	; 0x10
    27a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_LOW);
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_LOW);
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	61 e0       	ldi	r22, 0x01	; 1
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_LOW);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	62 e0       	ldi	r22, 0x02	; 2
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_HIGH);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	63 e0       	ldi	r22, 0x03	; 3
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	a0 e2       	ldi	r26, 0x20	; 32
    27d4:	b1 e4       	ldi	r27, 0x41	; 65
    27d6:	8b 87       	std	Y+11, r24	; 0x0b
    27d8:	9c 87       	std	Y+12, r25	; 0x0c
    27da:	ad 87       	std	Y+13, r26	; 0x0d
    27dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27de:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	4a ef       	ldi	r20, 0xFA	; 250
    27ec:	54 e4       	ldi	r21, 0x44	; 68
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	8f 83       	std	Y+7, r24	; 0x07
    27f8:	98 87       	std	Y+8, r25	; 0x08
    27fa:	a9 87       	std	Y+9, r26	; 0x09
    27fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2800:	78 85       	ldd	r23, Y+8	; 0x08
    2802:	89 85       	ldd	r24, Y+9	; 0x09
    2804:	9a 85       	ldd	r25, Y+10	; 0x0a
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e8       	ldi	r20, 0x80	; 128
    280c:	5f e3       	ldi	r21, 0x3F	; 63
    280e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2812:	88 23       	and	r24, r24
    2814:	2c f4       	brge	.+10     	; 0x2820 <HSTEPPER_vMove+0x3b2>
		__ticks = 1;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
    281e:	3f c0       	rjmp	.+126    	; 0x289e <HSTEPPER_vMove+0x430>
	else if (__tmp > 65535)
    2820:	6f 81       	ldd	r22, Y+7	; 0x07
    2822:	78 85       	ldd	r23, Y+8	; 0x08
    2824:	89 85       	ldd	r24, Y+9	; 0x09
    2826:	9a 85       	ldd	r25, Y+10	; 0x0a
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	3f ef       	ldi	r19, 0xFF	; 255
    282c:	4f e7       	ldi	r20, 0x7F	; 127
    282e:	57 e4       	ldi	r21, 0x47	; 71
    2830:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2834:	18 16       	cp	r1, r24
    2836:	4c f5       	brge	.+82     	; 0x288a <HSTEPPER_vMove+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2838:	6b 85       	ldd	r22, Y+11	; 0x0b
    283a:	7c 85       	ldd	r23, Y+12	; 0x0c
    283c:	8d 85       	ldd	r24, Y+13	; 0x0d
    283e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e2       	ldi	r20, 0x20	; 32
    2846:	51 e4       	ldi	r21, 0x41	; 65
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	0f c0       	rjmp	.+30     	; 0x2880 <HSTEPPER_vMove+0x412>
    2862:	88 ec       	ldi	r24, 0xC8	; 200
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9c 83       	std	Y+4, r25	; 0x04
    2868:	8b 83       	std	Y+3, r24	; 0x03
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	9c 81       	ldd	r25, Y+4	; 0x04
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <HSTEPPER_vMove+0x400>
    2872:	9c 83       	std	Y+4, r25	; 0x04
    2874:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	9e 83       	std	Y+6, r25	; 0x06
    287e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2880:	8d 81       	ldd	r24, Y+5	; 0x05
    2882:	9e 81       	ldd	r25, Y+6	; 0x06
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	69 f7       	brne	.-38     	; 0x2862 <HSTEPPER_vMove+0x3f4>
    2888:	14 c0       	rjmp	.+40     	; 0x28b2 <HSTEPPER_vMove+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288a:	6f 81       	ldd	r22, Y+7	; 0x07
    288c:	78 85       	ldd	r23, Y+8	; 0x08
    288e:	89 85       	ldd	r24, Y+9	; 0x09
    2890:	9a 85       	ldd	r25, Y+10	; 0x0a
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	9e 81       	ldd	r25, Y+6	; 0x06
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	9a 81       	ldd	r25, Y+2	; 0x02
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <HSTEPPER_vMove+0x43c>
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    28b2:	e8 96       	adiw	r28, 0x38	; 56
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <HSTEPPER_vMoveSpecificAngle>:


void HSTEPPER_vMoveSpecificAngle(u16 A_u8Angle ,  u8 direction){
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	c7 57       	subi	r28, 0x77	; 119
    28d2:	d0 40       	sbci	r29, 0x00	; 0
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	fe 01       	movw	r30, r28
    28e0:	eb 58       	subi	r30, 0x8B	; 139
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	fe 01       	movw	r30, r28
    28ea:	e9 58       	subi	r30, 0x89	; 137
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	60 83       	st	Z, r22

    u16 Local_u16Steps = (u16)(A_u8Angle / STEPPER_STRIDE_ANGLE);
    28f0:	fe 01       	movw	r30, r28
    28f2:	eb 58       	subi	r30, 0x8B	; 139
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 81       	ld	r24, Z
    28f8:	91 81       	ldd	r25, Z+1	; 0x01
    28fa:	cc 01       	movw	r24, r24
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	26 e6       	ldi	r18, 0x66	; 102
    2912:	36 e6       	ldi	r19, 0x66	; 102
    2914:	46 ee       	ldi	r20, 0xE6	; 230
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8e 01       	movw	r16, r28
    2922:	0d 58       	subi	r16, 0x8D	; 141
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	f8 01       	movw	r30, r16
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24

    for(int i = 0 ; i < (Local_u16Steps / 4) ; i++) {
    2938:	fe 01       	movw	r30, r28
    293a:	ef 58       	subi	r30, 0x8F	; 143
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	11 82       	std	Z+1, r1	; 0x01
    2940:	10 82       	st	Z, r1
    2942:	ef c4       	rjmp	.+2526   	; 0x3322 <HSTEPPER_vMoveSpecificAngle+0xa5e>
        if (direction == STEPPER_DIR_CW) {
    2944:	fe 01       	movw	r30, r28
    2946:	e9 58       	subi	r30, 0x89	; 137
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	88 23       	and	r24, r24
    294e:	09 f0       	breq	.+2      	; 0x2952 <HSTEPPER_vMoveSpecificAngle+0x8e>
    2950:	d6 c2       	rjmp	.+1452   	; 0x2efe <HSTEPPER_vMoveSpecificAngle+0x63a>
            // Clockwise: B → P → Y → O
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_HIGH);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	60 e0       	ldi	r22, 0x00	; 0
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_LOW);
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_LOW);
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	62 e0       	ldi	r22, 0x02	; 2
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_LOW);
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	63 e0       	ldi	r22, 0x03	; 3
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    297a:	fe 01       	movw	r30, r28
    297c:	e3 59       	subi	r30, 0x93	; 147
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	a0 e2       	ldi	r26, 0x20	; 32
    2986:	b1 e4       	ldi	r27, 0x41	; 65
    2988:	80 83       	st	Z, r24
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	a2 83       	std	Z+2, r26	; 0x02
    298e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2990:	8e 01       	movw	r16, r28
    2992:	07 59       	subi	r16, 0x97	; 151
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	fe 01       	movw	r30, r28
    2998:	e3 59       	subi	r30, 0x93	; 147
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a ef       	ldi	r20, 0xFA	; 250
    29aa:	54 e4       	ldi	r21, 0x44	; 68
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	f8 01       	movw	r30, r16
    29b6:	80 83       	st	Z, r24
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	a2 83       	std	Z+2, r26	; 0x02
    29bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29be:	fe 01       	movw	r30, r28
    29c0:	e7 59       	subi	r30, 0x97	; 151
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	60 81       	ld	r22, Z
    29c6:	71 81       	ldd	r23, Z+1	; 0x01
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	93 81       	ldd	r25, Z+3	; 0x03
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	44 f4       	brge	.+16     	; 0x29ec <HSTEPPER_vMoveSpecificAngle+0x128>
		__ticks = 1;
    29dc:	fe 01       	movw	r30, r28
    29de:	e9 59       	subi	r30, 0x99	; 153
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	64 c0       	rjmp	.+200    	; 0x2ab4 <HSTEPPER_vMoveSpecificAngle+0x1f0>
	else if (__tmp > 65535)
    29ec:	fe 01       	movw	r30, r28
    29ee:	e7 59       	subi	r30, 0x97	; 151
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	3f ef       	ldi	r19, 0xFF	; 255
    29fe:	4f e7       	ldi	r20, 0x7F	; 127
    2a00:	57 e4       	ldi	r21, 0x47	; 71
    2a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a06:	18 16       	cp	r1, r24
    2a08:	0c f0       	brlt	.+2      	; 0x2a0c <HSTEPPER_vMoveSpecificAngle+0x148>
    2a0a:	43 c0       	rjmp	.+134    	; 0x2a92 <HSTEPPER_vMoveSpecificAngle+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e3 59       	subi	r30, 0x93	; 147
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	60 81       	ld	r22, Z
    2a14:	71 81       	ldd	r23, Z+1	; 0x01
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e2       	ldi	r20, 0x20	; 32
    2a20:	51 e4       	ldi	r21, 0x41	; 65
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	09 59       	subi	r16, 0x99	; 153
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
    2a42:	1f c0       	rjmp	.+62     	; 0x2a82 <HSTEPPER_vMoveSpecificAngle+0x1be>
    2a44:	fe 01       	movw	r30, r28
    2a46:	eb 59       	subi	r30, 0x9B	; 155
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	88 ec       	ldi	r24, 0xC8	; 200
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	fe 01       	movw	r30, r28
    2a54:	eb 59       	subi	r30, 0x9B	; 155
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <HSTEPPER_vMoveSpecificAngle+0x198>
    2a60:	fe 01       	movw	r30, r28
    2a62:	eb 59       	subi	r30, 0x9B	; 155
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	de 01       	movw	r26, r28
    2a6c:	a9 59       	subi	r26, 0x99	; 153
    2a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	e9 59       	subi	r30, 0x99	; 153
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	11 96       	adiw	r26, 0x01	; 1
    2a7e:	9c 93       	st	X, r25
    2a80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a82:	fe 01       	movw	r30, r28
    2a84:	e9 59       	subi	r30, 0x99	; 153
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	d1 f6       	brne	.-76     	; 0x2a44 <HSTEPPER_vMoveSpecificAngle+0x180>
    2a90:	27 c0       	rjmp	.+78     	; 0x2ae0 <HSTEPPER_vMoveSpecificAngle+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a92:	8e 01       	movw	r16, r28
    2a94:	09 59       	subi	r16, 0x99	; 153
    2a96:	1f 4f       	sbci	r17, 0xFF	; 255
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e7 59       	subi	r30, 0x97	; 151
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	60 81       	ld	r22, Z
    2aa0:	71 81       	ldd	r23, Z+1	; 0x01
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	93 81       	ldd	r25, Z+3	; 0x03
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	f8 01       	movw	r30, r16
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
    2ab4:	de 01       	movw	r26, r28
    2ab6:	ad 59       	subi	r26, 0x9D	; 157
    2ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aba:	fe 01       	movw	r30, r28
    2abc:	e9 59       	subi	r30, 0x99	; 153
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	8d 93       	st	X+, r24
    2ac6:	9c 93       	st	X, r25
    2ac8:	fe 01       	movw	r30, r28
    2aca:	ed 59       	subi	r30, 0x9D	; 157
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <HSTEPPER_vMoveSpecificAngle+0x20e>
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	ed 59       	subi	r30, 0x9D	; 157
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	80 83       	st	Z, r24
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_LOW);
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_HIGH);
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	41 e0       	ldi	r20, 0x01	; 1
    2af0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    2af4:	fe 01       	movw	r30, r28
    2af6:	e1 5a       	subi	r30, 0xA1	; 161
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e2       	ldi	r26, 0x20	; 32
    2b00:	b1 e4       	ldi	r27, 0x41	; 65
    2b02:	80 83       	st	Z, r24
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	a2 83       	std	Z+2, r26	; 0x02
    2b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	05 5a       	subi	r16, 0xA5	; 165
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	e1 5a       	subi	r30, 0xA1	; 161
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a ef       	ldi	r20, 0xFA	; 250
    2b24:	54 e4       	ldi	r21, 0x44	; 68
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	f8 01       	movw	r30, r16
    2b30:	80 83       	st	Z, r24
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	a2 83       	std	Z+2, r26	; 0x02
    2b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e5 5a       	subi	r30, 0xA5	; 165
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	60 81       	ld	r22, Z
    2b40:	71 81       	ldd	r23, Z+1	; 0x01
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	44 f4       	brge	.+16     	; 0x2b66 <HSTEPPER_vMoveSpecificAngle+0x2a2>
		__ticks = 1;
    2b56:	fe 01       	movw	r30, r28
    2b58:	e7 5a       	subi	r30, 0xA7	; 167
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24
    2b64:	64 c0       	rjmp	.+200    	; 0x2c2e <HSTEPPER_vMoveSpecificAngle+0x36a>
	else if (__tmp > 65535)
    2b66:	fe 01       	movw	r30, r28
    2b68:	e5 5a       	subi	r30, 0xA5	; 165
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	4f e7       	ldi	r20, 0x7F	; 127
    2b7a:	57 e4       	ldi	r21, 0x47	; 71
    2b7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b80:	18 16       	cp	r1, r24
    2b82:	0c f0       	brlt	.+2      	; 0x2b86 <HSTEPPER_vMoveSpecificAngle+0x2c2>
    2b84:	43 c0       	rjmp	.+134    	; 0x2c0c <HSTEPPER_vMoveSpecificAngle+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	fe 01       	movw	r30, r28
    2b88:	e1 5a       	subi	r30, 0xA1	; 161
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	60 81       	ld	r22, Z
    2b8e:	71 81       	ldd	r23, Z+1	; 0x01
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	93 81       	ldd	r25, Z+3	; 0x03
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8e 01       	movw	r16, r28
    2ba6:	07 5a       	subi	r16, 0xA7	; 167
    2ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	1f c0       	rjmp	.+62     	; 0x2bfc <HSTEPPER_vMoveSpecificAngle+0x338>
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e9 5a       	subi	r30, 0xA9	; 169
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	88 ec       	ldi	r24, 0xC8	; 200
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e9 5a       	subi	r30, 0xA9	; 169
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	91 81       	ldd	r25, Z+1	; 0x01
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <HSTEPPER_vMoveSpecificAngle+0x312>
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e9 5a       	subi	r30, 0xA9	; 169
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be4:	de 01       	movw	r26, r28
    2be6:	a7 5a       	subi	r26, 0xA7	; 167
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	e7 5a       	subi	r30, 0xA7	; 167
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	11 96       	adiw	r26, 0x01	; 1
    2bf8:	9c 93       	st	X, r25
    2bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e7 5a       	subi	r30, 0xA7	; 167
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	91 81       	ldd	r25, Z+1	; 0x01
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	d1 f6       	brne	.-76     	; 0x2bbe <HSTEPPER_vMoveSpecificAngle+0x2fa>
    2c0a:	27 c0       	rjmp	.+78     	; 0x2c5a <HSTEPPER_vMoveSpecificAngle+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	8e 01       	movw	r16, r28
    2c0e:	07 5a       	subi	r16, 0xA7	; 167
    2c10:	1f 4f       	sbci	r17, 0xFF	; 255
    2c12:	fe 01       	movw	r30, r28
    2c14:	e5 5a       	subi	r30, 0xA5	; 165
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	f8 01       	movw	r30, r16
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	80 83       	st	Z, r24
    2c2e:	de 01       	movw	r26, r28
    2c30:	ab 5a       	subi	r26, 0xAB	; 171
    2c32:	bf 4f       	sbci	r27, 0xFF	; 255
    2c34:	fe 01       	movw	r30, r28
    2c36:	e7 5a       	subi	r30, 0xA7	; 167
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	8d 93       	st	X+, r24
    2c40:	9c 93       	st	X, r25
    2c42:	fe 01       	movw	r30, r28
    2c44:	eb 5a       	subi	r30, 0xAB	; 171
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <HSTEPPER_vMoveSpecificAngle+0x388>
    2c50:	fe 01       	movw	r30, r28
    2c52:	eb 5a       	subi	r30, 0xAB	; 171
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	80 83       	st	Z, r24
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_LOW);
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_HIGH);
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	62 e0       	ldi	r22, 0x02	; 2
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ef 5a       	subi	r30, 0xAF	; 175
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	a0 e2       	ldi	r26, 0x20	; 32
    2c7a:	b1 e4       	ldi	r27, 0x41	; 65
    2c7c:	80 83       	st	Z, r24
    2c7e:	91 83       	std	Z+1, r25	; 0x01
    2c80:	a2 83       	std	Z+2, r26	; 0x02
    2c82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c84:	8e 01       	movw	r16, r28
    2c86:	03 5b       	subi	r16, 0xB3	; 179
    2c88:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 5a       	subi	r30, 0xAF	; 175
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	93 81       	ldd	r25, Z+3	; 0x03
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	4a ef       	ldi	r20, 0xFA	; 250
    2c9e:	54 e4       	ldi	r21, 0x44	; 68
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	f8 01       	movw	r30, r16
    2caa:	80 83       	st	Z, r24
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	a2 83       	std	Z+2, r26	; 0x02
    2cb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e3 5b       	subi	r30, 0xB3	; 179
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	5f e3       	ldi	r21, 0x3F	; 63
    2cc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ccc:	88 23       	and	r24, r24
    2cce:	44 f4       	brge	.+16     	; 0x2ce0 <HSTEPPER_vMoveSpecificAngle+0x41c>
		__ticks = 1;
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e5 5b       	subi	r30, 0xB5	; 181
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
    2cde:	64 c0       	rjmp	.+200    	; 0x2da8 <HSTEPPER_vMoveSpecificAngle+0x4e4>
	else if (__tmp > 65535)
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e3 5b       	subi	r30, 0xB3	; 179
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	0c f0       	brlt	.+2      	; 0x2d00 <HSTEPPER_vMoveSpecificAngle+0x43c>
    2cfe:	43 c0       	rjmp	.+134    	; 0x2d86 <HSTEPPER_vMoveSpecificAngle+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	fe 01       	movw	r30, r28
    2d02:	ef 5a       	subi	r30, 0xAF	; 175
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8e 01       	movw	r16, r28
    2d20:	05 5b       	subi	r16, 0xB5	; 181
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	f8 01       	movw	r30, r16
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	1f c0       	rjmp	.+62     	; 0x2d76 <HSTEPPER_vMoveSpecificAngle+0x4b2>
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e7 5b       	subi	r30, 0xB7	; 183
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	88 ec       	ldi	r24, 0xC8	; 200
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
    2d46:	fe 01       	movw	r30, r28
    2d48:	e7 5b       	subi	r30, 0xB7	; 183
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <HSTEPPER_vMoveSpecificAngle+0x48c>
    2d54:	fe 01       	movw	r30, r28
    2d56:	e7 5b       	subi	r30, 0xB7	; 183
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5e:	de 01       	movw	r26, r28
    2d60:	a5 5b       	subi	r26, 0xB5	; 181
    2d62:	bf 4f       	sbci	r27, 0xFF	; 255
    2d64:	fe 01       	movw	r30, r28
    2d66:	e5 5b       	subi	r30, 0xB5	; 181
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	11 96       	adiw	r26, 0x01	; 1
    2d72:	9c 93       	st	X, r25
    2d74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d76:	fe 01       	movw	r30, r28
    2d78:	e5 5b       	subi	r30, 0xB5	; 181
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	d1 f6       	brne	.-76     	; 0x2d38 <HSTEPPER_vMoveSpecificAngle+0x474>
    2d84:	27 c0       	rjmp	.+78     	; 0x2dd4 <HSTEPPER_vMoveSpecificAngle+0x510>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d86:	8e 01       	movw	r16, r28
    2d88:	05 5b       	subi	r16, 0xB5	; 181
    2d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e3 5b       	subi	r30, 0xB3	; 179
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	60 81       	ld	r22, Z
    2d94:	71 81       	ldd	r23, Z+1	; 0x01
    2d96:	82 81       	ldd	r24, Z+2	; 0x02
    2d98:	93 81       	ldd	r25, Z+3	; 0x03
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	f8 01       	movw	r30, r16
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	80 83       	st	Z, r24
    2da8:	de 01       	movw	r26, r28
    2daa:	a9 5b       	subi	r26, 0xB9	; 185
    2dac:	bf 4f       	sbci	r27, 0xFF	; 255
    2dae:	fe 01       	movw	r30, r28
    2db0:	e5 5b       	subi	r30, 0xB5	; 181
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	8d 93       	st	X+, r24
    2dba:	9c 93       	st	X, r25
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e9 5b       	subi	r30, 0xB9	; 185
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <HSTEPPER_vMoveSpecificAngle+0x502>
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e9 5b       	subi	r30, 0xB9	; 185
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	80 83       	st	Z, r24
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_LOW);
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	62 e0       	ldi	r22, 0x02	; 2
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_HIGH);
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	63 e0       	ldi	r22, 0x03	; 3
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    2de8:	fe 01       	movw	r30, r28
    2dea:	ed 5b       	subi	r30, 0xBD	; 189
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e2       	ldi	r26, 0x20	; 32
    2df4:	b1 e4       	ldi	r27, 0x41	; 65
    2df6:	80 83       	st	Z, r24
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	a2 83       	std	Z+2, r26	; 0x02
    2dfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	8e 01       	movw	r16, r28
    2e00:	01 5c       	subi	r16, 0xC1	; 193
    2e02:	1f 4f       	sbci	r17, 0xFF	; 255
    2e04:	fe 01       	movw	r30, r28
    2e06:	ed 5b       	subi	r30, 0xBD	; 189
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	4a ef       	ldi	r20, 0xFA	; 250
    2e18:	54 e4       	ldi	r21, 0x44	; 68
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	f8 01       	movw	r30, r16
    2e24:	80 83       	st	Z, r24
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	a2 83       	std	Z+2, r26	; 0x02
    2e2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	ff 96       	adiw	r30, 0x3f	; 63
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 e8       	ldi	r20, 0x80	; 128
    2e3e:	5f e3       	ldi	r21, 0x3F	; 63
    2e40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e44:	88 23       	and	r24, r24
    2e46:	2c f4       	brge	.+10     	; 0x2e52 <HSTEPPER_vMoveSpecificAngle+0x58e>
		__ticks = 1;
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	9e af       	std	Y+62, r25	; 0x3e
    2e4e:	8d af       	std	Y+61, r24	; 0x3d
    2e50:	46 c0       	rjmp	.+140    	; 0x2ede <HSTEPPER_vMoveSpecificAngle+0x61a>
	else if (__tmp > 65535)
    2e52:	fe 01       	movw	r30, r28
    2e54:	ff 96       	adiw	r30, 0x3f	; 63
    2e56:	60 81       	ld	r22, Z
    2e58:	71 81       	ldd	r23, Z+1	; 0x01
    2e5a:	82 81       	ldd	r24, Z+2	; 0x02
    2e5c:	93 81       	ldd	r25, Z+3	; 0x03
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	3f ef       	ldi	r19, 0xFF	; 255
    2e62:	4f e7       	ldi	r20, 0x7F	; 127
    2e64:	57 e4       	ldi	r21, 0x47	; 71
    2e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e6a:	18 16       	cp	r1, r24
    2e6c:	64 f5       	brge	.+88     	; 0x2ec6 <HSTEPPER_vMoveSpecificAngle+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ed 5b       	subi	r30, 0xBD	; 189
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e2       	ldi	r20, 0x20	; 32
    2e82:	51 e4       	ldi	r21, 0x41	; 65
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	cd 01       	movw	r24, r26
    2e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	9e af       	std	Y+62, r25	; 0x3e
    2e9a:	8d af       	std	Y+61, r24	; 0x3d
    2e9c:	0f c0       	rjmp	.+30     	; 0x2ebc <HSTEPPER_vMoveSpecificAngle+0x5f8>
    2e9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	9c af       	std	Y+60, r25	; 0x3c
    2ea4:	8b af       	std	Y+59, r24	; 0x3b
    2ea6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ea8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <HSTEPPER_vMoveSpecificAngle+0x5e6>
    2eae:	9c af       	std	Y+60, r25	; 0x3c
    2eb0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	9e af       	std	Y+62, r25	; 0x3e
    2eba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ebe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	69 f7       	brne	.-38     	; 0x2e9e <HSTEPPER_vMoveSpecificAngle+0x5da>
    2ec4:	16 c0       	rjmp	.+44     	; 0x2ef2 <HSTEPPER_vMoveSpecificAngle+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	ff 96       	adiw	r30, 0x3f	; 63
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9e af       	std	Y+62, r25	; 0x3e
    2edc:	8d af       	std	Y+61, r24	; 0x3d
    2ede:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ee0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ee2:	9a af       	std	Y+58, r25	; 0x3a
    2ee4:	89 af       	std	Y+57, r24	; 0x39
    2ee6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ee8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <HSTEPPER_vMoveSpecificAngle+0x626>
    2eee:	9a af       	std	Y+58, r25	; 0x3a
    2ef0:	89 af       	std	Y+57, r24	; 0x39
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_LOW);
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	63 e0       	ldi	r22, 0x03	; 3
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    2efc:	06 c2       	rjmp	.+1036   	; 0x330a <HSTEPPER_vMoveSpecificAngle+0xa46>
        } else if (direction == STEPPER_DIR_CCW) {
    2efe:	fe 01       	movw	r30, r28
    2f00:	e9 58       	subi	r30, 0x89	; 137
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 81       	ld	r24, Z
    2f06:	81 30       	cpi	r24, 0x01	; 1
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <HSTEPPER_vMoveSpecificAngle+0x648>
    2f0a:	ff c1       	rjmp	.+1022   	; 0x330a <HSTEPPER_vMoveSpecificAngle+0xa46>
            // Counter-Clockwise: O → Y → P → B
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_HIGH);
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	63 e0       	ldi	r22, 0x03	; 3
    2f10:	41 e0       	ldi	r20, 0x01	; 1
    2f12:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_LOW);
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	62 e0       	ldi	r22, 0x02	; 2
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_LOW);
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	61 e0       	ldi	r22, 0x01	; 1
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_LOW);
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
    2f30:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a0 e2       	ldi	r26, 0x20	; 32
    2f3a:	b1 e4       	ldi	r27, 0x41	; 65
    2f3c:	8d ab       	std	Y+53, r24	; 0x35
    2f3e:	9e ab       	std	Y+54, r25	; 0x36
    2f40:	af ab       	std	Y+55, r26	; 0x37
    2f42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f44:	6d a9       	ldd	r22, Y+53	; 0x35
    2f46:	7e a9       	ldd	r23, Y+54	; 0x36
    2f48:	8f a9       	ldd	r24, Y+55	; 0x37
    2f4a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a ef       	ldi	r20, 0xFA	; 250
    2f52:	54 e4       	ldi	r21, 0x44	; 68
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	89 ab       	std	Y+49, r24	; 0x31
    2f5e:	9a ab       	std	Y+50, r25	; 0x32
    2f60:	ab ab       	std	Y+51, r26	; 0x33
    2f62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f64:	69 a9       	ldd	r22, Y+49	; 0x31
    2f66:	7a a9       	ldd	r23, Y+50	; 0x32
    2f68:	8b a9       	ldd	r24, Y+51	; 0x33
    2f6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	2c f4       	brge	.+10     	; 0x2f86 <HSTEPPER_vMoveSpecificAngle+0x6c2>
		__ticks = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	98 ab       	std	Y+48, r25	; 0x30
    2f82:	8f a7       	std	Y+47, r24	; 0x2f
    2f84:	3f c0       	rjmp	.+126    	; 0x3004 <HSTEPPER_vMoveSpecificAngle+0x740>
	else if (__tmp > 65535)
    2f86:	69 a9       	ldd	r22, Y+49	; 0x31
    2f88:	7a a9       	ldd	r23, Y+50	; 0x32
    2f8a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f8c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	3f ef       	ldi	r19, 0xFF	; 255
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	57 e4       	ldi	r21, 0x47	; 71
    2f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	4c f5       	brge	.+82     	; 0x2ff0 <HSTEPPER_vMoveSpecificAngle+0x72c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9e:	6d a9       	ldd	r22, Y+53	; 0x35
    2fa0:	7e a9       	ldd	r23, Y+54	; 0x36
    2fa2:	8f a9       	ldd	r24, Y+55	; 0x37
    2fa4:	98 ad       	ldd	r25, Y+56	; 0x38
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e2       	ldi	r20, 0x20	; 32
    2fac:	51 e4       	ldi	r21, 0x41	; 65
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	98 ab       	std	Y+48, r25	; 0x30
    2fc4:	8f a7       	std	Y+47, r24	; 0x2f
    2fc6:	0f c0       	rjmp	.+30     	; 0x2fe6 <HSTEPPER_vMoveSpecificAngle+0x722>
    2fc8:	88 ec       	ldi	r24, 0xC8	; 200
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9e a7       	std	Y+46, r25	; 0x2e
    2fce:	8d a7       	std	Y+45, r24	; 0x2d
    2fd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fd2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <HSTEPPER_vMoveSpecificAngle+0x710>
    2fd8:	9e a7       	std	Y+46, r25	; 0x2e
    2fda:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fde:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	98 ab       	std	Y+48, r25	; 0x30
    2fe4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	69 f7       	brne	.-38     	; 0x2fc8 <HSTEPPER_vMoveSpecificAngle+0x704>
    2fee:	14 c0       	rjmp	.+40     	; 0x3018 <HSTEPPER_vMoveSpecificAngle+0x754>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ff2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ff4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ff6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	98 ab       	std	Y+48, r25	; 0x30
    3002:	8f a7       	std	Y+47, r24	; 0x2f
    3004:	8f a5       	ldd	r24, Y+47	; 0x2f
    3006:	98 a9       	ldd	r25, Y+48	; 0x30
    3008:	9c a7       	std	Y+44, r25	; 0x2c
    300a:	8b a7       	std	Y+43, r24	; 0x2b
    300c:	8b a5       	ldd	r24, Y+43	; 0x2b
    300e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <HSTEPPER_vMoveSpecificAngle+0x74c>
    3014:	9c a7       	std	Y+44, r25	; 0x2c
    3016:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, O, DIO_PIN_LOW);
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	63 e0       	ldi	r22, 0x03	; 3
    301c:	40 e0       	ldi	r20, 0x00	; 0
    301e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_HIGH);
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	62 e0       	ldi	r22, 0x02	; 2
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 e2       	ldi	r26, 0x20	; 32
    3032:	b1 e4       	ldi	r27, 0x41	; 65
    3034:	8f a3       	std	Y+39, r24	; 0x27
    3036:	98 a7       	std	Y+40, r25	; 0x28
    3038:	a9 a7       	std	Y+41, r26	; 0x29
    303a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	6f a1       	ldd	r22, Y+39	; 0x27
    303e:	78 a5       	ldd	r23, Y+40	; 0x28
    3040:	89 a5       	ldd	r24, Y+41	; 0x29
    3042:	9a a5       	ldd	r25, Y+42	; 0x2a
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	4a ef       	ldi	r20, 0xFA	; 250
    304a:	54 e4       	ldi	r21, 0x44	; 68
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	8b a3       	std	Y+35, r24	; 0x23
    3056:	9c a3       	std	Y+36, r25	; 0x24
    3058:	ad a3       	std	Y+37, r26	; 0x25
    305a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    305c:	6b a1       	ldd	r22, Y+35	; 0x23
    305e:	7c a1       	ldd	r23, Y+36	; 0x24
    3060:	8d a1       	ldd	r24, Y+37	; 0x25
    3062:	9e a1       	ldd	r25, Y+38	; 0x26
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3070:	88 23       	and	r24, r24
    3072:	2c f4       	brge	.+10     	; 0x307e <HSTEPPER_vMoveSpecificAngle+0x7ba>
		__ticks = 1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	9a a3       	std	Y+34, r25	; 0x22
    307a:	89 a3       	std	Y+33, r24	; 0x21
    307c:	3f c0       	rjmp	.+126    	; 0x30fc <HSTEPPER_vMoveSpecificAngle+0x838>
	else if (__tmp > 65535)
    307e:	6b a1       	ldd	r22, Y+35	; 0x23
    3080:	7c a1       	ldd	r23, Y+36	; 0x24
    3082:	8d a1       	ldd	r24, Y+37	; 0x25
    3084:	9e a1       	ldd	r25, Y+38	; 0x26
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	4c f5       	brge	.+82     	; 0x30e8 <HSTEPPER_vMoveSpecificAngle+0x824>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	6f a1       	ldd	r22, Y+39	; 0x27
    3098:	78 a5       	ldd	r23, Y+40	; 0x28
    309a:	89 a5       	ldd	r24, Y+41	; 0x29
    309c:	9a a5       	ldd	r25, Y+42	; 0x2a
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	9a a3       	std	Y+34, r25	; 0x22
    30bc:	89 a3       	std	Y+33, r24	; 0x21
    30be:	0f c0       	rjmp	.+30     	; 0x30de <HSTEPPER_vMoveSpecificAngle+0x81a>
    30c0:	88 ec       	ldi	r24, 0xC8	; 200
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	98 a3       	std	Y+32, r25	; 0x20
    30c6:	8f 8f       	std	Y+31, r24	; 0x1f
    30c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30ca:	98 a1       	ldd	r25, Y+32	; 0x20
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <HSTEPPER_vMoveSpecificAngle+0x808>
    30d0:	98 a3       	std	Y+32, r25	; 0x20
    30d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	89 a1       	ldd	r24, Y+33	; 0x21
    30d6:	9a a1       	ldd	r25, Y+34	; 0x22
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	9a a3       	std	Y+34, r25	; 0x22
    30dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30de:	89 a1       	ldd	r24, Y+33	; 0x21
    30e0:	9a a1       	ldd	r25, Y+34	; 0x22
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	69 f7       	brne	.-38     	; 0x30c0 <HSTEPPER_vMoveSpecificAngle+0x7fc>
    30e6:	14 c0       	rjmp	.+40     	; 0x3110 <HSTEPPER_vMoveSpecificAngle+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ea:	7c a1       	ldd	r23, Y+36	; 0x24
    30ec:	8d a1       	ldd	r24, Y+37	; 0x25
    30ee:	9e a1       	ldd	r25, Y+38	; 0x26
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9a a3       	std	Y+34, r25	; 0x22
    30fa:	89 a3       	std	Y+33, r24	; 0x21
    30fc:	89 a1       	ldd	r24, Y+33	; 0x21
    30fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3100:	9e 8f       	std	Y+30, r25	; 0x1e
    3102:	8d 8f       	std	Y+29, r24	; 0x1d
    3104:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3106:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <HSTEPPER_vMoveSpecificAngle+0x844>
    310c:	9e 8f       	std	Y+30, r25	; 0x1e
    310e:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, Y, DIO_PIN_LOW);
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	62 e0       	ldi	r22, 0x02	; 2
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_HIGH);
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	61 e0       	ldi	r22, 0x01	; 1
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	a0 e2       	ldi	r26, 0x20	; 32
    312a:	b1 e4       	ldi	r27, 0x41	; 65
    312c:	89 8f       	std	Y+25, r24	; 0x19
    312e:	9a 8f       	std	Y+26, r25	; 0x1a
    3130:	ab 8f       	std	Y+27, r26	; 0x1b
    3132:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3134:	69 8d       	ldd	r22, Y+25	; 0x19
    3136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    313a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	4a ef       	ldi	r20, 0xFA	; 250
    3142:	54 e4       	ldi	r21, 0x44	; 68
    3144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	8d 8b       	std	Y+21, r24	; 0x15
    314e:	9e 8b       	std	Y+22, r25	; 0x16
    3150:	af 8b       	std	Y+23, r26	; 0x17
    3152:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3154:	6d 89       	ldd	r22, Y+21	; 0x15
    3156:	7e 89       	ldd	r23, Y+22	; 0x16
    3158:	8f 89       	ldd	r24, Y+23	; 0x17
    315a:	98 8d       	ldd	r25, Y+24	; 0x18
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	40 e8       	ldi	r20, 0x80	; 128
    3162:	5f e3       	ldi	r21, 0x3F	; 63
    3164:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3168:	88 23       	and	r24, r24
    316a:	2c f4       	brge	.+10     	; 0x3176 <HSTEPPER_vMoveSpecificAngle+0x8b2>
		__ticks = 1;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	9c 8b       	std	Y+20, r25	; 0x14
    3172:	8b 8b       	std	Y+19, r24	; 0x13
    3174:	3f c0       	rjmp	.+126    	; 0x31f4 <HSTEPPER_vMoveSpecificAngle+0x930>
	else if (__tmp > 65535)
    3176:	6d 89       	ldd	r22, Y+21	; 0x15
    3178:	7e 89       	ldd	r23, Y+22	; 0x16
    317a:	8f 89       	ldd	r24, Y+23	; 0x17
    317c:	98 8d       	ldd	r25, Y+24	; 0x18
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	3f ef       	ldi	r19, 0xFF	; 255
    3182:	4f e7       	ldi	r20, 0x7F	; 127
    3184:	57 e4       	ldi	r21, 0x47	; 71
    3186:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318a:	18 16       	cp	r1, r24
    318c:	4c f5       	brge	.+82     	; 0x31e0 <HSTEPPER_vMoveSpecificAngle+0x91c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318e:	69 8d       	ldd	r22, Y+25	; 0x19
    3190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e2       	ldi	r20, 0x20	; 32
    319c:	51 e4       	ldi	r21, 0x41	; 65
    319e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9c 8b       	std	Y+20, r25	; 0x14
    31b4:	8b 8b       	std	Y+19, r24	; 0x13
    31b6:	0f c0       	rjmp	.+30     	; 0x31d6 <HSTEPPER_vMoveSpecificAngle+0x912>
    31b8:	88 ec       	ldi	r24, 0xC8	; 200
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	9a 8b       	std	Y+18, r25	; 0x12
    31be:	89 8b       	std	Y+17, r24	; 0x11
    31c0:	89 89       	ldd	r24, Y+17	; 0x11
    31c2:	9a 89       	ldd	r25, Y+18	; 0x12
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <HSTEPPER_vMoveSpecificAngle+0x900>
    31c8:	9a 8b       	std	Y+18, r25	; 0x12
    31ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31cc:	8b 89       	ldd	r24, Y+19	; 0x13
    31ce:	9c 89       	ldd	r25, Y+20	; 0x14
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	9c 8b       	std	Y+20, r25	; 0x14
    31d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d6:	8b 89       	ldd	r24, Y+19	; 0x13
    31d8:	9c 89       	ldd	r25, Y+20	; 0x14
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	69 f7       	brne	.-38     	; 0x31b8 <HSTEPPER_vMoveSpecificAngle+0x8f4>
    31de:	14 c0       	rjmp	.+40     	; 0x3208 <HSTEPPER_vMoveSpecificAngle+0x944>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e0:	6d 89       	ldd	r22, Y+21	; 0x15
    31e2:	7e 89       	ldd	r23, Y+22	; 0x16
    31e4:	8f 89       	ldd	r24, Y+23	; 0x17
    31e6:	98 8d       	ldd	r25, Y+24	; 0x18
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9c 8b       	std	Y+20, r25	; 0x14
    31f2:	8b 8b       	std	Y+19, r24	; 0x13
    31f4:	8b 89       	ldd	r24, Y+19	; 0x13
    31f6:	9c 89       	ldd	r25, Y+20	; 0x14
    31f8:	98 8b       	std	Y+16, r25	; 0x10
    31fa:	8f 87       	std	Y+15, r24	; 0x0f
    31fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fe:	98 89       	ldd	r25, Y+16	; 0x10
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <HSTEPPER_vMoveSpecificAngle+0x93c>
    3204:	98 8b       	std	Y+16, r25	; 0x10
    3206:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, P, DIO_PIN_LOW);
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	61 e0       	ldi	r22, 0x01	; 1
    320c:	40 e0       	ldi	r20, 0x00	; 0
    320e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_HIGH);
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	60 e0       	ldi	r22, 0x00	; 0
    3216:	41 e0       	ldi	r20, 0x01	; 1
    3218:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	a0 e2       	ldi	r26, 0x20	; 32
    3222:	b1 e4       	ldi	r27, 0x41	; 65
    3224:	8b 87       	std	Y+11, r24	; 0x0b
    3226:	9c 87       	std	Y+12, r25	; 0x0c
    3228:	ad 87       	std	Y+13, r26	; 0x0d
    322a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322c:	6b 85       	ldd	r22, Y+11	; 0x0b
    322e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3230:	8d 85       	ldd	r24, Y+13	; 0x0d
    3232:	9e 85       	ldd	r25, Y+14	; 0x0e
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	4a ef       	ldi	r20, 0xFA	; 250
    323a:	54 e4       	ldi	r21, 0x44	; 68
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	8f 83       	std	Y+7, r24	; 0x07
    3246:	98 87       	std	Y+8, r25	; 0x08
    3248:	a9 87       	std	Y+9, r26	; 0x09
    324a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    324c:	6f 81       	ldd	r22, Y+7	; 0x07
    324e:	78 85       	ldd	r23, Y+8	; 0x08
    3250:	89 85       	ldd	r24, Y+9	; 0x09
    3252:	9a 85       	ldd	r25, Y+10	; 0x0a
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e8       	ldi	r20, 0x80	; 128
    325a:	5f e3       	ldi	r21, 0x3F	; 63
    325c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3260:	88 23       	and	r24, r24
    3262:	2c f4       	brge	.+10     	; 0x326e <HSTEPPER_vMoveSpecificAngle+0x9aa>
		__ticks = 1;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
    326c:	3f c0       	rjmp	.+126    	; 0x32ec <HSTEPPER_vMoveSpecificAngle+0xa28>
	else if (__tmp > 65535)
    326e:	6f 81       	ldd	r22, Y+7	; 0x07
    3270:	78 85       	ldd	r23, Y+8	; 0x08
    3272:	89 85       	ldd	r24, Y+9	; 0x09
    3274:	9a 85       	ldd	r25, Y+10	; 0x0a
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	3f ef       	ldi	r19, 0xFF	; 255
    327a:	4f e7       	ldi	r20, 0x7F	; 127
    327c:	57 e4       	ldi	r21, 0x47	; 71
    327e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3282:	18 16       	cp	r1, r24
    3284:	4c f5       	brge	.+82     	; 0x32d8 <HSTEPPER_vMoveSpecificAngle+0xa14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3286:	6b 85       	ldd	r22, Y+11	; 0x0b
    3288:	7c 85       	ldd	r23, Y+12	; 0x0c
    328a:	8d 85       	ldd	r24, Y+13	; 0x0d
    328c:	9e 85       	ldd	r25, Y+14	; 0x0e
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e2       	ldi	r20, 0x20	; 32
    3294:	51 e4       	ldi	r21, 0x41	; 65
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
    32ae:	0f c0       	rjmp	.+30     	; 0x32ce <HSTEPPER_vMoveSpecificAngle+0xa0a>
    32b0:	88 ec       	ldi	r24, 0xC8	; 200
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9c 83       	std	Y+4, r25	; 0x04
    32b6:	8b 83       	std	Y+3, r24	; 0x03
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	9c 81       	ldd	r25, Y+4	; 0x04
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <HSTEPPER_vMoveSpecificAngle+0x9f8>
    32c0:	9c 83       	std	Y+4, r25	; 0x04
    32c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	69 f7       	brne	.-38     	; 0x32b0 <HSTEPPER_vMoveSpecificAngle+0x9ec>
    32d6:	14 c0       	rjmp	.+40     	; 0x3300 <HSTEPPER_vMoveSpecificAngle+0xa3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	78 85       	ldd	r23, Y+8	; 0x08
    32dc:	89 85       	ldd	r24, Y+9	; 0x09
    32de:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	9e 81       	ldd	r25, Y+6	; 0x06
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	89 83       	std	Y+1, r24	; 0x01
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	f1 f7       	brne	.-4      	; 0x32f8 <HSTEPPER_vMoveSpecificAngle+0xa34>
    32fc:	9a 83       	std	Y+2, r25	; 0x02
    32fe:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_LOW);
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>

void HSTEPPER_vMoveSpecificAngle(u16 A_u8Angle ,  u8 direction){

    u16 Local_u16Steps = (u16)(A_u8Angle / STEPPER_STRIDE_ANGLE);

    for(int i = 0 ; i < (Local_u16Steps / 4) ; i++) {
    330a:	de 01       	movw	r26, r28
    330c:	af 58       	subi	r26, 0x8F	; 143
    330e:	bf 4f       	sbci	r27, 0xFF	; 255
    3310:	fe 01       	movw	r30, r28
    3312:	ef 58       	subi	r30, 0x8F	; 143
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	11 96       	adiw	r26, 0x01	; 1
    331e:	9c 93       	st	X, r25
    3320:	8e 93       	st	-X, r24
    3322:	fe 01       	movw	r30, r28
    3324:	ef 58       	subi	r30, 0x8F	; 143
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	20 81       	ld	r18, Z
    332a:	31 81       	ldd	r19, Z+1	; 0x01
    332c:	fe 01       	movw	r30, r28
    332e:	ed 58       	subi	r30, 0x8D	; 141
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	80 81       	ld	r24, Z
    3334:	91 81       	ldd	r25, Z+1	; 0x01
    3336:	96 95       	lsr	r25
    3338:	87 95       	ror	r24
    333a:	96 95       	lsr	r25
    333c:	87 95       	ror	r24
    333e:	28 17       	cp	r18, r24
    3340:	39 07       	cpc	r19, r25
    3342:	08 f4       	brcc	.+2      	; 0x3346 <HSTEPPER_vMoveSpecificAngle+0xa82>
    3344:	ff ca       	rjmp	.-2562   	; 0x2944 <HSTEPPER_vMoveSpecificAngle+0x80>
            _delay_ms(10);

            MDIO_vSetPinValue(STEPPER_CONTROL_PORT, B, DIO_PIN_LOW);
        }
    }
}
    3346:	c9 58       	subi	r28, 0x89	; 137
    3348:	df 4f       	sbci	r29, 0xFF	; 255
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	08 95       	ret

0000335e <HSSD_vInit>:
		0b11111000, // 7
		0b10000000, // 8
		0b10010000  // 9
		};

void HSSD_vInit(void) {
    335e:	df 93       	push	r29
    3360:	cf 93       	push	r28
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortValue(HSSD_INIT_PORT, DIO_PORT_HIGH);
    3366:	82 e0       	ldi	r24, 0x02	; 2
    3368:	6f ef       	ldi	r22, 0xFF	; 255
    336a:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_vSetPortValue>
}
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <HSSD_DisplayNumber>:

void HSSD_DisplayNumber(u8 A_u8Num) {
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	0f 92       	push	r0
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPortDirection(HSSD_INIT_PORT , DIO_PORT_DIRECTION_OUTPUT);
    3380:	82 e0       	ldi	r24, 0x02	; 2
    3382:	6f ef       	ldi	r22, 0xFF	; 255
    3384:	0e 94 ad 10 	call	0x215a	; 0x215a <MDIO_vSetPortDirection>
	if (A_u8Num < 10){
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	8a 30       	cpi	r24, 0x0A	; 10
    338c:	70 f4       	brcc	.+28     	; 0x33aa <HSSD_DisplayNumber+0x36>

	#if 	HSSD_TYPE == HSSD_COMMON_CATHODE
		MDIO_vSetPortValue(HSSD_INIT_PORT, seven_seg_commnoc_cathode[A_u8Num]);

	#elif 	HSSD_TYPE == HSSD_COMMON_ANODE
		MDIO_vSetPortValue(HSSD_INIT_PORT , ~(seven_seg_commnoc_cathode[A_u8Num]));
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	88 2f       	mov	r24, r24
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	fc 01       	movw	r30, r24
    3396:	e1 56       	subi	r30, 0x61	; 97
    3398:	fe 4f       	sbci	r31, 0xFE	; 254
    339a:	80 81       	ld	r24, Z
    339c:	98 2f       	mov	r25, r24
    339e:	90 95       	com	r25
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	69 2f       	mov	r22, r25
    33a4:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_vSetPortValue>
    33a8:	06 c0       	rjmp	.+12     	; 0x33b6 <HSSD_DisplayNumber+0x42>

	#endif
	}
	else{
		MDIO_vSetPortValue(HSSD_INIT_PORT , (seven_seg_commnoc_cathode[1]));
    33aa:	90 91 a0 01 	lds	r25, 0x01A0
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	69 2f       	mov	r22, r25
    33b2:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_vSetPortValue>
	}
}
    33b6:	0f 90       	pop	r0
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret

000033be <HLCD_vSendCommand>:
#include "LCD.int.h"




void HLCD_vSendCommand(u8 A_u8Command){
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	2f 97       	sbiw	r28, 0x0f	; 15
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN_CFG , DIO_PIN_LOW  );
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	64 e0       	ldi	r22, 0x04	; 4
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN_CFG , DIO_PIN_LOW  );
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	65 e0       	ldi	r22, 0x05	; 5
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPortValue(LCD_DATA_PORT , A_u8Command);
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    33ec:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_vSetPortValue>
	MDIO_vSetPinValue(LCD_CONTROL_PORT , LCD_EN_PIN_CFG , DIO_PIN_HIGH  );
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	66 e0       	ldi	r22, 0x06	; 6
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	a0 e8       	ldi	r26, 0x80	; 128
    3400:	bf e3       	ldi	r27, 0x3F	; 63
    3402:	8b 87       	std	Y+11, r24	; 0x0b
    3404:	9c 87       	std	Y+12, r25	; 0x0c
    3406:	ad 87       	std	Y+13, r26	; 0x0d
    3408:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340a:	6b 85       	ldd	r22, Y+11	; 0x0b
    340c:	7c 85       	ldd	r23, Y+12	; 0x0c
    340e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3410:	9e 85       	ldd	r25, Y+14	; 0x0e
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	4a ef       	ldi	r20, 0xFA	; 250
    3418:	54 e4       	ldi	r21, 0x44	; 68
    341a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	8f 83       	std	Y+7, r24	; 0x07
    3424:	98 87       	std	Y+8, r25	; 0x08
    3426:	a9 87       	std	Y+9, r26	; 0x09
    3428:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    342a:	6f 81       	ldd	r22, Y+7	; 0x07
    342c:	78 85       	ldd	r23, Y+8	; 0x08
    342e:	89 85       	ldd	r24, Y+9	; 0x09
    3430:	9a 85       	ldd	r25, Y+10	; 0x0a
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e8       	ldi	r20, 0x80	; 128
    3438:	5f e3       	ldi	r21, 0x3F	; 63
    343a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343e:	88 23       	and	r24, r24
    3440:	2c f4       	brge	.+10     	; 0x344c <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	9e 83       	std	Y+6, r25	; 0x06
    3448:	8d 83       	std	Y+5, r24	; 0x05
    344a:	3f c0       	rjmp	.+126    	; 0x34ca <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    344c:	6f 81       	ldd	r22, Y+7	; 0x07
    344e:	78 85       	ldd	r23, Y+8	; 0x08
    3450:	89 85       	ldd	r24, Y+9	; 0x09
    3452:	9a 85       	ldd	r25, Y+10	; 0x0a
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	3f ef       	ldi	r19, 0xFF	; 255
    3458:	4f e7       	ldi	r20, 0x7F	; 127
    345a:	57 e4       	ldi	r21, 0x47	; 71
    345c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3460:	18 16       	cp	r1, r24
    3462:	4c f5       	brge	.+82     	; 0x34b6 <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3464:	6b 85       	ldd	r22, Y+11	; 0x0b
    3466:	7c 85       	ldd	r23, Y+12	; 0x0c
    3468:	8d 85       	ldd	r24, Y+13	; 0x0d
    346a:	9e 85       	ldd	r25, Y+14	; 0x0e
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e2       	ldi	r20, 0x20	; 32
    3472:	51 e4       	ldi	r21, 0x41	; 65
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	bc 01       	movw	r22, r24
    347e:	cd 01       	movw	r24, r26
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	9e 83       	std	Y+6, r25	; 0x06
    348a:	8d 83       	std	Y+5, r24	; 0x05
    348c:	0f c0       	rjmp	.+30     	; 0x34ac <HLCD_vSendCommand+0xee>
    348e:	88 ec       	ldi	r24, 0xC8	; 200
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	9c 83       	std	Y+4, r25	; 0x04
    3494:	8b 83       	std	Y+3, r24	; 0x03
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	9c 81       	ldd	r25, Y+4	; 0x04
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <HLCD_vSendCommand+0xdc>
    349e:	9c 83       	std	Y+4, r25	; 0x04
    34a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a2:	8d 81       	ldd	r24, Y+5	; 0x05
    34a4:	9e 81       	ldd	r25, Y+6	; 0x06
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	9e 83       	std	Y+6, r25	; 0x06
    34aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ac:	8d 81       	ldd	r24, Y+5	; 0x05
    34ae:	9e 81       	ldd	r25, Y+6	; 0x06
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	69 f7       	brne	.-38     	; 0x348e <HLCD_vSendCommand+0xd0>
    34b4:	14 c0       	rjmp	.+40     	; 0x34de <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b6:	6f 81       	ldd	r22, Y+7	; 0x07
    34b8:	78 85       	ldd	r23, Y+8	; 0x08
    34ba:	89 85       	ldd	r24, Y+9	; 0x09
    34bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	9e 83       	std	Y+6, r25	; 0x06
    34c8:	8d 83       	std	Y+5, r24	; 0x05
    34ca:	8d 81       	ldd	r24, Y+5	; 0x05
    34cc:	9e 81       	ldd	r25, Y+6	; 0x06
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	89 83       	std	Y+1, r24	; 0x01
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	9a 81       	ldd	r25, Y+2	; 0x02
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <HLCD_vSendCommand+0x118>
    34da:	9a 83       	std	Y+2, r25	; 0x02
    34dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinValue(LCD_CONTROL_PORT , LCD_EN_PIN_CFG , DIO_PIN_LOW);
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	66 e0       	ldi	r22, 0x06	; 6
    34e2:	40 e0       	ldi	r20, 0x00	; 0
    34e4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>

}
    34e8:	2f 96       	adiw	r28, 0x0f	; 15
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <HLCD_vSendChar>:


void HLCD_vSendChar(u8 A_u8Char){
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    3502:	2f 97       	sbiw	r28, 0x0f	; 15
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN_CFG , DIO_PIN_HIGH  );
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	64 e0       	ldi	r22, 0x04	; 4
    3514:	41 e0       	ldi	r20, 0x01	; 1
    3516:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN_CFG , DIO_PIN_LOW  );
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	65 e0       	ldi	r22, 0x05	; 5
    351e:	40 e0       	ldi	r20, 0x00	; 0
    3520:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPortValue(LCD_DATA_PORT , A_u8Char);
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	6f 85       	ldd	r22, Y+15	; 0x0f
    3528:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_vSetPortValue>
	MDIO_vSetPinValue(LCD_CONTROL_PORT , LCD_EN_PIN_CFG , DIO_PIN_HIGH  );
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	66 e0       	ldi	r22, 0x06	; 6
    3530:	41 e0       	ldi	r20, 0x01	; 1
    3532:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	a0 e8       	ldi	r26, 0x80	; 128
    353c:	bf e3       	ldi	r27, 0x3F	; 63
    353e:	8b 87       	std	Y+11, r24	; 0x0b
    3540:	9c 87       	std	Y+12, r25	; 0x0c
    3542:	ad 87       	std	Y+13, r26	; 0x0d
    3544:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3546:	6b 85       	ldd	r22, Y+11	; 0x0b
    3548:	7c 85       	ldd	r23, Y+12	; 0x0c
    354a:	8d 85       	ldd	r24, Y+13	; 0x0d
    354c:	9e 85       	ldd	r25, Y+14	; 0x0e
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	4a ef       	ldi	r20, 0xFA	; 250
    3554:	54 e4       	ldi	r21, 0x44	; 68
    3556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	8f 83       	std	Y+7, r24	; 0x07
    3560:	98 87       	std	Y+8, r25	; 0x08
    3562:	a9 87       	std	Y+9, r26	; 0x09
    3564:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3566:	6f 81       	ldd	r22, Y+7	; 0x07
    3568:	78 85       	ldd	r23, Y+8	; 0x08
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	9a 85       	ldd	r25, Y+10	; 0x0a
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	40 e8       	ldi	r20, 0x80	; 128
    3574:	5f e3       	ldi	r21, 0x3F	; 63
    3576:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    357a:	88 23       	and	r24, r24
    357c:	2c f4       	brge	.+10     	; 0x3588 <HLCD_vSendChar+0x8e>
		__ticks = 1;
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	9e 83       	std	Y+6, r25	; 0x06
    3584:	8d 83       	std	Y+5, r24	; 0x05
    3586:	3f c0       	rjmp	.+126    	; 0x3606 <HLCD_vSendChar+0x10c>
	else if (__tmp > 65535)
    3588:	6f 81       	ldd	r22, Y+7	; 0x07
    358a:	78 85       	ldd	r23, Y+8	; 0x08
    358c:	89 85       	ldd	r24, Y+9	; 0x09
    358e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	3f ef       	ldi	r19, 0xFF	; 255
    3594:	4f e7       	ldi	r20, 0x7F	; 127
    3596:	57 e4       	ldi	r21, 0x47	; 71
    3598:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    359c:	18 16       	cp	r1, r24
    359e:	4c f5       	brge	.+82     	; 0x35f2 <HLCD_vSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	40 e2       	ldi	r20, 0x20	; 32
    35ae:	51 e4       	ldi	r21, 0x41	; 65
    35b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	bc 01       	movw	r22, r24
    35ba:	cd 01       	movw	r24, r26
    35bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9e 83       	std	Y+6, r25	; 0x06
    35c6:	8d 83       	std	Y+5, r24	; 0x05
    35c8:	0f c0       	rjmp	.+30     	; 0x35e8 <HLCD_vSendChar+0xee>
    35ca:	88 ec       	ldi	r24, 0xC8	; 200
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	9c 83       	std	Y+4, r25	; 0x04
    35d0:	8b 83       	std	Y+3, r24	; 0x03
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <HLCD_vSendChar+0xdc>
    35da:	9c 83       	std	Y+4, r25	; 0x04
    35dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35de:	8d 81       	ldd	r24, Y+5	; 0x05
    35e0:	9e 81       	ldd	r25, Y+6	; 0x06
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	9e 83       	std	Y+6, r25	; 0x06
    35e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ea:	9e 81       	ldd	r25, Y+6	; 0x06
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	69 f7       	brne	.-38     	; 0x35ca <HLCD_vSendChar+0xd0>
    35f0:	14 c0       	rjmp	.+40     	; 0x361a <HLCD_vSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f2:	6f 81       	ldd	r22, Y+7	; 0x07
    35f4:	78 85       	ldd	r23, Y+8	; 0x08
    35f6:	89 85       	ldd	r24, Y+9	; 0x09
    35f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9e 83       	std	Y+6, r25	; 0x06
    3604:	8d 83       	std	Y+5, r24	; 0x05
    3606:	8d 81       	ldd	r24, Y+5	; 0x05
    3608:	9e 81       	ldd	r25, Y+6	; 0x06
    360a:	9a 83       	std	Y+2, r25	; 0x02
    360c:	89 83       	std	Y+1, r24	; 0x01
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <HLCD_vSendChar+0x118>
    3616:	9a 83       	std	Y+2, r25	; 0x02
    3618:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinValue(LCD_CONTROL_PORT , LCD_EN_PIN_CFG , DIO_PIN_LOW);
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	66 e0       	ldi	r22, 0x06	; 6
    361e:	40 e0       	ldi	r20, 0x00	; 0
    3620:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
}
    3624:	2f 96       	adiw	r28, 0x0f	; 15
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <HLCD_vInit>:


void HLCD_vInit(){
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	e8 97       	sbiw	r28, 0x38	; 56
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPortDirection(LCD_DATA_PORT , DIO_PORT_DIRECTION_OUTPUT);
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	6f ef       	ldi	r22, 0xFF	; 255
    364e:	0e 94 ad 10 	call	0x215a	; 0x215a <MDIO_vSetPortDirection>
	MDIO_vSetPinDirection(LCD_CONTROL_PORT , LCD_RS_PIN_CFG , DIO_PIN_DIRECTION_OUTPUT);
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	64 e0       	ldi	r22, 0x04	; 4
    3656:	41 e0       	ldi	r20, 0x01	; 1
    3658:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(LCD_CONTROL_PORT , LCD_RW_PIN_CFG , DIO_PIN_DIRECTION_OUTPUT);
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	65 e0       	ldi	r22, 0x05	; 5
    3660:	41 e0       	ldi	r20, 0x01	; 1
    3662:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(LCD_CONTROL_PORT , LCD_EN_PIN_CFG , DIO_PIN_DIRECTION_OUTPUT);
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	66 e0       	ldi	r22, 0x06	; 6
    366a:	41 e0       	ldi	r20, 0x01	; 1
    366c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	a8 e4       	ldi	r26, 0x48	; 72
    3676:	b2 e4       	ldi	r27, 0x42	; 66
    3678:	8d ab       	std	Y+53, r24	; 0x35
    367a:	9e ab       	std	Y+54, r25	; 0x36
    367c:	af ab       	std	Y+55, r26	; 0x37
    367e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3680:	6d a9       	ldd	r22, Y+53	; 0x35
    3682:	7e a9       	ldd	r23, Y+54	; 0x36
    3684:	8f a9       	ldd	r24, Y+55	; 0x37
    3686:	98 ad       	ldd	r25, Y+56	; 0x38
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	4a ef       	ldi	r20, 0xFA	; 250
    368e:	54 e4       	ldi	r21, 0x44	; 68
    3690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	89 ab       	std	Y+49, r24	; 0x31
    369a:	9a ab       	std	Y+50, r25	; 0x32
    369c:	ab ab       	std	Y+51, r26	; 0x33
    369e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36a0:	69 a9       	ldd	r22, Y+49	; 0x31
    36a2:	7a a9       	ldd	r23, Y+50	; 0x32
    36a4:	8b a9       	ldd	r24, Y+51	; 0x33
    36a6:	9c a9       	ldd	r25, Y+52	; 0x34
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e8       	ldi	r20, 0x80	; 128
    36ae:	5f e3       	ldi	r21, 0x3F	; 63
    36b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36b4:	88 23       	and	r24, r24
    36b6:	2c f4       	brge	.+10     	; 0x36c2 <HLCD_vInit+0x8c>
		__ticks = 1;
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	98 ab       	std	Y+48, r25	; 0x30
    36be:	8f a7       	std	Y+47, r24	; 0x2f
    36c0:	3f c0       	rjmp	.+126    	; 0x3740 <HLCD_vInit+0x10a>
	else if (__tmp > 65535)
    36c2:	69 a9       	ldd	r22, Y+49	; 0x31
    36c4:	7a a9       	ldd	r23, Y+50	; 0x32
    36c6:	8b a9       	ldd	r24, Y+51	; 0x33
    36c8:	9c a9       	ldd	r25, Y+52	; 0x34
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	3f ef       	ldi	r19, 0xFF	; 255
    36ce:	4f e7       	ldi	r20, 0x7F	; 127
    36d0:	57 e4       	ldi	r21, 0x47	; 71
    36d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36d6:	18 16       	cp	r1, r24
    36d8:	4c f5       	brge	.+82     	; 0x372c <HLCD_vInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36da:	6d a9       	ldd	r22, Y+53	; 0x35
    36dc:	7e a9       	ldd	r23, Y+54	; 0x36
    36de:	8f a9       	ldd	r24, Y+55	; 0x37
    36e0:	98 ad       	ldd	r25, Y+56	; 0x38
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	40 e2       	ldi	r20, 0x20	; 32
    36e8:	51 e4       	ldi	r21, 0x41	; 65
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	98 ab       	std	Y+48, r25	; 0x30
    3700:	8f a7       	std	Y+47, r24	; 0x2f
    3702:	0f c0       	rjmp	.+30     	; 0x3722 <HLCD_vInit+0xec>
    3704:	88 ec       	ldi	r24, 0xC8	; 200
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	9e a7       	std	Y+46, r25	; 0x2e
    370a:	8d a7       	std	Y+45, r24	; 0x2d
    370c:	8d a5       	ldd	r24, Y+45	; 0x2d
    370e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <HLCD_vInit+0xda>
    3714:	9e a7       	std	Y+46, r25	; 0x2e
    3716:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3718:	8f a5       	ldd	r24, Y+47	; 0x2f
    371a:	98 a9       	ldd	r25, Y+48	; 0x30
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	98 ab       	std	Y+48, r25	; 0x30
    3720:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3722:	8f a5       	ldd	r24, Y+47	; 0x2f
    3724:	98 a9       	ldd	r25, Y+48	; 0x30
    3726:	00 97       	sbiw	r24, 0x00	; 0
    3728:	69 f7       	brne	.-38     	; 0x3704 <HLCD_vInit+0xce>
    372a:	14 c0       	rjmp	.+40     	; 0x3754 <HLCD_vInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372c:	69 a9       	ldd	r22, Y+49	; 0x31
    372e:	7a a9       	ldd	r23, Y+50	; 0x32
    3730:	8b a9       	ldd	r24, Y+51	; 0x33
    3732:	9c a9       	ldd	r25, Y+52	; 0x34
    3734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	98 ab       	std	Y+48, r25	; 0x30
    373e:	8f a7       	std	Y+47, r24	; 0x2f
    3740:	8f a5       	ldd	r24, Y+47	; 0x2f
    3742:	98 a9       	ldd	r25, Y+48	; 0x30
    3744:	9c a7       	std	Y+44, r25	; 0x2c
    3746:	8b a7       	std	Y+43, r24	; 0x2b
    3748:	8b a5       	ldd	r24, Y+43	; 0x2b
    374a:	9c a5       	ldd	r25, Y+44	; 0x2c
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	f1 f7       	brne	.-4      	; 0x374c <HLCD_vInit+0x116>
    3750:	9c a7       	std	Y+44, r25	; 0x2c
    3752:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);
	HLCD_vSendCommand(0b00111000);
    3754:	88 e3       	ldi	r24, 0x38	; 56
    3756:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	a0 e8       	ldi	r26, 0x80	; 128
    3760:	bf e3       	ldi	r27, 0x3F	; 63
    3762:	8f a3       	std	Y+39, r24	; 0x27
    3764:	98 a7       	std	Y+40, r25	; 0x28
    3766:	a9 a7       	std	Y+41, r26	; 0x29
    3768:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376a:	6f a1       	ldd	r22, Y+39	; 0x27
    376c:	78 a5       	ldd	r23, Y+40	; 0x28
    376e:	89 a5       	ldd	r24, Y+41	; 0x29
    3770:	9a a5       	ldd	r25, Y+42	; 0x2a
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4a ef       	ldi	r20, 0xFA	; 250
    3778:	54 e4       	ldi	r21, 0x44	; 68
    377a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	8b a3       	std	Y+35, r24	; 0x23
    3784:	9c a3       	std	Y+36, r25	; 0x24
    3786:	ad a3       	std	Y+37, r26	; 0x25
    3788:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    378a:	6b a1       	ldd	r22, Y+35	; 0x23
    378c:	7c a1       	ldd	r23, Y+36	; 0x24
    378e:	8d a1       	ldd	r24, Y+37	; 0x25
    3790:	9e a1       	ldd	r25, Y+38	; 0x26
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e8       	ldi	r20, 0x80	; 128
    3798:	5f e3       	ldi	r21, 0x3F	; 63
    379a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    379e:	88 23       	and	r24, r24
    37a0:	2c f4       	brge	.+10     	; 0x37ac <HLCD_vInit+0x176>
		__ticks = 1;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	9a a3       	std	Y+34, r25	; 0x22
    37a8:	89 a3       	std	Y+33, r24	; 0x21
    37aa:	3f c0       	rjmp	.+126    	; 0x382a <HLCD_vInit+0x1f4>
	else if (__tmp > 65535)
    37ac:	6b a1       	ldd	r22, Y+35	; 0x23
    37ae:	7c a1       	ldd	r23, Y+36	; 0x24
    37b0:	8d a1       	ldd	r24, Y+37	; 0x25
    37b2:	9e a1       	ldd	r25, Y+38	; 0x26
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	4f e7       	ldi	r20, 0x7F	; 127
    37ba:	57 e4       	ldi	r21, 0x47	; 71
    37bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37c0:	18 16       	cp	r1, r24
    37c2:	4c f5       	brge	.+82     	; 0x3816 <HLCD_vInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c4:	6f a1       	ldd	r22, Y+39	; 0x27
    37c6:	78 a5       	ldd	r23, Y+40	; 0x28
    37c8:	89 a5       	ldd	r24, Y+41	; 0x29
    37ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e2       	ldi	r20, 0x20	; 32
    37d2:	51 e4       	ldi	r21, 0x41	; 65
    37d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9a a3       	std	Y+34, r25	; 0x22
    37ea:	89 a3       	std	Y+33, r24	; 0x21
    37ec:	0f c0       	rjmp	.+30     	; 0x380c <HLCD_vInit+0x1d6>
    37ee:	88 ec       	ldi	r24, 0xC8	; 200
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	98 a3       	std	Y+32, r25	; 0x20
    37f4:	8f 8f       	std	Y+31, r24	; 0x1f
    37f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37f8:	98 a1       	ldd	r25, Y+32	; 0x20
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <HLCD_vInit+0x1c4>
    37fe:	98 a3       	std	Y+32, r25	; 0x20
    3800:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3802:	89 a1       	ldd	r24, Y+33	; 0x21
    3804:	9a a1       	ldd	r25, Y+34	; 0x22
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	9a a3       	std	Y+34, r25	; 0x22
    380a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380c:	89 a1       	ldd	r24, Y+33	; 0x21
    380e:	9a a1       	ldd	r25, Y+34	; 0x22
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	69 f7       	brne	.-38     	; 0x37ee <HLCD_vInit+0x1b8>
    3814:	14 c0       	rjmp	.+40     	; 0x383e <HLCD_vInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3816:	6b a1       	ldd	r22, Y+35	; 0x23
    3818:	7c a1       	ldd	r23, Y+36	; 0x24
    381a:	8d a1       	ldd	r24, Y+37	; 0x25
    381c:	9e a1       	ldd	r25, Y+38	; 0x26
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9a a3       	std	Y+34, r25	; 0x22
    3828:	89 a3       	std	Y+33, r24	; 0x21
    382a:	89 a1       	ldd	r24, Y+33	; 0x21
    382c:	9a a1       	ldd	r25, Y+34	; 0x22
    382e:	9e 8f       	std	Y+30, r25	; 0x1e
    3830:	8d 8f       	std	Y+29, r24	; 0x1d
    3832:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3834:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	f1 f7       	brne	.-4      	; 0x3836 <HLCD_vInit+0x200>
    383a:	9e 8f       	std	Y+30, r25	; 0x1e
    383c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_vSendCommand(0b00001100);
    383e:	8c e0       	ldi	r24, 0x0C	; 12
    3840:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 e8       	ldi	r26, 0x80	; 128
    384a:	bf e3       	ldi	r27, 0x3F	; 63
    384c:	89 8f       	std	Y+25, r24	; 0x19
    384e:	9a 8f       	std	Y+26, r25	; 0x1a
    3850:	ab 8f       	std	Y+27, r26	; 0x1b
    3852:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	69 8d       	ldd	r22, Y+25	; 0x19
    3856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    385a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a ef       	ldi	r20, 0xFA	; 250
    3862:	54 e4       	ldi	r21, 0x44	; 68
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8d 8b       	std	Y+21, r24	; 0x15
    386e:	9e 8b       	std	Y+22, r25	; 0x16
    3870:	af 8b       	std	Y+23, r26	; 0x17
    3872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3874:	6d 89       	ldd	r22, Y+21	; 0x15
    3876:	7e 89       	ldd	r23, Y+22	; 0x16
    3878:	8f 89       	ldd	r24, Y+23	; 0x17
    387a:	98 8d       	ldd	r25, Y+24	; 0x18
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <HLCD_vInit+0x260>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9c 8b       	std	Y+20, r25	; 0x14
    3892:	8b 8b       	std	Y+19, r24	; 0x13
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <HLCD_vInit+0x2de>
	else if (__tmp > 65535)
    3896:	6d 89       	ldd	r22, Y+21	; 0x15
    3898:	7e 89       	ldd	r23, Y+22	; 0x16
    389a:	8f 89       	ldd	r24, Y+23	; 0x17
    389c:	98 8d       	ldd	r25, Y+24	; 0x18
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <HLCD_vInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	69 8d       	ldd	r22, Y+25	; 0x19
    38b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9c 8b       	std	Y+20, r25	; 0x14
    38d4:	8b 8b       	std	Y+19, r24	; 0x13
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <HLCD_vInit+0x2c0>
    38d8:	88 ec       	ldi	r24, 0xC8	; 200
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9a 8b       	std	Y+18, r25	; 0x12
    38de:	89 8b       	std	Y+17, r24	; 0x11
    38e0:	89 89       	ldd	r24, Y+17	; 0x11
    38e2:	9a 89       	ldd	r25, Y+18	; 0x12
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <HLCD_vInit+0x2ae>
    38e8:	9a 8b       	std	Y+18, r25	; 0x12
    38ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8b 89       	ldd	r24, Y+19	; 0x13
    38ee:	9c 89       	ldd	r25, Y+20	; 0x14
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	9c 8b       	std	Y+20, r25	; 0x14
    38f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8b 89       	ldd	r24, Y+19	; 0x13
    38f8:	9c 89       	ldd	r25, Y+20	; 0x14
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <HLCD_vInit+0x2a2>
    38fe:	14 c0       	rjmp	.+40     	; 0x3928 <HLCD_vInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	6d 89       	ldd	r22, Y+21	; 0x15
    3902:	7e 89       	ldd	r23, Y+22	; 0x16
    3904:	8f 89       	ldd	r24, Y+23	; 0x17
    3906:	98 8d       	ldd	r25, Y+24	; 0x18
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9c 8b       	std	Y+20, r25	; 0x14
    3912:	8b 8b       	std	Y+19, r24	; 0x13
    3914:	8b 89       	ldd	r24, Y+19	; 0x13
    3916:	9c 89       	ldd	r25, Y+20	; 0x14
    3918:	98 8b       	std	Y+16, r25	; 0x10
    391a:	8f 87       	std	Y+15, r24	; 0x0f
    391c:	8f 85       	ldd	r24, Y+15	; 0x0f
    391e:	98 89       	ldd	r25, Y+16	; 0x10
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <HLCD_vInit+0x2ea>
    3924:	98 8b       	std	Y+16, r25	; 0x10
    3926:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_vSendCommand(0b00000001);
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	a0 ea       	ldi	r26, 0xA0	; 160
    3934:	b1 e4       	ldi	r27, 0x41	; 65
    3936:	8b 87       	std	Y+11, r24	; 0x0b
    3938:	9c 87       	std	Y+12, r25	; 0x0c
    393a:	ad 87       	std	Y+13, r26	; 0x0d
    393c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3940:	7c 85       	ldd	r23, Y+12	; 0x0c
    3942:	8d 85       	ldd	r24, Y+13	; 0x0d
    3944:	9e 85       	ldd	r25, Y+14	; 0x0e
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	4a ef       	ldi	r20, 0xFA	; 250
    394c:	54 e4       	ldi	r21, 0x44	; 68
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	8f 83       	std	Y+7, r24	; 0x07
    3958:	98 87       	std	Y+8, r25	; 0x08
    395a:	a9 87       	std	Y+9, r26	; 0x09
    395c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    395e:	6f 81       	ldd	r22, Y+7	; 0x07
    3960:	78 85       	ldd	r23, Y+8	; 0x08
    3962:	89 85       	ldd	r24, Y+9	; 0x09
    3964:	9a 85       	ldd	r25, Y+10	; 0x0a
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	40 e8       	ldi	r20, 0x80	; 128
    396c:	5f e3       	ldi	r21, 0x3F	; 63
    396e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3972:	88 23       	and	r24, r24
    3974:	2c f4       	brge	.+10     	; 0x3980 <HLCD_vInit+0x34a>
		__ticks = 1;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	9e 83       	std	Y+6, r25	; 0x06
    397c:	8d 83       	std	Y+5, r24	; 0x05
    397e:	3f c0       	rjmp	.+126    	; 0x39fe <HLCD_vInit+0x3c8>
	else if (__tmp > 65535)
    3980:	6f 81       	ldd	r22, Y+7	; 0x07
    3982:	78 85       	ldd	r23, Y+8	; 0x08
    3984:	89 85       	ldd	r24, Y+9	; 0x09
    3986:	9a 85       	ldd	r25, Y+10	; 0x0a
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	3f ef       	ldi	r19, 0xFF	; 255
    398c:	4f e7       	ldi	r20, 0x7F	; 127
    398e:	57 e4       	ldi	r21, 0x47	; 71
    3990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3994:	18 16       	cp	r1, r24
    3996:	4c f5       	brge	.+82     	; 0x39ea <HLCD_vInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3998:	6b 85       	ldd	r22, Y+11	; 0x0b
    399a:	7c 85       	ldd	r23, Y+12	; 0x0c
    399c:	8d 85       	ldd	r24, Y+13	; 0x0d
    399e:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	40 e2       	ldi	r20, 0x20	; 32
    39a6:	51 e4       	ldi	r21, 0x41	; 65
    39a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	bc 01       	movw	r22, r24
    39b2:	cd 01       	movw	r24, r26
    39b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	9e 83       	std	Y+6, r25	; 0x06
    39be:	8d 83       	std	Y+5, r24	; 0x05
    39c0:	0f c0       	rjmp	.+30     	; 0x39e0 <HLCD_vInit+0x3aa>
    39c2:	88 ec       	ldi	r24, 0xC8	; 200
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	9c 83       	std	Y+4, r25	; 0x04
    39c8:	8b 83       	std	Y+3, r24	; 0x03
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	9c 81       	ldd	r25, Y+4	; 0x04
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <HLCD_vInit+0x398>
    39d2:	9c 83       	std	Y+4, r25	; 0x04
    39d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d6:	8d 81       	ldd	r24, Y+5	; 0x05
    39d8:	9e 81       	ldd	r25, Y+6	; 0x06
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	9e 83       	std	Y+6, r25	; 0x06
    39de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e0:	8d 81       	ldd	r24, Y+5	; 0x05
    39e2:	9e 81       	ldd	r25, Y+6	; 0x06
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	69 f7       	brne	.-38     	; 0x39c2 <HLCD_vInit+0x38c>
    39e8:	14 c0       	rjmp	.+40     	; 0x3a12 <HLCD_vInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ea:	6f 81       	ldd	r22, Y+7	; 0x07
    39ec:	78 85       	ldd	r23, Y+8	; 0x08
    39ee:	89 85       	ldd	r24, Y+9	; 0x09
    39f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	9e 83       	std	Y+6, r25	; 0x06
    39fc:	8d 83       	std	Y+5, r24	; 0x05
    39fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3a00:	9e 81       	ldd	r25, Y+6	; 0x06
    3a02:	9a 83       	std	Y+2, r25	; 0x02
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <HLCD_vInit+0x3d4>
    3a0e:	9a 83       	std	Y+2, r25	; 0x02
    3a10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	HLCD_vSendCommand(0b00000110);
    3a12:	86 e0       	ldi	r24, 0x06	; 6
    3a14:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
}
    3a18:	e8 96       	adiw	r28, 0x38	; 56
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	f8 94       	cli
    3a1e:	de bf       	out	0x3e, r29	; 62
    3a20:	0f be       	out	0x3f, r0	; 63
    3a22:	cd bf       	out	0x3d, r28	; 61
    3a24:	cf 91       	pop	r28
    3a26:	df 91       	pop	r29
    3a28:	08 95       	ret

00003a2a <HLCD_vSendString>:



void HLCD_vSendString(char *StringData)
{
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <HLCD_vSendString+0x6>
    3a30:	0f 92       	push	r0
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	9b 83       	std	Y+3, r25	; 0x03
    3a38:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator=0;
    3a3a:	19 82       	std	Y+1, r1	; 0x01
    3a3c:	0e c0       	rjmp	.+28     	; 0x3a5a <HLCD_vSendString+0x30>
	while(StringData[Local_u8Iterator]!='\0')
	{
		HLCD_vSendChar(StringData[Local_u8Iterator]);
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	28 2f       	mov	r18, r24
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	9b 81       	ldd	r25, Y+3	; 0x03
    3a48:	fc 01       	movw	r30, r24
    3a4a:	e2 0f       	add	r30, r18
    3a4c:	f3 1f       	adc	r31, r19
    3a4e:	80 81       	ld	r24, Z
    3a50:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <HLCD_vSendChar>
		Local_u8Iterator++;
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
    3a56:	8f 5f       	subi	r24, 0xFF	; 255
    3a58:	89 83       	std	Y+1, r24	; 0x01


void HLCD_vSendString(char *StringData)
{
	u8 Local_u8Iterator=0;
	while(StringData[Local_u8Iterator]!='\0')
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	28 2f       	mov	r18, r24
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	8a 81       	ldd	r24, Y+2	; 0x02
    3a62:	9b 81       	ldd	r25, Y+3	; 0x03
    3a64:	fc 01       	movw	r30, r24
    3a66:	e2 0f       	add	r30, r18
    3a68:	f3 1f       	adc	r31, r19
    3a6a:	80 81       	ld	r24, Z
    3a6c:	88 23       	and	r24, r24
    3a6e:	39 f7       	brne	.-50     	; 0x3a3e <HLCD_vSendString+0x14>
	{
		HLCD_vSendChar(StringData[Local_u8Iterator]);
		Local_u8Iterator++;
	}
}
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	0f 90       	pop	r0
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	08 95       	ret

00003a7c <HLCD_vSetCursor>:

void HLCD_vSetCursor(u8 Copy_u8X, u8 Copy_u8Y)
{
    3a7c:	df 93       	push	r29
    3a7e:	cf 93       	push	r28
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <HLCD_vSetCursor+0x6>
    3a82:	00 d0       	rcall	.+0      	; 0x3a84 <HLCD_vSetCursor+0x8>
    3a84:	0f 92       	push	r0
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	8a 83       	std	Y+2, r24	; 0x02
    3a8c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Position = 0;
    3a8e:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8Y)
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	28 2f       	mov	r18, r24
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	3d 83       	std	Y+5, r19	; 0x05
    3a98:	2c 83       	std	Y+4, r18	; 0x04
    3a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	31 f0       	breq	.+12     	; 0x3aae <HLCD_vSetCursor+0x32>
    3aa2:	2c 81       	ldd	r18, Y+4	; 0x04
    3aa4:	3d 81       	ldd	r19, Y+5	; 0x05
    3aa6:	21 30       	cpi	r18, 0x01	; 1
    3aa8:	31 05       	cpc	r19, r1
    3aaa:	21 f0       	breq	.+8      	; 0x3ab4 <HLCD_vSetCursor+0x38>
    3aac:	06 c0       	rjmp	.+12     	; 0x3aba <HLCD_vSetCursor+0x3e>
    {
        case 0:
            Local_u8Position = Copy_u8X + LINE1_BASE;
    3aae:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab0:	89 83       	std	Y+1, r24	; 0x01
    3ab2:	03 c0       	rjmp	.+6      	; 0x3aba <HLCD_vSetCursor+0x3e>
            break;
        case 1:
            Local_u8Position = Copy_u8X + LINE2_BASE;
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab6:	80 5c       	subi	r24, 0xC0	; 192
    3ab8:	89 83       	std	Y+1, r24	; 0x01
            break;
    }

    HLCD_vSendCommand(Local_u8Position + LCD_DDRAM_START);
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	80 58       	subi	r24, 0x80	; 128
    3abe:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
}
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	08 95       	ret

00003ad2 <HLCD_vSendSpecialCharecter>:

void HLCD_vSendSpecialCharecter(u8 Copy_u8BlockNum,u8 *Pu8ArrayPattern,u8 Copy_u8X,u8 Copy_u8Y)
{
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	27 97       	sbiw	r28, 0x07	; 7
    3adc:	0f b6       	in	r0, 0x3f	; 63
    3ade:	f8 94       	cli
    3ae0:	de bf       	out	0x3e, r29	; 62
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	cd bf       	out	0x3d, r28	; 61
    3ae6:	8b 83       	std	Y+3, r24	; 0x03
    3ae8:	7d 83       	std	Y+5, r23	; 0x05
    3aea:	6c 83       	std	Y+4, r22	; 0x04
    3aec:	4e 83       	std	Y+6, r20	; 0x06
    3aee:	2f 83       	std	Y+7, r18	; 0x07

	u8 Local_u8Position=Copy_u8BlockNum*8;
    3af0:	8b 81       	ldd	r24, Y+3	; 0x03
    3af2:	88 2f       	mov	r24, r24
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	88 0f       	add	r24, r24
    3af8:	99 1f       	adc	r25, r25
    3afa:	88 0f       	add	r24, r24
    3afc:	99 1f       	adc	r25, r25
    3afe:	88 0f       	add	r24, r24
    3b00:	99 1f       	adc	r25, r25
    3b02:	8a 83       	std	Y+2, r24	; 0x02
	HLCD_vSendCommand(Local_u8Position+LCD_CGRAM_START);
    3b04:	8a 81       	ldd	r24, Y+2	; 0x02
    3b06:	80 5c       	subi	r24, 0xC0	; 192
    3b08:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>

	for(u8 i=0;i<8;i++)
    3b0c:	19 82       	std	Y+1, r1	; 0x01
    3b0e:	0e c0       	rjmp	.+28     	; 0x3b2c <HLCD_vSendSpecialCharecter+0x5a>
	{
		HLCD_vSendChar(Pu8ArrayPattern[i]);
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	28 2f       	mov	r18, r24
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	8c 81       	ldd	r24, Y+4	; 0x04
    3b18:	9d 81       	ldd	r25, Y+5	; 0x05
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	e2 0f       	add	r30, r18
    3b1e:	f3 1f       	adc	r31, r19
    3b20:	80 81       	ld	r24, Z
    3b22:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <HLCD_vSendChar>
{

	u8 Local_u8Position=Copy_u8BlockNum*8;
	HLCD_vSendCommand(Local_u8Position+LCD_CGRAM_START);

	for(u8 i=0;i<8;i++)
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	8f 5f       	subi	r24, 0xFF	; 255
    3b2a:	89 83       	std	Y+1, r24	; 0x01
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	88 30       	cpi	r24, 0x08	; 8
    3b30:	78 f3       	brcs	.-34     	; 0x3b10 <HLCD_vSendSpecialCharecter+0x3e>
	{
		HLCD_vSendChar(Pu8ArrayPattern[i]);
	}

	HLCD_vSetCursor(Copy_u8X,Copy_u8Y);
    3b32:	8e 81       	ldd	r24, Y+6	; 0x06
    3b34:	6f 81       	ldd	r22, Y+7	; 0x07
    3b36:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <HLCD_vSetCursor>
	HLCD_vSendChar(Copy_u8BlockNum);
    3b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <HLCD_vSendChar>
}
    3b40:	27 96       	adiw	r28, 0x07	; 7
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	cf 91       	pop	r28
    3b4e:	df 91       	pop	r29
    3b50:	08 95       	ret

00003b52 <HLCD_vSendNumber>:


void HLCD_vSendNumber(u16 num) {
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	28 97       	sbiw	r28, 0x08	; 8
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	98 87       	std	Y+8, r25	; 0x08
    3b68:	8f 83       	std	Y+7, r24	; 0x07
    if (num == 0) {
    3b6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b6c:	98 85       	ldd	r25, Y+8	; 0x08
    3b6e:	00 97       	sbiw	r24, 0x00	; 0
    3b70:	21 f4       	brne	.+8      	; 0x3b7a <HLCD_vSendNumber+0x28>
        HLCD_vSendChar('0');
    3b72:	80 e3       	ldi	r24, 0x30	; 48
    3b74:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <HLCD_vSendChar>
    3b78:	3a c0       	rjmp	.+116    	; 0x3bee <HLCD_vSendNumber+0x9c>
        return;
    }

    u8 digits[5];  // enough for up to 65535
    s8 i = 0;
    3b7a:	19 82       	std	Y+1, r1	; 0x01
    3b7c:	20 c0       	rjmp	.+64     	; 0x3bbe <HLCD_vSendNumber+0x6c>

    while (num > 0) {
        digits[i++] = (num % 10) + '0';
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	e8 2f       	mov	r30, r24
    3b82:	ff 27       	eor	r31, r31
    3b84:	e7 fd       	sbrc	r30, 7
    3b86:	f0 95       	com	r31
    3b88:	8f 81       	ldd	r24, Y+7	; 0x07
    3b8a:	98 85       	ldd	r25, Y+8	; 0x08
    3b8c:	2a e0       	ldi	r18, 0x0A	; 10
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	b9 01       	movw	r22, r18
    3b92:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__udivmodhi4>
    3b96:	28 2f       	mov	r18, r24
    3b98:	20 5d       	subi	r18, 0xD0	; 208
    3b9a:	ce 01       	movw	r24, r28
    3b9c:	02 96       	adiw	r24, 0x02	; 2
    3b9e:	e8 0f       	add	r30, r24
    3ba0:	f9 1f       	adc	r31, r25
    3ba2:	20 83       	st	Z, r18
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	8f 5f       	subi	r24, 0xFF	; 255
    3ba8:	89 83       	std	Y+1, r24	; 0x01
        num /= 10;
    3baa:	8f 81       	ldd	r24, Y+7	; 0x07
    3bac:	98 85       	ldd	r25, Y+8	; 0x08
    3bae:	2a e0       	ldi	r18, 0x0A	; 10
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	b9 01       	movw	r22, r18
    3bb4:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__udivmodhi4>
    3bb8:	cb 01       	movw	r24, r22
    3bba:	98 87       	std	Y+8, r25	; 0x08
    3bbc:	8f 83       	std	Y+7, r24	; 0x07
    }

    u8 digits[5];  // enough for up to 65535
    s8 i = 0;

    while (num > 0) {
    3bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    3bc0:	98 85       	ldd	r25, Y+8	; 0x08
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	e1 f6       	brne	.-72     	; 0x3b7e <HLCD_vSendNumber+0x2c>
    3bc6:	0d c0       	rjmp	.+26     	; 0x3be2 <HLCD_vSendNumber+0x90>
        num /= 10;
    }

    // print digits in reverse
    while (--i >= 0) {
        HLCD_vSendChar(digits[i]);
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	28 2f       	mov	r18, r24
    3bcc:	33 27       	eor	r19, r19
    3bce:	27 fd       	sbrc	r18, 7
    3bd0:	30 95       	com	r19
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	02 96       	adiw	r24, 0x02	; 2
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	e2 0f       	add	r30, r18
    3bda:	f3 1f       	adc	r31, r19
    3bdc:	80 81       	ld	r24, Z
    3bde:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <HLCD_vSendChar>
        digits[i++] = (num % 10) + '0';
        num /= 10;
    }

    // print digits in reverse
    while (--i >= 0) {
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	81 50       	subi	r24, 0x01	; 1
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	88 23       	and	r24, r24
    3bec:	6c f7       	brge	.-38     	; 0x3bc8 <HLCD_vSendNumber+0x76>
        HLCD_vSendChar(digits[i]);
    }
}
    3bee:	28 96       	adiw	r28, 0x08	; 8
    3bf0:	0f b6       	in	r0, 0x3f	; 63
    3bf2:	f8 94       	cli
    3bf4:	de bf       	out	0x3e, r29	; 62
    3bf6:	0f be       	out	0x3f, r0	; 63
    3bf8:	cd bf       	out	0x3d, r28	; 61
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <HKEYPAD_vInit>:
 *      Author: anaal
 */
#include "KEYPAD_int.h"
#include "KEYPAD_cfg.h"

void HKEYPAD_vInit() {
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62

	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_C1, DIO_PIN_DIRECTION_OUTPUT);
    3c08:	82 e0       	ldi	r24, 0x02	; 2
    3c0a:	60 e0       	ldi	r22, 0x00	; 0
    3c0c:	41 e0       	ldi	r20, 0x01	; 1
    3c0e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_C2, DIO_PIN_DIRECTION_OUTPUT);
    3c12:	82 e0       	ldi	r24, 0x02	; 2
    3c14:	61 e0       	ldi	r22, 0x01	; 1
    3c16:	41 e0       	ldi	r20, 0x01	; 1
    3c18:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_C3, DIO_PIN_DIRECTION_OUTPUT);
    3c1c:	82 e0       	ldi	r24, 0x02	; 2
    3c1e:	62 e0       	ldi	r22, 0x02	; 2
    3c20:	41 e0       	ldi	r20, 0x01	; 1
    3c22:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_C4, DIO_PIN_DIRECTION_OUTPUT);
    3c26:	82 e0       	ldi	r24, 0x02	; 2
    3c28:	63 e0       	ldi	r22, 0x03	; 3
    3c2a:	41 e0       	ldi	r20, 0x01	; 1
    3c2c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>

	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_C1, DIO_PIN_HIGH);
    3c30:	82 e0       	ldi	r24, 0x02	; 2
    3c32:	60 e0       	ldi	r22, 0x00	; 0
    3c34:	41 e0       	ldi	r20, 0x01	; 1
    3c36:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_C2, DIO_PIN_HIGH);
    3c3a:	82 e0       	ldi	r24, 0x02	; 2
    3c3c:	61 e0       	ldi	r22, 0x01	; 1
    3c3e:	41 e0       	ldi	r20, 0x01	; 1
    3c40:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_C3, DIO_PIN_HIGH);
    3c44:	82 e0       	ldi	r24, 0x02	; 2
    3c46:	62 e0       	ldi	r22, 0x02	; 2
    3c48:	41 e0       	ldi	r20, 0x01	; 1
    3c4a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_C4, DIO_PIN_HIGH);
    3c4e:	82 e0       	ldi	r24, 0x02	; 2
    3c50:	63 e0       	ldi	r22, 0x03	; 3
    3c52:	41 e0       	ldi	r20, 0x01	; 1
    3c54:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>

	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_R1, DIO_PIN_DIRECTION_INPUT);
    3c58:	82 e0       	ldi	r24, 0x02	; 2
    3c5a:	64 e0       	ldi	r22, 0x04	; 4
    3c5c:	40 e0       	ldi	r20, 0x00	; 0
    3c5e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_R2, DIO_PIN_DIRECTION_INPUT);
    3c62:	82 e0       	ldi	r24, 0x02	; 2
    3c64:	65 e0       	ldi	r22, 0x05	; 5
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_R3, DIO_PIN_DIRECTION_INPUT);
    3c6c:	82 e0       	ldi	r24, 0x02	; 2
    3c6e:	66 e0       	ldi	r22, 0x06	; 6
    3c70:	40 e0       	ldi	r20, 0x00	; 0
    3c72:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_R4, DIO_PIN_DIRECTION_INPUT);
    3c76:	82 e0       	ldi	r24, 0x02	; 2
    3c78:	67 e0       	ldi	r22, 0x07	; 7
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>

	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_R1, DIO_PIN_HIGH);
    3c80:	82 e0       	ldi	r24, 0x02	; 2
    3c82:	64 e0       	ldi	r22, 0x04	; 4
    3c84:	41 e0       	ldi	r20, 0x01	; 1
    3c86:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_R2, DIO_PIN_HIGH);
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	65 e0       	ldi	r22, 0x05	; 5
    3c8e:	41 e0       	ldi	r20, 0x01	; 1
    3c90:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_R3, DIO_PIN_HIGH);
    3c94:	82 e0       	ldi	r24, 0x02	; 2
    3c96:	66 e0       	ldi	r22, 0x06	; 6
    3c98:	41 e0       	ldi	r20, 0x01	; 1
    3c9a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_R4, DIO_PIN_HIGH);
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	67 e0       	ldi	r22, 0x07	; 7
    3ca2:	41 e0       	ldi	r20, 0x01	; 1
    3ca4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>

}
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <HKEYPAD_u8GetChar>:



u8 HKEYPAD_u8GetChar() {
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
    3cb6:	62 97       	sbiw	r28, 0x12	; 18
    3cb8:	0f b6       	in	r0, 0x3f	; 63
    3cba:	f8 94       	cli
    3cbc:	de bf       	out	0x3e, r29	; 62
    3cbe:	0f be       	out	0x3f, r0	; 63
    3cc0:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Button = RELEASED_BUTTON;
    3cc2:	8f ef       	ldi	r24, 0xFF	; 255
    3cc4:	8a 8b       	std	Y+18, r24	; 0x12
	static u8 Local_u8ColKeyPad[MAX_COL_SIZE] = { KEYPAD_C1, KEYPAD_C2,
	KEYPAD_C3, KEYPAD_C4 };
	static u8 Local_u8RowKeyPad[MAX_ROW_SIZE] = { KEYPAD_R1, KEYPAD_R2,
	KEYPAD_R3, KEYPAD_R4 };

	for (u8 Local_u8ColIter = 0; Local_u8ColIter < MAX_COL_SIZE;
    3cc6:	18 8a       	std	Y+16, r1	; 0x10
    3cc8:	d7 c0       	rjmp	.+430    	; 0x3e78 <HKEYPAD_u8GetChar+0x1ca>
			Local_u8ColIter++) {
		MDIO_vSetPinValue(KEYPAD_PORT, Local_u8ColKeyPad[Local_u8ColIter],
    3cca:	88 89       	ldd	r24, Y+16	; 0x10
    3ccc:	88 2f       	mov	r24, r24
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	e3 55       	subi	r30, 0x53	; 83
    3cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd6:	90 81       	ld	r25, Z
    3cd8:	82 e0       	ldi	r24, 0x02	; 2
    3cda:	69 2f       	mov	r22, r25
    3cdc:	40 e0       	ldi	r20, 0x00	; 0
    3cde:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
				DIO_PIN_LOW);
		for (u8 Local_u8RowIter = 0; Local_u8RowIter < MAX_ROW_SIZE;
    3ce2:	1f 86       	std	Y+15, r1	; 0x0f
    3ce4:	b6 c0       	rjmp	.+364    	; 0x3e52 <HKEYPAD_u8GetChar+0x1a4>
				Local_u8RowIter++) {
			Local_u8PinState = MDIO_u8GetPinValue(KEYPAD_PORT,
    3ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ce8:	88 2f       	mov	r24, r24
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	fc 01       	movw	r30, r24
    3cee:	e7 55       	subi	r30, 0x57	; 87
    3cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf2:	90 81       	ld	r25, Z
    3cf4:	82 e0       	ldi	r24, 0x02	; 2
    3cf6:	69 2f       	mov	r22, r25
    3cf8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <MDIO_u8GetPinValue>
    3cfc:	89 8b       	std	Y+17, r24	; 0x11
					Local_u8RowKeyPad[Local_u8RowIter]);
			if (Local_u8PinState == DIO_PIN_LOW) {
    3cfe:	89 89       	ldd	r24, Y+17	; 0x11
    3d00:	88 23       	and	r24, r24
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <HKEYPAD_u8GetChar+0x58>
    3d04:	a3 c0       	rjmp	.+326    	; 0x3e4c <HKEYPAD_u8GetChar+0x19e>
				Local_u8PinState = MDIO_u8GetPinValue(KEYPAD_PORT,
    3d06:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d08:	88 2f       	mov	r24, r24
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	e7 55       	subi	r30, 0x57	; 87
    3d10:	fe 4f       	sbci	r31, 0xFE	; 254
    3d12:	90 81       	ld	r25, Z
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	69 2f       	mov	r22, r25
    3d18:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <MDIO_u8GetPinValue>
    3d1c:	89 8b       	std	Y+17, r24	; 0x11
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	a8 e4       	ldi	r26, 0x48	; 72
    3d24:	b2 e4       	ldi	r27, 0x42	; 66
    3d26:	8b 87       	std	Y+11, r24	; 0x0b
    3d28:	9c 87       	std	Y+12, r25	; 0x0c
    3d2a:	ad 87       	std	Y+13, r26	; 0x0d
    3d2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a ef       	ldi	r20, 0xFA	; 250
    3d3c:	54 e4       	ldi	r21, 0x44	; 68
    3d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	8f 83       	std	Y+7, r24	; 0x07
    3d48:	98 87       	std	Y+8, r25	; 0x08
    3d4a:	a9 87       	std	Y+9, r26	; 0x09
    3d4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d50:	78 85       	ldd	r23, Y+8	; 0x08
    3d52:	89 85       	ldd	r24, Y+9	; 0x09
    3d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e8       	ldi	r20, 0x80	; 128
    3d5c:	5f e3       	ldi	r21, 0x3F	; 63
    3d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d62:	88 23       	and	r24, r24
    3d64:	2c f4       	brge	.+10     	; 0x3d70 <HKEYPAD_u8GetChar+0xc2>
		__ticks = 1;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	9e 83       	std	Y+6, r25	; 0x06
    3d6c:	8d 83       	std	Y+5, r24	; 0x05
    3d6e:	3f c0       	rjmp	.+126    	; 0x3dee <HKEYPAD_u8GetChar+0x140>
	else if (__tmp > 65535)
    3d70:	6f 81       	ldd	r22, Y+7	; 0x07
    3d72:	78 85       	ldd	r23, Y+8	; 0x08
    3d74:	89 85       	ldd	r24, Y+9	; 0x09
    3d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	3f ef       	ldi	r19, 0xFF	; 255
    3d7c:	4f e7       	ldi	r20, 0x7F	; 127
    3d7e:	57 e4       	ldi	r21, 0x47	; 71
    3d80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d84:	18 16       	cp	r1, r24
    3d86:	4c f5       	brge	.+82     	; 0x3dda <HKEYPAD_u8GetChar+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	40 e2       	ldi	r20, 0x20	; 32
    3d96:	51 e4       	ldi	r21, 0x41	; 65
    3d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	bc 01       	movw	r22, r24
    3da2:	cd 01       	movw	r24, r26
    3da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	9e 83       	std	Y+6, r25	; 0x06
    3dae:	8d 83       	std	Y+5, r24	; 0x05
    3db0:	0f c0       	rjmp	.+30     	; 0x3dd0 <HKEYPAD_u8GetChar+0x122>
    3db2:	88 ec       	ldi	r24, 0xC8	; 200
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	9c 83       	std	Y+4, r25	; 0x04
    3db8:	8b 83       	std	Y+3, r24	; 0x03
    3dba:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <HKEYPAD_u8GetChar+0x110>
    3dc2:	9c 83       	std	Y+4, r25	; 0x04
    3dc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dca:	01 97       	sbiw	r24, 0x01	; 1
    3dcc:	9e 83       	std	Y+6, r25	; 0x06
    3dce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd4:	00 97       	sbiw	r24, 0x00	; 0
    3dd6:	69 f7       	brne	.-38     	; 0x3db2 <HKEYPAD_u8GetChar+0x104>
    3dd8:	14 c0       	rjmp	.+40     	; 0x3e02 <HKEYPAD_u8GetChar+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dda:	6f 81       	ldd	r22, Y+7	; 0x07
    3ddc:	78 85       	ldd	r23, Y+8	; 0x08
    3dde:	89 85       	ldd	r24, Y+9	; 0x09
    3de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	9e 83       	std	Y+6, r25	; 0x06
    3dec:	8d 83       	std	Y+5, r24	; 0x05
    3dee:	8d 81       	ldd	r24, Y+5	; 0x05
    3df0:	9e 81       	ldd	r25, Y+6	; 0x06
    3df2:	9a 83       	std	Y+2, r25	; 0x02
    3df4:	89 83       	std	Y+1, r24	; 0x01
    3df6:	89 81       	ldd	r24, Y+1	; 0x01
    3df8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dfa:	01 97       	sbiw	r24, 0x01	; 1
    3dfc:	f1 f7       	brne	.-4      	; 0x3dfa <HKEYPAD_u8GetChar+0x14c>
    3dfe:	9a 83       	std	Y+2, r25	; 0x02
    3e00:	89 83       	std	Y+1, r24	; 0x01
						Local_u8RowKeyPad[Local_u8RowIter]);
				_delay_ms(50);
				if (Local_u8PinState == DIO_PIN_LOW) {
    3e02:	89 89       	ldd	r24, Y+17	; 0x11
    3e04:	88 23       	and	r24, r24
    3e06:	11 f5       	brne	.+68     	; 0x3e4c <HKEYPAD_u8GetChar+0x19e>
					Local_u8Button = KPD_ARR[Local_u8RowIter][Local_u8ColIter];
    3e08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e0a:	48 2f       	mov	r20, r24
    3e0c:	50 e0       	ldi	r21, 0x00	; 0
    3e0e:	88 89       	ldd	r24, Y+16	; 0x10
    3e10:	28 2f       	mov	r18, r24
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	ca 01       	movw	r24, r20
    3e16:	88 0f       	add	r24, r24
    3e18:	99 1f       	adc	r25, r25
    3e1a:	88 0f       	add	r24, r24
    3e1c:	99 1f       	adc	r25, r25
    3e1e:	82 0f       	add	r24, r18
    3e20:	93 1f       	adc	r25, r19
    3e22:	fc 01       	movw	r30, r24
    3e24:	ef 54       	subi	r30, 0x4F	; 79
    3e26:	fe 4f       	sbci	r31, 0xFE	; 254
    3e28:	80 81       	ld	r24, Z
    3e2a:	8a 8b       	std	Y+18, r24	; 0x12
    3e2c:	0c c0       	rjmp	.+24     	; 0x3e46 <HKEYPAD_u8GetChar+0x198>
					while (Local_u8PinState == DIO_PIN_LOW) {
						Local_u8PinState = MDIO_u8GetPinValue(KEYPAD_PORT,
    3e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e30:	88 2f       	mov	r24, r24
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	fc 01       	movw	r30, r24
    3e36:	e7 55       	subi	r30, 0x57	; 87
    3e38:	fe 4f       	sbci	r31, 0xFE	; 254
    3e3a:	90 81       	ld	r25, Z
    3e3c:	82 e0       	ldi	r24, 0x02	; 2
    3e3e:	69 2f       	mov	r22, r25
    3e40:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <MDIO_u8GetPinValue>
    3e44:	89 8b       	std	Y+17, r24	; 0x11
				Local_u8PinState = MDIO_u8GetPinValue(KEYPAD_PORT,
						Local_u8RowKeyPad[Local_u8RowIter]);
				_delay_ms(50);
				if (Local_u8PinState == DIO_PIN_LOW) {
					Local_u8Button = KPD_ARR[Local_u8RowIter][Local_u8ColIter];
					while (Local_u8PinState == DIO_PIN_LOW) {
    3e46:	89 89       	ldd	r24, Y+17	; 0x11
    3e48:	88 23       	and	r24, r24
    3e4a:	89 f3       	breq	.-30     	; 0x3e2e <HKEYPAD_u8GetChar+0x180>
	for (u8 Local_u8ColIter = 0; Local_u8ColIter < MAX_COL_SIZE;
			Local_u8ColIter++) {
		MDIO_vSetPinValue(KEYPAD_PORT, Local_u8ColKeyPad[Local_u8ColIter],
				DIO_PIN_LOW);
		for (u8 Local_u8RowIter = 0; Local_u8RowIter < MAX_ROW_SIZE;
				Local_u8RowIter++) {
    3e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e4e:	8f 5f       	subi	r24, 0xFF	; 255
    3e50:	8f 87       	std	Y+15, r24	; 0x0f

	for (u8 Local_u8ColIter = 0; Local_u8ColIter < MAX_COL_SIZE;
			Local_u8ColIter++) {
		MDIO_vSetPinValue(KEYPAD_PORT, Local_u8ColKeyPad[Local_u8ColIter],
				DIO_PIN_LOW);
		for (u8 Local_u8RowIter = 0; Local_u8RowIter < MAX_ROW_SIZE;
    3e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e54:	84 30       	cpi	r24, 0x04	; 4
    3e56:	08 f4       	brcc	.+2      	; 0x3e5a <HKEYPAD_u8GetChar+0x1ac>
    3e58:	46 cf       	rjmp	.-372    	; 0x3ce6 <HKEYPAD_u8GetChar+0x38>
				}
			}

		}

		MDIO_vSetPinValue(KEYPAD_PORT, Local_u8ColKeyPad[Local_u8ColIter],
    3e5a:	88 89       	ldd	r24, Y+16	; 0x10
    3e5c:	88 2f       	mov	r24, r24
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	fc 01       	movw	r30, r24
    3e62:	e3 55       	subi	r30, 0x53	; 83
    3e64:	fe 4f       	sbci	r31, 0xFE	; 254
    3e66:	90 81       	ld	r25, Z
    3e68:	82 e0       	ldi	r24, 0x02	; 2
    3e6a:	69 2f       	mov	r22, r25
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	KEYPAD_C3, KEYPAD_C4 };
	static u8 Local_u8RowKeyPad[MAX_ROW_SIZE] = { KEYPAD_R1, KEYPAD_R2,
	KEYPAD_R3, KEYPAD_R4 };

	for (u8 Local_u8ColIter = 0; Local_u8ColIter < MAX_COL_SIZE;
			Local_u8ColIter++) {
    3e72:	88 89       	ldd	r24, Y+16	; 0x10
    3e74:	8f 5f       	subi	r24, 0xFF	; 255
    3e76:	88 8b       	std	Y+16, r24	; 0x10
	static u8 Local_u8ColKeyPad[MAX_COL_SIZE] = { KEYPAD_C1, KEYPAD_C2,
	KEYPAD_C3, KEYPAD_C4 };
	static u8 Local_u8RowKeyPad[MAX_ROW_SIZE] = { KEYPAD_R1, KEYPAD_R2,
	KEYPAD_R3, KEYPAD_R4 };

	for (u8 Local_u8ColIter = 0; Local_u8ColIter < MAX_COL_SIZE;
    3e78:	88 89       	ldd	r24, Y+16	; 0x10
    3e7a:	84 30       	cpi	r24, 0x04	; 4
    3e7c:	08 f4       	brcc	.+2      	; 0x3e80 <HKEYPAD_u8GetChar+0x1d2>
    3e7e:	25 cf       	rjmp	.-438    	; 0x3cca <HKEYPAD_u8GetChar+0x1c>
		}

		MDIO_vSetPinValue(KEYPAD_PORT, Local_u8ColKeyPad[Local_u8ColIter],
		DIO_PIN_HIGH);
	}
	return Local_u8Button;
    3e80:	8a 89       	ldd	r24, Y+18	; 0x12

}
    3e82:	62 96       	adiw	r28, 0x12	; 18
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	cf 91       	pop	r28
    3e90:	df 91       	pop	r29
    3e92:	08 95       	ret

00003e94 <HKEYPAD_u8GetCharWait>:

u8 HKEYPAD_u8GetCharWait() {
    3e94:	df 93       	push	r29
    3e96:	cf 93       	push	r28
    3e98:	0f 92       	push	r0
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Button;
	do {
		Local_u8Button = HKEYPAD_u8GetChar();
    3e9e:	0e 94 57 1e 	call	0x3cae	; 0x3cae <HKEYPAD_u8GetChar>
    3ea2:	89 83       	std	Y+1, r24	; 0x01
	} while (Local_u8Button == RELEASED_BUTTON);
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ea8:	d1 f3       	breq	.-12     	; 0x3e9e <HKEYPAD_u8GetCharWait+0xa>
	return Local_u8Button;
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    3eac:	0f 90       	pop	r0
    3eae:	cf 91       	pop	r28
    3eb0:	df 91       	pop	r29
    3eb2:	08 95       	ret

00003eb4 <SetServo1Angle>:





void SetServo1Angle(u8 angle) {
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	df 93       	push	r29
    3eba:	cf 93       	push	r28
    3ebc:	0f 92       	push	r0
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    if (angle > 180) angle = 180;
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	85 3b       	cpi	r24, 0xB5	; 181
    3ec8:	10 f0       	brcs	.+4      	; 0x3ece <SetServo1Angle+0x1a>
    3eca:	84 eb       	ldi	r24, 0xB4	; 180
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = ((angle * 1000UL) / 180) + 1000;
    3ece:	0a e4       	ldi	r16, 0x4A	; 74
    3ed0:	10 e0       	ldi	r17, 0x00	; 0
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	88 2f       	mov	r24, r24
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	a0 e0       	ldi	r26, 0x00	; 0
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	28 ee       	ldi	r18, 0xE8	; 232
    3ede:	33 e0       	ldi	r19, 0x03	; 3
    3ee0:	40 e0       	ldi	r20, 0x00	; 0
    3ee2:	50 e0       	ldi	r21, 0x00	; 0
    3ee4:	bc 01       	movw	r22, r24
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	0e 94 3d 21 	call	0x427a	; 0x427a <__mulsi3>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	24 eb       	ldi	r18, 0xB4	; 180
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e0       	ldi	r20, 0x00	; 0
    3ef6:	50 e0       	ldi	r21, 0x00	; 0
    3ef8:	bc 01       	movw	r22, r24
    3efa:	cd 01       	movw	r24, r26
    3efc:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__udivmodsi4>
    3f00:	da 01       	movw	r26, r20
    3f02:	c9 01       	movw	r24, r18
    3f04:	88 51       	subi	r24, 0x18	; 24
    3f06:	9c 4f       	sbci	r25, 0xFC	; 252
    3f08:	f8 01       	movw	r30, r16
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	80 83       	st	Z, r24
}
    3f0e:	0f 90       	pop	r0
    3f10:	cf 91       	pop	r28
    3f12:	df 91       	pop	r29
    3f14:	1f 91       	pop	r17
    3f16:	0f 91       	pop	r16
    3f18:	08 95       	ret

00003f1a <SetServo2Angle>:

void SetServo2Angle(u8 angle) {
    3f1a:	0f 93       	push	r16
    3f1c:	1f 93       	push	r17
    3f1e:	df 93       	push	r29
    3f20:	cf 93       	push	r28
    3f22:	0f 92       	push	r0
    3f24:	cd b7       	in	r28, 0x3d	; 61
    3f26:	de b7       	in	r29, 0x3e	; 62
    3f28:	89 83       	std	Y+1, r24	; 0x01
    if (angle > 180) angle = 180;
    3f2a:	89 81       	ldd	r24, Y+1	; 0x01
    3f2c:	85 3b       	cpi	r24, 0xB5	; 181
    3f2e:	10 f0       	brcs	.+4      	; 0x3f34 <SetServo2Angle+0x1a>
    3f30:	84 eb       	ldi	r24, 0xB4	; 180
    3f32:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = ((angle * 1000UL) / 180) + 1000;
    3f34:	08 e4       	ldi	r16, 0x48	; 72
    3f36:	10 e0       	ldi	r17, 0x00	; 0
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	88 2f       	mov	r24, r24
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	a0 e0       	ldi	r26, 0x00	; 0
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	28 ee       	ldi	r18, 0xE8	; 232
    3f44:	33 e0       	ldi	r19, 0x03	; 3
    3f46:	40 e0       	ldi	r20, 0x00	; 0
    3f48:	50 e0       	ldi	r21, 0x00	; 0
    3f4a:	bc 01       	movw	r22, r24
    3f4c:	cd 01       	movw	r24, r26
    3f4e:	0e 94 3d 21 	call	0x427a	; 0x427a <__mulsi3>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	24 eb       	ldi	r18, 0xB4	; 180
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	40 e0       	ldi	r20, 0x00	; 0
    3f5c:	50 e0       	ldi	r21, 0x00	; 0
    3f5e:	bc 01       	movw	r22, r24
    3f60:	cd 01       	movw	r24, r26
    3f62:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__udivmodsi4>
    3f66:	da 01       	movw	r26, r20
    3f68:	c9 01       	movw	r24, r18
    3f6a:	88 51       	subi	r24, 0x18	; 24
    3f6c:	9c 4f       	sbci	r25, 0xFC	; 252
    3f6e:	f8 01       	movw	r30, r16
    3f70:	91 83       	std	Z+1, r25	; 0x01
    3f72:	80 83       	st	Z, r24
}
    3f74:	0f 90       	pop	r0
    3f76:	cf 91       	pop	r28
    3f78:	df 91       	pop	r29
    3f7a:	1f 91       	pop	r17
    3f7c:	0f 91       	pop	r16
    3f7e:	08 95       	ret

00003f80 <main>:


int main(void){
    3f80:	df 93       	push	r29
    3f82:	cf 93       	push	r28
    3f84:	cd b7       	in	r28, 0x3d	; 61
    3f86:	de b7       	in	r29, 0x3e	; 62
    3f88:	a2 97       	sbiw	r28, 0x22	; 34
    3f8a:	0f b6       	in	r0, 0x3f	; 63
    3f8c:	f8 94       	cli
    3f8e:	de bf       	out	0x3e, r29	; 62
    3f90:	0f be       	out	0x3f, r0	; 63
    3f92:	cd bf       	out	0x3d, r28	; 61
	MDIO_vInit();
    3f94:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MDIO_vInit>
	HKEYPAD_vInit();
    3f98:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <HKEYPAD_vInit>
	HLCD_vInit();
    3f9c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <HLCD_vInit>
	HSTEPPER_vInit();
    3fa0:	0e 94 1c 12 	call	0x2438	; 0x2438 <HSTEPPER_vInit>
    MTIMER0_vInit();
    3fa4:	0e 94 c1 08 	call	0x1182	; 0x1182 <MTIMER0_vInit>
	MTIMER1_vInit();
    3fa8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MTIMER1_vInit>
	MTIMER1_vStartTimer();
    3fac:	0e 94 1b 08 	call	0x1036	; 0x1036 <MTIMER1_vStartTimer>
	MINT_vGlobalIntEnableDisable(INT_GLOBAL_INTERRUPT_ENABLE);
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <MINT_vGlobalIntEnableDisable>
	MDIO_vSetPinDirection(KEYPAD_PORT, KEYPAD_R1, DIO_PIN_DIRECTION_INPUT);
    3fb6:	82 e0       	ldi	r24, 0x02	; 2
    3fb8:	64 e0       	ldi	r22, 0x04	; 4
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
	MDIO_vSetPinValue(KEYPAD_PORT, KEYPAD_R1, DIO_PIN_HIGH);
    3fc0:	82 e0       	ldi	r24, 0x02	; 2
    3fc2:	64 e0       	ldi	r22, 0x04	; 4
    3fc4:	41 e0       	ldi	r20, 0x01	; 1
    3fc6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <MDIO_vSetPinValue>
	MDIO_vSetPinDirection(DIO_PORTB_INDEX, DIO_PIN3, DIO_PIN_DIRECTION_OUTPUT);
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	63 e0       	ldi	r22, 0x03	; 3
    3fce:	41 e0       	ldi	r20, 0x01	; 1
    3fd0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(GRIPPER_SERVO_PORT, GRIPPER_SERVO_PIN, DIO_PIN_DIRECTION_OUTPUT);
    3fd4:	83 e0       	ldi	r24, 0x03	; 3
    3fd6:	63 e0       	ldi	r22, 0x03	; 3
    3fd8:	41 e0       	ldi	r20, 0x01	; 1
    3fda:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <MDIO_vSetPinDirection>





    u8 angle1 = 90, angle2 = 90 , angle3 =90;
    3fde:	8a e5       	ldi	r24, 0x5A	; 90
    3fe0:	88 a3       	std	Y+32, r24	; 0x20
    3fe2:	8a e5       	ldi	r24, 0x5A	; 90
    3fe4:	8f 8f       	std	Y+31, r24	; 0x1f
    3fe6:	8a e5       	ldi	r24, 0x5A	; 90
    3fe8:	8e 8f       	std	Y+30, r24	; 0x1e


    SetServo1Angle(angle1);
    3fea:	88 a1       	ldd	r24, Y+32	; 0x20
    3fec:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <SetServo1Angle>
    SetServo2Angle(angle2);
    3ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ff2:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SetServo2Angle>


	while(1){


		u8 c = HKEYPAD_u8GetCharWait();
    3ff6:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <HKEYPAD_u8GetCharWait>
    3ffa:	8d 8f       	std	Y+29, r24	; 0x1d
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	a8 e4       	ldi	r26, 0x48	; 72
    4002:	b3 e4       	ldi	r27, 0x43	; 67
    4004:	89 8f       	std	Y+25, r24	; 0x19
    4006:	9a 8f       	std	Y+26, r25	; 0x1a
    4008:	ab 8f       	std	Y+27, r26	; 0x1b
    400a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    400c:	69 8d       	ldd	r22, Y+25	; 0x19
    400e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4010:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4012:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	4a ef       	ldi	r20, 0xFA	; 250
    401a:	54 e4       	ldi	r21, 0x44	; 68
    401c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	8d 8b       	std	Y+21, r24	; 0x15
    4026:	9e 8b       	std	Y+22, r25	; 0x16
    4028:	af 8b       	std	Y+23, r26	; 0x17
    402a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    402c:	6d 89       	ldd	r22, Y+21	; 0x15
    402e:	7e 89       	ldd	r23, Y+22	; 0x16
    4030:	8f 89       	ldd	r24, Y+23	; 0x17
    4032:	98 8d       	ldd	r25, Y+24	; 0x18
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	40 e8       	ldi	r20, 0x80	; 128
    403a:	5f e3       	ldi	r21, 0x3F	; 63
    403c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4040:	88 23       	and	r24, r24
    4042:	2c f4       	brge	.+10     	; 0x404e <main+0xce>
		__ticks = 1;
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	9c 8b       	std	Y+20, r25	; 0x14
    404a:	8b 8b       	std	Y+19, r24	; 0x13
    404c:	3f c0       	rjmp	.+126    	; 0x40cc <main+0x14c>
	else if (__tmp > 65535)
    404e:	6d 89       	ldd	r22, Y+21	; 0x15
    4050:	7e 89       	ldd	r23, Y+22	; 0x16
    4052:	8f 89       	ldd	r24, Y+23	; 0x17
    4054:	98 8d       	ldd	r25, Y+24	; 0x18
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	3f ef       	ldi	r19, 0xFF	; 255
    405a:	4f e7       	ldi	r20, 0x7F	; 127
    405c:	57 e4       	ldi	r21, 0x47	; 71
    405e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4062:	18 16       	cp	r1, r24
    4064:	4c f5       	brge	.+82     	; 0x40b8 <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4066:	69 8d       	ldd	r22, Y+25	; 0x19
    4068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    406a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    406c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e2       	ldi	r20, 0x20	; 32
    4074:	51 e4       	ldi	r21, 0x41	; 65
    4076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	bc 01       	movw	r22, r24
    4080:	cd 01       	movw	r24, r26
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	9c 8b       	std	Y+20, r25	; 0x14
    408c:	8b 8b       	std	Y+19, r24	; 0x13
    408e:	0f c0       	rjmp	.+30     	; 0x40ae <main+0x12e>
    4090:	88 ec       	ldi	r24, 0xC8	; 200
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	9a 8b       	std	Y+18, r25	; 0x12
    4096:	89 8b       	std	Y+17, r24	; 0x11
    4098:	89 89       	ldd	r24, Y+17	; 0x11
    409a:	9a 89       	ldd	r25, Y+18	; 0x12
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	f1 f7       	brne	.-4      	; 0x409c <main+0x11c>
    40a0:	9a 8b       	std	Y+18, r25	; 0x12
    40a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a4:	8b 89       	ldd	r24, Y+19	; 0x13
    40a6:	9c 89       	ldd	r25, Y+20	; 0x14
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	9c 8b       	std	Y+20, r25	; 0x14
    40ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ae:	8b 89       	ldd	r24, Y+19	; 0x13
    40b0:	9c 89       	ldd	r25, Y+20	; 0x14
    40b2:	00 97       	sbiw	r24, 0x00	; 0
    40b4:	69 f7       	brne	.-38     	; 0x4090 <main+0x110>
    40b6:	14 c0       	rjmp	.+40     	; 0x40e0 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b8:	6d 89       	ldd	r22, Y+21	; 0x15
    40ba:	7e 89       	ldd	r23, Y+22	; 0x16
    40bc:	8f 89       	ldd	r24, Y+23	; 0x17
    40be:	98 8d       	ldd	r25, Y+24	; 0x18
    40c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	9c 8b       	std	Y+20, r25	; 0x14
    40ca:	8b 8b       	std	Y+19, r24	; 0x13
    40cc:	8b 89       	ldd	r24, Y+19	; 0x13
    40ce:	9c 89       	ldd	r25, Y+20	; 0x14
    40d0:	98 8b       	std	Y+16, r25	; 0x10
    40d2:	8f 87       	std	Y+15, r24	; 0x0f
    40d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40d6:	98 89       	ldd	r25, Y+16	; 0x10
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <main+0x158>
    40dc:	98 8b       	std	Y+16, r25	; 0x10
    40de:	8f 87       	std	Y+15, r24	; 0x0f

        _delay_ms(200);

        switch(c) {
    40e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40e2:	28 2f       	mov	r18, r24
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	3a a3       	std	Y+34, r19	; 0x22
    40e8:	29 a3       	std	Y+33, r18	; 0x21
    40ea:	89 a1       	ldd	r24, Y+33	; 0x21
    40ec:	9a a1       	ldd	r25, Y+34	; 0x22
    40ee:	84 33       	cpi	r24, 0x34	; 52
    40f0:	91 05       	cpc	r25, r1
    40f2:	b1 f1       	breq	.+108    	; 0x4160 <main+0x1e0>
    40f4:	29 a1       	ldd	r18, Y+33	; 0x21
    40f6:	3a a1       	ldd	r19, Y+34	; 0x22
    40f8:	25 33       	cpi	r18, 0x35	; 53
    40fa:	31 05       	cpc	r19, r1
    40fc:	34 f4       	brge	.+12     	; 0x410a <main+0x18a>
    40fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4100:	9a a1       	ldd	r25, Y+34	; 0x22
    4102:	82 33       	cpi	r24, 0x32	; 50
    4104:	91 05       	cpc	r25, r1
    4106:	b1 f0       	breq	.+44     	; 0x4134 <main+0x1b4>
    4108:	35 c0       	rjmp	.+106    	; 0x4174 <main+0x1f4>
    410a:	29 a1       	ldd	r18, Y+33	; 0x21
    410c:	3a a1       	ldd	r19, Y+34	; 0x22
    410e:	26 33       	cpi	r18, 0x36	; 54
    4110:	31 05       	cpc	r19, r1
    4112:	d9 f0       	breq	.+54     	; 0x414a <main+0x1ca>
    4114:	89 a1       	ldd	r24, Y+33	; 0x21
    4116:	9a a1       	ldd	r25, Y+34	; 0x22
    4118:	88 33       	cpi	r24, 0x38	; 56
    411a:	91 05       	cpc	r25, r1
    411c:	59 f5       	brne	.+86     	; 0x4174 <main+0x1f4>
            case '8':
            	HLCD_vSendCommand(LCD_CLEAR);
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
            	angle1 += 10;
    4124:	88 a1       	ldd	r24, Y+32	; 0x20
    4126:	86 5f       	subi	r24, 0xF6	; 246
    4128:	88 a3       	std	Y+32, r24	; 0x20
            	HLCD_vSendString(" S1 move cw ");
    412a:	80 e6       	ldi	r24, 0x60	; 96
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <HLCD_vSendString>
    4132:	20 c0       	rjmp	.+64     	; 0x4174 <main+0x1f4>
            	break;
            case '2':
            	HLCD_vSendCommand(LCD_CLEAR);
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
            	angle1 -= 10;
    413a:	88 a1       	ldd	r24, Y+32	; 0x20
    413c:	8a 50       	subi	r24, 0x0A	; 10
    413e:	88 a3       	std	Y+32, r24	; 0x20
            	HLCD_vSendString(" S1 move ccw");
    4140:	8d e6       	ldi	r24, 0x6D	; 109
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <HLCD_vSendString>
    4148:	15 c0       	rjmp	.+42     	; 0x4174 <main+0x1f4>
            	break;
            case '6':
            	HLCD_vSendCommand(LCD_CLEAR);
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
            	angle2 += 10;
    4150:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4152:	86 5f       	subi	r24, 0xF6	; 246
    4154:	8f 8f       	std	Y+31, r24	; 0x1f
            	HLCD_vSendString(" S2 move cw ");
    4156:	8a e7       	ldi	r24, 0x7A	; 122
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <HLCD_vSendString>
    415e:	0a c0       	rjmp	.+20     	; 0x4174 <main+0x1f4>
            	break;
            case '4':
            	HLCD_vSendCommand(LCD_CLEAR);
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	0e 94 df 19 	call	0x33be	; 0x33be <HLCD_vSendCommand>
            	angle2 -= 10;
    4166:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4168:	8a 50       	subi	r24, 0x0A	; 10
    416a:	8f 8f       	std	Y+31, r24	; 0x1f
            	HLCD_vSendString(" S2 move ccw ");
    416c:	87 e8       	ldi	r24, 0x87	; 135
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <HLCD_vSendString>
            	break;
        }

        if(angle1 > 180) angle1 = 180;
    4174:	88 a1       	ldd	r24, Y+32	; 0x20
    4176:	85 3b       	cpi	r24, 0xB5	; 181
    4178:	10 f0       	brcs	.+4      	; 0x417e <main+0x1fe>
    417a:	84 eb       	ldi	r24, 0xB4	; 180
    417c:	88 a3       	std	Y+32, r24	; 0x20
        if(angle2 > 180) angle2 = 180;
    417e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4180:	85 3b       	cpi	r24, 0xB5	; 181
    4182:	10 f0       	brcs	.+4      	; 0x4188 <main+0x208>
    4184:	84 eb       	ldi	r24, 0xB4	; 180
    4186:	8f 8f       	std	Y+31, r24	; 0x1f

        SetServo1Angle(angle1);
    4188:	88 a1       	ldd	r24, Y+32	; 0x20
    418a:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <SetServo1Angle>
        SetServo2Angle(angle2);
    418e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4190:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SetServo2Angle>
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	a0 ea       	ldi	r26, 0xA0	; 160
    419a:	b1 e4       	ldi	r27, 0x41	; 65
    419c:	8b 87       	std	Y+11, r24	; 0x0b
    419e:	9c 87       	std	Y+12, r25	; 0x0c
    41a0:	ad 87       	std	Y+13, r26	; 0x0d
    41a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	4a ef       	ldi	r20, 0xFA	; 250
    41b2:	54 e4       	ldi	r21, 0x44	; 68
    41b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	8f 83       	std	Y+7, r24	; 0x07
    41be:	98 87       	std	Y+8, r25	; 0x08
    41c0:	a9 87       	std	Y+9, r26	; 0x09
    41c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41c4:	6f 81       	ldd	r22, Y+7	; 0x07
    41c6:	78 85       	ldd	r23, Y+8	; 0x08
    41c8:	89 85       	ldd	r24, Y+9	; 0x09
    41ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e8       	ldi	r20, 0x80	; 128
    41d2:	5f e3       	ldi	r21, 0x3F	; 63
    41d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41d8:	88 23       	and	r24, r24
    41da:	2c f4       	brge	.+10     	; 0x41e6 <main+0x266>
		__ticks = 1;
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	9e 83       	std	Y+6, r25	; 0x06
    41e2:	8d 83       	std	Y+5, r24	; 0x05
    41e4:	3f c0       	rjmp	.+126    	; 0x4264 <main+0x2e4>
	else if (__tmp > 65535)
    41e6:	6f 81       	ldd	r22, Y+7	; 0x07
    41e8:	78 85       	ldd	r23, Y+8	; 0x08
    41ea:	89 85       	ldd	r24, Y+9	; 0x09
    41ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	3f ef       	ldi	r19, 0xFF	; 255
    41f2:	4f e7       	ldi	r20, 0x7F	; 127
    41f4:	57 e4       	ldi	r21, 0x47	; 71
    41f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41fa:	18 16       	cp	r1, r24
    41fc:	4c f5       	brge	.+82     	; 0x4250 <main+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4200:	7c 85       	ldd	r23, Y+12	; 0x0c
    4202:	8d 85       	ldd	r24, Y+13	; 0x0d
    4204:	9e 85       	ldd	r25, Y+14	; 0x0e
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e2       	ldi	r20, 0x20	; 32
    420c:	51 e4       	ldi	r21, 0x41	; 65
    420e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	bc 01       	movw	r22, r24
    4218:	cd 01       	movw	r24, r26
    421a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	9e 83       	std	Y+6, r25	; 0x06
    4224:	8d 83       	std	Y+5, r24	; 0x05
    4226:	0f c0       	rjmp	.+30     	; 0x4246 <main+0x2c6>
    4228:	88 ec       	ldi	r24, 0xC8	; 200
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	9c 83       	std	Y+4, r25	; 0x04
    422e:	8b 83       	std	Y+3, r24	; 0x03
    4230:	8b 81       	ldd	r24, Y+3	; 0x03
    4232:	9c 81       	ldd	r25, Y+4	; 0x04
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <main+0x2b4>
    4238:	9c 83       	std	Y+4, r25	; 0x04
    423a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423c:	8d 81       	ldd	r24, Y+5	; 0x05
    423e:	9e 81       	ldd	r25, Y+6	; 0x06
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	9e 83       	std	Y+6, r25	; 0x06
    4244:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4246:	8d 81       	ldd	r24, Y+5	; 0x05
    4248:	9e 81       	ldd	r25, Y+6	; 0x06
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	69 f7       	brne	.-38     	; 0x4228 <main+0x2a8>
    424e:	d3 ce       	rjmp	.-602    	; 0x3ff6 <main+0x76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4250:	6f 81       	ldd	r22, Y+7	; 0x07
    4252:	78 85       	ldd	r23, Y+8	; 0x08
    4254:	89 85       	ldd	r24, Y+9	; 0x09
    4256:	9a 85       	ldd	r25, Y+10	; 0x0a
    4258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	9e 83       	std	Y+6, r25	; 0x06
    4262:	8d 83       	std	Y+5, r24	; 0x05
    4264:	8d 81       	ldd	r24, Y+5	; 0x05
    4266:	9e 81       	ldd	r25, Y+6	; 0x06
    4268:	9a 83       	std	Y+2, r25	; 0x02
    426a:	89 83       	std	Y+1, r24	; 0x01
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	9a 81       	ldd	r25, Y+2	; 0x02
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	f1 f7       	brne	.-4      	; 0x4270 <main+0x2f0>
    4274:	9a 83       	std	Y+2, r25	; 0x02
    4276:	89 83       	std	Y+1, r24	; 0x01
    4278:	be ce       	rjmp	.-644    	; 0x3ff6 <main+0x76>

0000427a <__mulsi3>:
    427a:	62 9f       	mul	r22, r18
    427c:	d0 01       	movw	r26, r0
    427e:	73 9f       	mul	r23, r19
    4280:	f0 01       	movw	r30, r0
    4282:	82 9f       	mul	r24, r18
    4284:	e0 0d       	add	r30, r0
    4286:	f1 1d       	adc	r31, r1
    4288:	64 9f       	mul	r22, r20
    428a:	e0 0d       	add	r30, r0
    428c:	f1 1d       	adc	r31, r1
    428e:	92 9f       	mul	r25, r18
    4290:	f0 0d       	add	r31, r0
    4292:	83 9f       	mul	r24, r19
    4294:	f0 0d       	add	r31, r0
    4296:	74 9f       	mul	r23, r20
    4298:	f0 0d       	add	r31, r0
    429a:	65 9f       	mul	r22, r21
    429c:	f0 0d       	add	r31, r0
    429e:	99 27       	eor	r25, r25
    42a0:	72 9f       	mul	r23, r18
    42a2:	b0 0d       	add	r27, r0
    42a4:	e1 1d       	adc	r30, r1
    42a6:	f9 1f       	adc	r31, r25
    42a8:	63 9f       	mul	r22, r19
    42aa:	b0 0d       	add	r27, r0
    42ac:	e1 1d       	adc	r30, r1
    42ae:	f9 1f       	adc	r31, r25
    42b0:	bd 01       	movw	r22, r26
    42b2:	cf 01       	movw	r24, r30
    42b4:	11 24       	eor	r1, r1
    42b6:	08 95       	ret

000042b8 <__udivmodhi4>:
    42b8:	aa 1b       	sub	r26, r26
    42ba:	bb 1b       	sub	r27, r27
    42bc:	51 e1       	ldi	r21, 0x11	; 17
    42be:	07 c0       	rjmp	.+14     	; 0x42ce <__udivmodhi4_ep>

000042c0 <__udivmodhi4_loop>:
    42c0:	aa 1f       	adc	r26, r26
    42c2:	bb 1f       	adc	r27, r27
    42c4:	a6 17       	cp	r26, r22
    42c6:	b7 07       	cpc	r27, r23
    42c8:	10 f0       	brcs	.+4      	; 0x42ce <__udivmodhi4_ep>
    42ca:	a6 1b       	sub	r26, r22
    42cc:	b7 0b       	sbc	r27, r23

000042ce <__udivmodhi4_ep>:
    42ce:	88 1f       	adc	r24, r24
    42d0:	99 1f       	adc	r25, r25
    42d2:	5a 95       	dec	r21
    42d4:	a9 f7       	brne	.-22     	; 0x42c0 <__udivmodhi4_loop>
    42d6:	80 95       	com	r24
    42d8:	90 95       	com	r25
    42da:	bc 01       	movw	r22, r24
    42dc:	cd 01       	movw	r24, r26
    42de:	08 95       	ret

000042e0 <__udivmodsi4>:
    42e0:	a1 e2       	ldi	r26, 0x21	; 33
    42e2:	1a 2e       	mov	r1, r26
    42e4:	aa 1b       	sub	r26, r26
    42e6:	bb 1b       	sub	r27, r27
    42e8:	fd 01       	movw	r30, r26
    42ea:	0d c0       	rjmp	.+26     	; 0x4306 <__udivmodsi4_ep>

000042ec <__udivmodsi4_loop>:
    42ec:	aa 1f       	adc	r26, r26
    42ee:	bb 1f       	adc	r27, r27
    42f0:	ee 1f       	adc	r30, r30
    42f2:	ff 1f       	adc	r31, r31
    42f4:	a2 17       	cp	r26, r18
    42f6:	b3 07       	cpc	r27, r19
    42f8:	e4 07       	cpc	r30, r20
    42fa:	f5 07       	cpc	r31, r21
    42fc:	20 f0       	brcs	.+8      	; 0x4306 <__udivmodsi4_ep>
    42fe:	a2 1b       	sub	r26, r18
    4300:	b3 0b       	sbc	r27, r19
    4302:	e4 0b       	sbc	r30, r20
    4304:	f5 0b       	sbc	r31, r21

00004306 <__udivmodsi4_ep>:
    4306:	66 1f       	adc	r22, r22
    4308:	77 1f       	adc	r23, r23
    430a:	88 1f       	adc	r24, r24
    430c:	99 1f       	adc	r25, r25
    430e:	1a 94       	dec	r1
    4310:	69 f7       	brne	.-38     	; 0x42ec <__udivmodsi4_loop>
    4312:	60 95       	com	r22
    4314:	70 95       	com	r23
    4316:	80 95       	com	r24
    4318:	90 95       	com	r25
    431a:	9b 01       	movw	r18, r22
    431c:	ac 01       	movw	r20, r24
    431e:	bd 01       	movw	r22, r26
    4320:	cf 01       	movw	r24, r30
    4322:	08 95       	ret

00004324 <__prologue_saves__>:
    4324:	2f 92       	push	r2
    4326:	3f 92       	push	r3
    4328:	4f 92       	push	r4
    432a:	5f 92       	push	r5
    432c:	6f 92       	push	r6
    432e:	7f 92       	push	r7
    4330:	8f 92       	push	r8
    4332:	9f 92       	push	r9
    4334:	af 92       	push	r10
    4336:	bf 92       	push	r11
    4338:	cf 92       	push	r12
    433a:	df 92       	push	r13
    433c:	ef 92       	push	r14
    433e:	ff 92       	push	r15
    4340:	0f 93       	push	r16
    4342:	1f 93       	push	r17
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    434c:	ca 1b       	sub	r28, r26
    434e:	db 0b       	sbc	r29, r27
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	09 94       	ijmp

0000435c <__epilogue_restores__>:
    435c:	2a 88       	ldd	r2, Y+18	; 0x12
    435e:	39 88       	ldd	r3, Y+17	; 0x11
    4360:	48 88       	ldd	r4, Y+16	; 0x10
    4362:	5f 84       	ldd	r5, Y+15	; 0x0f
    4364:	6e 84       	ldd	r6, Y+14	; 0x0e
    4366:	7d 84       	ldd	r7, Y+13	; 0x0d
    4368:	8c 84       	ldd	r8, Y+12	; 0x0c
    436a:	9b 84       	ldd	r9, Y+11	; 0x0b
    436c:	aa 84       	ldd	r10, Y+10	; 0x0a
    436e:	b9 84       	ldd	r11, Y+9	; 0x09
    4370:	c8 84       	ldd	r12, Y+8	; 0x08
    4372:	df 80       	ldd	r13, Y+7	; 0x07
    4374:	ee 80       	ldd	r14, Y+6	; 0x06
    4376:	fd 80       	ldd	r15, Y+5	; 0x05
    4378:	0c 81       	ldd	r16, Y+4	; 0x04
    437a:	1b 81       	ldd	r17, Y+3	; 0x03
    437c:	aa 81       	ldd	r26, Y+2	; 0x02
    437e:	b9 81       	ldd	r27, Y+1	; 0x01
    4380:	ce 0f       	add	r28, r30
    4382:	d1 1d       	adc	r29, r1
    4384:	0f b6       	in	r0, 0x3f	; 63
    4386:	f8 94       	cli
    4388:	de bf       	out	0x3e, r29	; 62
    438a:	0f be       	out	0x3f, r0	; 63
    438c:	cd bf       	out	0x3d, r28	; 61
    438e:	ed 01       	movw	r28, r26
    4390:	08 95       	ret

00004392 <_exit>:
    4392:	f8 94       	cli

00004394 <__stop_program>:
    4394:	ff cf       	rjmp	.-2      	; 0x4394 <__stop_program>
